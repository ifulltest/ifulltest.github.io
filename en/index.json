[{"categories":null,"content":"When you first go on this website, the site road map can guide you quickly through the structure of the website and the author\u0026rsquo;s habits of classification\u0026hellip;\nThe basic structure of this website is as above picture:\nFunctionality:  Language switcher - used to switch between English and Chinese blogs.   Classification Switcher - from different perspective to classify all the articles in site, such as the Series, Categories, Tags, Archives\u0026hellip;   Search in Site - get related blogs by searching keywords within this website.   Social Links - get in touch with the author by other various social links.   Share and Favorites - bookmarks your favorite articles by Ctrl+D to local browser, or share articles to different social media.   Article Comments - makes you directly communicate with the author within this website.  Series: The series means to publish collections of articles that related to specific tool within testing technical stack which will be starting from introduction and end to comprehensive practice.\n  User Manual - delivers necessary information about the author and the website.\n  Migrant Stories - will post or forward migrant stories in New Zealand. (in planning \u0026hellip;)\n  Religion and Philosophy - will post or forward excellent articles related to religion or philosophy. (in planning \u0026hellip;)\n  Postman API Automation Practice - is a series of Postman API automation practices. (coming soon \u0026hellip;)\n  Cypress UI Automation Practice - is a series of Cypress UI automation practices. (in planning \u0026hellip;)\n  Appium Mobile Automation Practice - is a series of Appium mobile automation practices. (in planning \u0026hellip;)\n  JMeter Performance Testing Practice - is a series of JMeter performance testing practices. (in planning \u0026hellip;)\n  Categories: Not like the series, categories will collect more unsystematic knowledge points, and part of these articles can be components of a specific series in the future.\n  Functional Testing - Original or forwarded articles related to functional testing.\n  API Automation - Original or forwarded articles related to API automation testing.\n  UI Automation - Original or forwarded articles related to UI automation testing.\n  Mobile Automation - Original or forwarded articles related to mobile automation testing.\n  Performance Testing - Original or forwarded articles related to performance testing.\n  DevOps - Original or forwarded articles related to DevOps.\n  Tags: The classification of \u0026lsquo;Tags\u0026rsquo; often down to a specific tool. The articles under \u0026lsquo;Tags\u0026rsquo; has a clear knowledge point, and can be reproduced by anyone.\n  Postman - Original or forwarded articles related to Postman.\n  Cypress- Original or forwarded articles related to Cypress.\n  Cucumber- Original or forwarded articles related to Cucumber.\n  Selenium- Original or forwarded articles related to Selenium.\n  Appium - Original or forwarded articles related to Appium.\n  JMeter- Original or forwarded articles related to JMeter.\n  Jenkins- Original or forwarded articles related to Jenkins.\n  Archives: The classification of \u0026lsquo;Archives\u0026rsquo; will archive all the articles in the website, and display them by publishing time.\n","date":"Jan 11, 2021","permalink":"https://ifulltest.github.io/en/posts/site-road-map/","series":["User Manual"],"tags":null,"title":"Site Map"},{"categories":null,"content":"What\u0026rsquo;re the reasons for writing the series?   1st, for testing skills demonstration.   The author wanted to demonstrate his comprehensive skills within API, UI, mobile automation testing domains through a series of automation testing practices sharing.\n  2nd, for guiding those who are new to automation testing.   Choose a popular product to demonstrate its API automation testing process will be an easy way for the above people to quickly get started into the automation testing domain to save their time.\n  3rd, for mutual boost and progress.   What\u0026rsquo;s next after this series? This series mainly covers postman practice from business and API analysis, API testing script skills, API testing scenario, to CI process.\nIt\u0026rsquo;s only a tiny part of the full-stack testing.\nAfter this series, the author will continue publish other automation testing practices. Such as:\nCypress + Cucumber UI automation testing practice,\nAppium mobile automation testing practice,\nJMeter + Grafana\u0026amp;Prometheus\u0026amp;InfluxDB performance testing practice,\nJenkins / Azure CI process,\nDocker application.\nStay tuned.\nWhat is Trademe sandbox? The Trade Me sandbox environment is a completely independent copy of the Trade Me website, API and database.\nIt is designed to allow you to test potentially destructive API operations in a safe environment.\nWhy I choose the Trademe? When I want to choose a product to practice and display my automation demo, I will take some factors into my consideration:\n Does this product is popular and widely used by the public? Is the business complexity of this product enough for me to cover different types of testing practices? Is there a clear enough specification for this product to allow me to develop my demo? Can practicers who see my demo reproduce it in the same product environment?  TradeMe exactly fulfils all these above considerations for me.\nTradeMe sandbox official materials   Trademe sandbox website\r.   Trademe development documents entry\r.     Trademe getting started\r.     Trademe api-overview\r.     Trademe register an application\r.     Trademe API Reference\r.   Preparation before API testing demo 1.Overview  Create a personal account. Register your API application - get Consumer Key and Consumer Secret. Get approved the Authentication - get OAuth Token and OAuth Token Secret. Connectivity testing for verifying the authentication worked.  2.Register a TradMe Sandbox User\r 3.Register your API Application\r  My TradeMe\r   My Trade Me API applications\r   Developer options\r   Register a new application\r   Gets the consumer key and consumer secret  If successfully registered, will get the consumer key and consumer secret.\n4.Authentication\r  Generate an access token  Note: if you don’t give a right call back domain at the step of ‘Register a new application’, this generate token action will be failed like below page.\na referential call back domain can be https://developer.trademe.co.nz\ra referential call back url can be https://developer.trademe.co.nz/callback\r\n Allow your authentication   Get your token (back to authentication page\rcan see it)  Trademe first API demo connectivity testing When we finished the preparation, we could pick two types of transactions to test the API connectivity.\nThe first transaction does not need authentication, and the second transaction needs authentication.\nWe will use the API testing tool Postman to verify the connectivity.\n  How to install Postman?   Postman installation refers to: How to install Postman?\r\n  All API domain in sandbox environment - api.tmsandbox.co.nz   Details see Testing your app\r\n  API - Retrieve general categories without authentication info   API - retrieve general categories reference\rUsing Postman tests the API connectivity\n  API - retrieve-your-watchlist with authentication info   API - retrieve your watchlist reference\rUsing Postman tests the API connectivity\nNote:\nWhen you do want to chain your upstream and downstream transactions, you may need self-assemble a network request.\nThen you should note that one of the auth domain called oauth_signature, will be composed with below sub-domain\noauth_signature = Consumer Secret%26OAuth Token Secret\n","date":"Jul 20, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-first-demo/","series":["Postman API Automation Practice"],"tags":["Postman","Cypress"],"title":"Trade Me-1-API testing first demo"},{"categories":null,"content":"How to pick the typical transactions? Before coding the API test script, we need to pick some typical transactions from TradeMe.\nAnd these transactions we\u0026rsquo;ve picked better to cover different types of requests, such as the get, post, delete.\nAnd part of these transactions should correlate with each other at the business level.\nAPI - Retrieve general categories\r   Business scope selection: Get all subcategories.   API Function: Retrieves all or part of the Trade Me category tree.   Front-end page     Key request fields     Key response fields - A category tree.           Name String or null The name of the category.   Number String or null A unique identifier for the category e.g. \u0026ldquo;0004-0369-6076-\u0026rdquo;. We plan to change this to a numeric identifier (e.g. \u0026ldquo;6076\u0026rdquo;) so you should ensure you can cope with both formats.   Path String or null The full URL path of this category e.g. \u0026ldquo;/Home-living/Beds-bedroom-furniture/Bedside-tables\u0026rdquo;.   Subcategories Collection of or null The list of subcategories belonging to this category.   \u0026hellip; \u0026hellip; \u0026hellip;    More refer to: Retrieve general categories\r  Example request   GET https://api.tmsandbox.co.nz/v1/Categories.JSON?depth=1\n  Example response   { \u0026#34;Name\u0026#34;: \u0026#34;Root\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Subcategories\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Trade Me Motors\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0001-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Trade-Me-Motors\u0026#34;, \u0026#34;HasClassifieds\u0026#34;: true, \u0026#34;AreaOfBusiness\u0026#34;: 3, \u0026#34;CanHaveSecondCategory\u0026#34;: true, \u0026#34;CanBeSecondCategory\u0026#34;: true, \u0026#34;IsLeaf\u0026#34;: false }, { \u0026#34;Name\u0026#34;: \u0026#34;Trade Me Property\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0350-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Trade-Me-Property\u0026#34;, \u0026#34;HasClassifieds\u0026#34;: true, \u0026#34;AreaOfBusiness\u0026#34;: 2, \u0026#34;IsLeaf\u0026#34;: false }, ... ], \u0026#34;AreaOfBusiness\u0026#34;: 0, \u0026#34;IsLeaf\u0026#34;: false } API - Retrieve your watchlist\r   Business scope selection   Chained portfolio transactions\nRetrieve your watchlist(I\u0026rsquo;m here)\r-\u0026gt; Remove a listing from your watchlist\r-\u0026gt; Retrieve closing soon listings\r-\u0026gt; Add a listing to your watchlist\rQuery items in the watch list.\n  API Function: Retrieves a list of items on the authenticated user\u0026rsquo;s watchlist.   Front-end page     Key request fields     Key response fields - the Watchlist for the authenticated user.            TotalCount Integer The total number of results in the collection. Can be larger than the number of returned results.    Page Integer The index of the current page of results (starts at 1).    PageSize Integer The number of results in the current page.    List Collection of or null A list of the results in the current page.     ListingId Long Integer The ID of the listing.    BidCount Integer The number of bids on the item.   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;    More refer to: Retrieve your watchlist\r  Example request   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Watchlist/All.JSON\n  Example response   { \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149294406, \u0026#34;Title\u0026#34;: \u0026#34;11x Assorted T-Handle Hex Allen Keys\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;5964-5999-6004-9825-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 1.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;\\/Date(1626749989730)\\/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;\\/Date(1626922789730)\\/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;\\/Date(1626855531548)\\/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;\\/Building-renovation\\/Tools\\/Hand-tools\\/Sets-kits\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https:\\/\\/images.tmsandbox.co.nz\\/photoserver\\/thumb\\/8152697.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 8152697, \u0026#34;RegionId\u0026#34;: 16, \u0026#34;Region\u0026#34;: \u0026#34;Canterbury\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Christchurch City\u0026#34;, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;\\/Date(0)\\/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Sets \u0026amp; kits\u0026#34;, \u0026#34;Attributes\u0026#34;: [ ], \u0026#34;Subtitle\u0026#34;: \u0026#34;SKYLARC’S WINDFLOW TECHNOLOGY ONLINE AUCTION\u0026#34;, \u0026#34;MinimumNextBidAmount\u0026#34;: 1.0000, \u0026#34;IsOnWatchList\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$1.00\u0026#34;, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [ ], \u0026#34;Tags\u0026#34;: [ ] }, \u0026#34;IsDealer\u0026#34;: false, \u0026#34;IsLeading\u0026#34;: false, \u0026#34;IsOutbid\u0026#34;: false, \u0026#34;IsInCart\u0026#34;: false, \u0026#34;MemberBidShippingOption\u0026#34;: 0 } ], \u0026#34;FoundCategories\u0026#34;: [ { \u0026#34;Count\u0026#34;: 1, \u0026#34;Category\u0026#34;: \u0026#34;5964-\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;Building \u0026amp; renovation\u0026#34;, \u0026#34;CategoryId\u0026#34;: 5964 } ] } API - Remove a listing from your watchlist\r   Business scope selection   Chained portfolio transactions\nRetrieve your watchlist\r-\u0026gt; Remove a listing from your watchlist(I\u0026rsquo;m here)\r-\u0026gt; Retrieve closing soon listings\r-\u0026gt; Add a listing to your watchlist\rChoose API - Retrieve your watchlist as pre-request to get all items that want to be removed\nRemove all items in the watch list\n  API Function: Removes a listing from the authenticated user\u0026rsquo;s watchlist.   Front-end page     Key request fields     Key response fields - Details on whether the operation succeeded.   Attempting to remove an auction that doesn\u0026rsquo;t exist or is not on the watchlist will not produce an error.\n          Success Boolean Indicates whether the operation was successful.   Description String or null The description of the error, if the operation failed.    More refer to: Remove a listing from your watchlist\r  Example request   DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/0000000000.JSON\n  Example response   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } API - Retrieve closing soon listings\r   Business scope selection   Chained portfolio transactions\nRetrieve your watchlist\r-\u0026gt; Remove a listing from your watchlist\r-\u0026gt; Retrieve closing soon listings(I\u0026rsquo;m here)\r-\u0026gt; Add a listing to your watchlist\rGet all the items at 1st page of the closing soon listings.\n  API Function: retrieves the items closing soon for the whole country or for a single region.   Front-end page     Key request fields   More refer to: Retrieve closing soon listings\r  Key response fields            TotalCount Integer The total number of results in the collection. Can be larger than the number of returned results.    TotalCountTruncated Boolean True if the total count of results exceeded the allowed maximum and was truncated.    Page Integer The index of the current page of results (starts at 1).    PageSize Integer The number of results in the current page.    List Collection of or null A list of the results in the current page.     ListingId Long Integer The ID of the listing.   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;    More refer to: Retrieve closing soon listings\r  Example request   GET https://api.tmsandbox.co.nz/v1/Listings/closing.JSON?rows=1000\n  Example response   { \u0026#34;TotalCount\u0026#34;: 250, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 250, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149292446, \u0026#34;Title\u0026#34;: \u0026#34;fox drawing\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0339-5487-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;BuyNowPrice\u0026#34;: 1.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1626323575513)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1626928375513)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1626926636817)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Art/Digital-art\u0026#34;, \u0026#34;Region\u0026#34;: \u0026#34;Canterbury\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Christchurch City\u0026#34;, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$1.00 per item\u0026#34;, \u0026#34;PromotionId\u0026#34;: 1, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;MemberId\u0026#34;: 4007247 }, ... ] } API - Add a listing to your watchlist\r   Business selection   Chained portfolio transactions\nRetrieve your watchlist\r-\u0026gt; Remove a listing from your watchlist\r-\u0026gt; Retrieve closing soon listings\r-\u0026gt; Add a listing to your watchlist(I’m here)\rChoose API - Retrieve closing soon listings as pre-request to get all items on the 1st page of closing soon listings.\nRandomly add 1 of the above items to the watchlist.\n  API Function: Adds a listing to the authenticated user\u0026rsquo;s watchlist.   Front-end page     Key request fields   More refer to: Add a listing to your watchlist\r  Key response fields - Details on whether the operation succeeded.           Success Boolean Indicates whether the operation was successful.   Description String or null The description of the error, if the operation failed.      Example request   POST https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/2149292722.JSON\n  Example response   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } API - Retrieve your won items\r   Business selection   Chained portfolio transactions\nRetrieve your won items(I’m here)\r-\u0026gt; Remove a purchase from your won items list\r-\u0026gt; General search\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now\r  API Function: Retrieves a list of purchases for the authenticated user.   Multiple-quantity auctions can be purchased multiple times.\n  Front-end page     Key request fields     Key response fields - A list of items the authenticated user has purchased.            TotalCount Integer The total number of results in the collection. Can be larger than the number of returned results.    Page Integer The index of the current page of results (starts at 1).    PageSize Integer The number of results in the current page.    List Collection of or null A list of the results in the current page.     ListingId Long Integer The ID of the listing.   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;   PurchaseId Integer A unique ID that identifies the sale.    \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;    More refer to: Retrieve your won items\r  Example request   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/All.JSON\n  Example response   { \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149289946, \u0026#34;Title\u0026#34;: \u0026#34;Tankard 72\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0341-6534-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 10.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1625598488240)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1625650049187)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1626932384524)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Crafts/Transfers\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/4548749.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 4548749, \u0026#34;Seller\u0026#34;: { \u0026#34;MemberId\u0026#34;: 4000433, \u0026#34;Nickname\u0026#34;: \u0026#34;junk1b\u0026#34;, \u0026#34;DateAddressVerified\u0026#34;: \u0026#34;/Date(1380798000000)/\u0026#34;, \u0026#34;DateJoined\u0026#34;: \u0026#34;/Date(1343044800000)/\u0026#34;, \u0026#34;Email\u0026#34;: \u0026#34;junk1b@abcde.com\u0026#34;, \u0026#34;UniqueNegative\u0026#34;: 5, \u0026#34;UniquePositive\u0026#34;: 16, \u0026#34;FeedbackCount\u0026#34;: 11, \u0026#34;IsAddressVerified\u0026#34;: true }, \u0026#34;BidCount\u0026#34;: 1, \u0026#34;IsReserveMet\u0026#34;: true, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Transfers\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;Subtitle\u0026#34;: \u0026#34;J1B F4d1111\u0026#34;, \u0026#34;Quantity\u0026#34;: 1, \u0026#34;StatusDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;AuctionAttribute\u0026#34;: \u0026#34;260`TV|3495193540674667286`0\u0026#34;, \u0026#34;BuyerFeedbackPlaced\u0026#34;: 0, \u0026#34;SellerFeedbackPlaced\u0026#34;: 0, \u0026#34;DeliveryId\u0026#34;: 0, \u0026#34;FpoDecisionViaMobile\u0026#34;: false, \u0026#34;HasPaidByCreditCard\u0026#34;: false, \u0026#34;InvoiceId\u0026#34;: 0, \u0026#34;OfferId\u0026#34;: 0, \u0026#34;PaymentInfo\u0026#34;: \u0026#34;NZ Bank Deposit\u0026#34;, \u0026#34;Price\u0026#34;: 20.0000, \u0026#34;SelectedShipping\u0026#34;: \u0026#34;Buyer to pick-up\u0026#34;, \u0026#34;ShippingPrice\u0026#34;: 0, \u0026#34;ShippingType\u0026#34;: 2, \u0026#34;SoldDate\u0026#34;: \u0026#34;/Date(1625650049187)/\u0026#34;, \u0026#34;SoldType\u0026#34;: \u0026#34;BUYNOW\u0026#34;, \u0026#34;PaymentInstructions\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;PurchaseId\u0026#34;: 26180, \u0026#34;ReferenceNumber\u0026#34;: \u0026#34;P26180\u0026#34;, \u0026#34;SubtotalPrice\u0026#34;: 20.0000, \u0026#34;TotalShippingPrice\u0026#34;: 0, \u0026#34;TotalSalePrice\u0026#34;: 20.0000, \u0026#34;TrackedParcels\u0026#34;: [], \u0026#34;TaxSubTotal\u0026#34;: 0.00, \u0026#34;HasPaidByDeferredPayment\u0026#34;: false } ] } API - Remove a purchase from your won items list\r   Business selection   Chained portfolio transactions\nRetrieve your won items\r-\u0026gt; Remove a purchase from your won items list(I’m here)\r-\u0026gt; General search\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now\rChoose API - \u0026lsquo;Retrieve your won items\u0026rsquo; as pre-request to get all won items that want to be removed\nRemove all won items on the won items list\n  API Function: Hides a listing from the won items list.   Front-end page     Key request fields     Key response fields - Details on whether the operation was successful.   Note that this operation will only report failure if the purchase still exists in the won items list after the operation completes. In all other cases, this API will report success (for example it will report success if the purchase ID is invalid or the purchase has already been removed).\n          Success Boolean Indicates whether the operation was successful.   Description String or null The description of the error, if the operation failed.      Example request   DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/26180.JSON\n  Example response   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } API - General search\r   Business scope selection   Chained portfolio transactions\nRetrieve your won items\r-\u0026gt; Remove a purchase from your won items list\r-\u0026gt; General search(I’m here)\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now\rSearching 500 items by search function and only pick the items that has the ‘HasBuyNow’ feature and the BuyNowPrice \u0026lt;= $20 from the response for downstream transaction ‘Retrieve the details of a single listing’ to use.\n  API Function: Allows you to search for listings on Trade Me by category, by keywords or a combination of these two.   The result set can be filtered by a variety of properties, including availability of Buy Now, Pay Now, item condition or seller.\n  Front-end page     Key request fields             page Integer (optional) The page number of the set of results to return, starting from 1. Defaults to 1.   … … …   rows Integer (optional) The number of results per page; also the maximum number of results to return. The maximum is 25 for unauthenticated requests and 500 for authenticated requests. Defaults to 25 (unauthenticated) or 50 (authenticated).   … … …    More refer to: General search\r  Key response fields - The search results.              TotalCount Integer The total number of results in the collection. Can be larger than the number of returned results.    TotalCountTruncated Boolean True if the total count of results exceeded the allowed maximum and was truncated.    Page Integer The index of the current page of results (starts at 1).    PageSize Integer The number of results in the current page.    List Collection of or null A list of the results in the current page.     ListingId Long Integer The ID of the listing.    BuyNowPrice Number The Buy Now price.    HasBuyNow Boolean Indicates whether the item has Buy Now.   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;    More refer to: General search\r  Example request   GET https://api.tmsandbox.co.nz/v1/Search/General.JSON?buy=All\u0026amp;rows=500\u0026amp;page=4\n  Example response   { \u0026#34;TotalCount\u0026#34;: 16479, \u0026#34;Page\u0026#34;: 4, \u0026#34;PageSize\u0026#34;: 500, \u0026#34;List\u0026#34;: [ ... { \u0026#34;ListingId\u0026#34;: 2149294614, \u0026#34;Title\u0026#34;: \u0026#34;Cobra Glassware\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0341-0881-4739-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 11.0000, \u0026#34;BuyNowPrice\u0026#34;: 33.0000, ... \u0026#34;HasBuyNow\u0026#34;: true, ... }, ... ] } API - Retrieve the details of a single listing\r   Business scope selection   Chained portfolio transactions\nRetrieve your won items\r-\u0026gt; Remove a purchase from your won items list\r-\u0026gt; General search(I’m here)\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now\rOnly pick the item that has the ‘Buy Now’ feature to display.\nFetch a ‘ShippingId’ from the response for downstream transaction ‘Buy an auction using Buy Now’\rto use.https://developer.trademe.co.nz/api-reference/bidding-and-buying-methods/buy-an-auction-using-buy-now)\n  API Function: Retrieves the details of a single listing.   Front-end page     Key request fields     Key response fields - The details of the listing.              ListingId Long Integer The ID of the listing.    \u0026hellip; \u0026hellip; \u0026hellip;    ShippingOptions Collection of or null A list of shipping options.     Method String or null The name of the delivery method (e.g. \u0026ldquo;NZ Courier\u0026rdquo;, \u0026ldquo;Rural Delivery\u0026rdquo;). Only applicable if ShippingType is Custom.    ShippingId Long Integer The ID of the shipping option (used when bidding or for Buy Now). Not required when listing an item.   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;    More refer to: Retrieve the details of a single listing\r  Example request   GET https://api.tmsandbox.co.nz/v1/Listings/2149295093.JSON\n  Example response   { \u0026#34;ListingId\u0026#34;: 2149295093, ... \u0026#34;AllowsPickups\u0026#34;: 3, \u0026#34;ShippingOptions\u0026#34;: [ { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 4.99, \u0026#34;Method\u0026#34;: \u0026#34;nationwide non-rural\u0026#34;, \u0026#34;ShippingId\u0026#34;: 4 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 9.99, \u0026#34;Method\u0026#34;: \u0026#34;rural\u0026#34;, \u0026#34;ShippingId\u0026#34;: 5 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 0, \u0026#34;Method\u0026#34;: \u0026#34;test free shipping\u0026#34;, \u0026#34;ShippingId\u0026#34;: 6 } ], ... } API - Buy an auction using Buy Now\r   Business selection   Chained portfolio transactions\nRetrieve your won items\r-\u0026gt; Remove a purchase from your won items list\r-\u0026gt; General search\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now(I’m here)\rFetch a ‘ShippingId’ from the response for downstream transaction ‘Buy an auction using Buy Now’\rto use.\n  API Function: Buys an item using Buy Now.   Front-end page - Item details page     Front-end page - Confirm purchase page     Front-end page - Purchase details page     Front-end page - Won list page (purchased item shown on this page)     Key request fields     Key response fields - The details of the Buy Now request.              Success Boolean Indicates whether the operation was successful.    Description String or null The description of the error, if the operation failed.    StatusCode Enumeration The status of the Buy Now request.     Success 0 The bid was a success.   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;   PurchaseId Long Integer The ID of the purchase that was just made.    \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;    More refer to: Buy an auction using Buy Now\r  Example request   POST https://api.tmsandbox.co.nz/v1/Bidding/BuyNow.JSON\n  Example response   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Seller\u0026#39;s email owen4@snipesoft.net.nz\u0026#34;, \u0026#34;StatusCode\u0026#34;: 0, \u0026#34;PurchaseId\u0026#34;: 26231 } ","date":"Jul 23, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-typical-transactions/","series":["Postman API Automation Practice"],"tags":["Postman","Cypress"],"title":"Trade Me-2-typical transactions"},{"categories":null,"content":"API - Retrieve general categories script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Retrieves all or part of the Trade Me category tree.   Key request fields   Key response fields - A category tree.           Name String or null The name of the category.   Number String or null A unique identifier for the category e.g. \u0026ldquo;0004-0369-6076-\u0026rdquo;. We plan to change this to a numeric identifier (e.g. \u0026ldquo;6076\u0026rdquo;) so you should ensure you can cope with both formats.   Path String or null The full URL path of this category e.g. \u0026ldquo;/Home-living/Beds-bedroom-furniture/Bedside-tables\u0026rdquo;.   Subcategories Collection of or null The list of subcategories belonging to this category.   \u0026hellip; \u0026hellip; \u0026hellip;    More API specification refers to Retrieve general categories\r.\n  Example request   GET https://api.tmsandbox.co.nz/v1/Categories.JSON?depth=1\n  Example response   { \u0026#34;Name\u0026#34;: \u0026#34;Root\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Subcategories\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Trade Me Motors\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0001-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Trade-Me-Motors\u0026#34;, \u0026#34;HasClassifieds\u0026#34;: true, \u0026#34;AreaOfBusiness\u0026#34;: 3, \u0026#34;CanHaveSecondCategory\u0026#34;: true, \u0026#34;CanBeSecondCategory\u0026#34;: true, \u0026#34;IsLeaf\u0026#34;: false }, { \u0026#34;Name\u0026#34;: \u0026#34;Trade Me Property\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0350-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Trade-Me-Property\u0026#34;, \u0026#34;HasClassifieds\u0026#34;: true, \u0026#34;AreaOfBusiness\u0026#34;: 2, \u0026#34;IsLeaf\u0026#34;: false }, ... ], \u0026#34;AreaOfBusiness\u0026#34;: 0, \u0026#34;IsLeaf\u0026#34;: false } Business Presentation   Front-end page - Go to all categories page     Front-end page - Categories page     Business scope selection   Get all subcategories.\n  Business verification points   Verify a specific subcategory such as \u0026lsquo;Antiques \u0026amp; Collectables\u0026rsquo; exists in the query result.\nAPI Testing Script Debugging   Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\n  Assembling the request - ' Retrieve general categories\r'   From the API specification, parameter - depth=1 means to return all subcategories of the category tree.\nSo the request should be GET https://api.tmsandbox.co.nz/v1/Categories.JSON?depth=1\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;Name\u0026#34;: \u0026#34;Root\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Subcategories\u0026#34;: [ ... { \u0026#34;Name\u0026#34;: \u0026#34;Antiques \u0026amp; collectables\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0187-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Antiques-collectables\u0026#34;, \u0026#34;AreaOfBusiness\u0026#34;: 1, \u0026#34;CanHaveSecondCategory\u0026#34;: true, \u0026#34;CanBeSecondCategory\u0026#34;: true, \u0026#34;IsLeaf\u0026#34;: false }, ... ], \u0026#34;AreaOfBusiness\u0026#34;: 0, \u0026#34;IsLeaf\u0026#34;: false }   API checkpoint   We can know the subcategory \u0026lsquo;Antiques \u0026amp; Collectables\u0026rsquo; exists in the query result from the connectivity testing response.\nThen we get the checking code snippet below base on the example feature.\npm.test(\u0026#34;Checking all subcategories returned, and the given subcategory exists in\u0026#34;, function () { var jsonData = pm.response.json(); var arr =[]; var Subcategories = jsonData.Subcategories; // Traverse all Subcategories from response, and find wheter a specific subcategory is in. for (i in Subcategories){ var Name = Subcategories[i].Name; arr.push(Name); if(Name == \u0026#34;Antiques \u0026amp; Collectables\u0026#34;){ var SpecificSubcategories = Name; } } // checkpoint: whether subcategory - \u0026#39;Antiques \u0026amp; Collectables\u0026#39; exists in the response if(SpecificSubcategories !== []){ console.log(\u0026#34;Subcategory - Antiques \u0026amp; Collectables existed\u0026#34;); } }); Run script to verify the checkpoint works from console log.\nAPI Testing Script Enhancement  Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.  pm.test(\u0026#34;Checking all subcategories returned, and the given subcategory exists in\u0026#34;, function () { console.log(\u0026#34;Post-Transaction: CheckingtheCountsofGivenSubcategory Start\u0026#34;); var jsonData = pm.response.json(); var arr =[]; if (typeof(pm.response.json().Subcategories) !== \u0026#34;undefined\u0026#34;){ var Subcategories = jsonData.Subcategories; // Traverse all Subcategories from response, and find wheter a specific subcategory is in. for (i in Subcategories){ var Name = Subcategories[i].Name; arr.push(Name); if(Name == \u0026#34;Antiques \u0026amp; collectables\u0026#34;){ var SpecificSubcategories = Name; } } console.log(\u0026#34;Subcategories counts to: \u0026#34; + jsonData.Subcategories.length); console.log(\u0026#34;All subcategories name listed below: \u0026#34;); console.log(arr); // checkpoint: whether subcategory - \u0026#39;Antiques \u0026amp; collectables\u0026#39; exists in the response if(typeof(SpecificSubcategories) !== \u0026#34;undefined\u0026#34; \u0026amp;\u0026amp; SpecificSubcategories.length \u0026gt;= 1 ){ console.log(\u0026#34;Subcategory - Antiques \u0026amp; collectables existed\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofGivenSubcategory Pass\u0026#34;); } else{ console.log(\u0026#34;Subcategory - Antiques \u0026amp; collectables is not existed\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofGivenSubcategory Failed\u0026#34;); } } else{ console.log(pm.response.json()); console.log(\u0026#34;Didn\u0026#39;t catch the Subcategory field\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofGivenSubcategory Failed\u0026#34;); } }); Run the final script and to verify from front-end page or console log.\nAPI Testing Script Negative Cases Extension We could test API using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\n  Assembling the request - ' Retrieve general categories\r' (negative direction)   From the API specification, parameter - depth=-10 can be an \u0026lsquo;out of boundary value\u0026rsquo; case that expects to return an exception if we send a request with this parameter.\nSo the request should be https://api.tmsandbox.co.nz/v1/Categories.JSON?depth=-10\n  API checkpoint   Run the script, we get the sample response as blow.\n{ \u0026#34;Name\u0026#34;: \u0026#34;Root\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;AreaOfBusiness\u0026#34;: 0, \u0026#34;IsLeaf\u0026#34;: false } We don’t see any error message from the response for handling exceptional value with the depth field when sending this request.\nSo we can report this as a bug to the developer.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 24, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-retrieve-general-categories/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-3-Retrieve general categories API testing"},{"categories":null,"content":"API - Retrieve your watchlist script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Retrieves a list of items on the authenticated user\u0026rsquo;s watchlist.   Key request fields     Key response fields - The Watchlist for the authenticated user.            TotalCount Integer The total number of results in the collection. Can be larger than the number of returned results.    Page Integer The index of the current page of results (starts at 1).    PageSize Integer The number of results in the current page.    List Collection of or null A list of the results in the current page.     ListingId Long Integer The ID of the listing.    BidCount Integer The number of bids on the item.   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;      More API specification refers to Retrieve your watchlist\r.\n  Example request   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Watchlist/All.JSON\n  Example response   { \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149294406, \u0026#34;Title\u0026#34;: \u0026#34;11x Assorted T-Handle Hex Allen Keys\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;5964-5999-6004-9825-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 1.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;\\/Date(1626749989730)\\/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;\\/Date(1626922789730)\\/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;\\/Date(1626855531548)\\/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;\\/Building-renovation\\/Tools\\/Hand-tools\\/Sets-kits\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https:\\/\\/images.tmsandbox.co.nz\\/photoserver\\/thumb\\/8152697.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 8152697, \u0026#34;RegionId\u0026#34;: 16, \u0026#34;Region\u0026#34;: \u0026#34;Canterbury\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Christchurch City\u0026#34;, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;\\/Date(0)\\/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Sets \u0026amp; kits\u0026#34;, \u0026#34;Attributes\u0026#34;: [ ], \u0026#34;Subtitle\u0026#34;: \u0026#34;SKYLARC’S WINDFLOW TECHNOLOGY ONLINE AUCTION\u0026#34;, \u0026#34;MinimumNextBidAmount\u0026#34;: 1.0000, \u0026#34;IsOnWatchList\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$1.00\u0026#34;, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [ ], \u0026#34;Tags\u0026#34;: [ ] }, \u0026#34;IsDealer\u0026#34;: false, \u0026#34;IsLeading\u0026#34;: false, \u0026#34;IsOutbid\u0026#34;: false, \u0026#34;IsInCart\u0026#34;: false, \u0026#34;MemberBidShippingOption\u0026#34;: 0 } ], \u0026#34;FoundCategories\u0026#34;: [ { \u0026#34;Count\u0026#34;: 1, \u0026#34;Category\u0026#34;: \u0026#34;5964-\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;Building \u0026amp; renovation\u0026#34;, \u0026#34;CategoryId\u0026#34;: 5964 } ] } Business Presentation   Front-end page - Go to watchlist page     Front-end page - Watchlist page     Business scope selection   Query items in the watch list.\n  Business verification points   Checking there are or aren\u0026rsquo;t items in the watch list.\nAPI Testing Script Debugging   Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\n  Assembling the get request - Retrieve your watchlist\r   Base on the API specification, parameter - All means return all items from the watchlist.\nSo the request should be GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Watchlist/All.JSON\n  API connectivity   The connectivity test passes and gets a response example that the watch list has no items.\n{ \u0026#34;TotalCount\u0026#34;: 0, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 0, \u0026#34;List\u0026#34;: [], \u0026#34;FoundCategories\u0026#34;: [] } The connectivity test passes and gets a response example that the watch list has items.\n{ \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149294806, \u0026#34;Title\u0026#34;: \u0026#34;Digitus DK-330301-00\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0002-4250-4256-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;BuyNowPrice\u0026#34;: 37.31, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1626835762520)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1627440562520)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1627290227336)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Computers/Cables-adaptors/Other\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/8240722.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 8240722, \u0026#34;IsNew\u0026#34;: true, \u0026#34;RegionId\u0026#34;: 2, \u0026#34;Region\u0026#34;: \u0026#34;Auckland\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Waitakere\u0026#34;, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Other\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;Attributes\u0026#34;: [], \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;IsOnWatchList\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$37.31 per item\u0026#34;, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;IsDealer\u0026#34;: false, \u0026#34;IsLeading\u0026#34;: false, \u0026#34;IsOutbid\u0026#34;: false, \u0026#34;IsInCart\u0026#34;: false, \u0026#34;MemberBidShippingOption\u0026#34;: 0 } ], \u0026#34;FoundCategories\u0026#34;: [ { \u0026#34;Count\u0026#34;: 1, \u0026#34;Category\u0026#34;: \u0026#34;0002-\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;Computers\u0026#34;, \u0026#34;CategoryId\u0026#34;: 2 } ] }   API checkpoint   We can know the TotalCount \u0026gt;= 0 from the connectivity testing response.\nThen we get the checking code snippet below base on the example feature.\npm.test(\u0026#34;Checking if there are any items in the watch list\u0026#34;, function () { console.log(\u0026#34;Post-Transaction: CheckingtheCountsofWatchList Start\u0026#34;); var jsonData = pm.response.json(); var TotalCount = jsonData.TotalCount; if (TotalCount \u0026gt;= 0){ console.log(\u0026#34;Found \u0026#34; + TotalCount +\u0026#34; item on the watch list\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofWatchList Pass\u0026#34;); } else{ console.log(\u0026#34;Post-Transaction: CheckingtheCountsofWatchList Failed\u0026#34;); } }); Run script to verify the checkpoint works from console log.\nAPI Testing Script Enhancement Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.\nRun the final script and to verify from front-end page or console log.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 25, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-retrieve-watchlist/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-4-Retrieve your watchlist API testing"},{"categories":null,"content":"API - Remove a listing from your watchlist script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Removes a listing from the authenticated user\u0026rsquo;s watchlist.   Key request fields     Key response fields - Details on whether the operation succeeded.   Attempting to remove an auction that doesn\u0026rsquo;t exist or is not on the watchlist will not produce an error.\n          Success Boolean Indicates whether the operation was successful.   Description String or null The description of the error, if the operation failed.    More API specification refers to Remove a listing from your watchlist\r.\n  Example request   DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/0000000000.JSON\n  Example response   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } Business Presentation   Front-end page - Watchlist page     Front-end page - Confirm to remove items page     Business scope selection   Chained portfolio transactions\nRetrieve your watchlist\r-\u0026gt; Remove a listing from your watchlist(I\u0026rsquo;m here)\r-\u0026gt; Retrieve closing soon listings\r-\u0026gt; Add a listing to your watchlist\rChoose API - Retrieve your watchlist as pre-request to get all items that want to be removed\nRemove all items in the watch list\n  Business verification points   Checking all items in the watch list have been removed.\nAPI Testing Script Debugging   Assembling the pre-request \u0026lsquo;Retrieve your watchlist\r' and \u0026lsquo;Remove a listing from your watchlist\r\u0026rsquo;   The pre-request script\u0026rsquo;s main coding logic is as below:\n Pre-request the API - Retrieve your watchlist to fetch all items in the watch list.  console.log(\u0026#34;Pre-Transaction: RetrieveYourWatchlist Start\u0026#34;); // oauth_signature = Consumer Secret%26OAuth Token Secret const pre_request_retrieveyourwatchlist = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;) + \u0026#39;/v1/MyTradeMe/Watchlist/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; ... ​\tNote: how to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\rAll the fetched items should exclude those fields is \u0026lsquo;BidCount\u0026rsquo; = 1 to get all the items that allow being removed from the watch list. The \u0026lsquo;BidCount\u0026rsquo; field means that the item has been bidden, couldn\u0026rsquo;t be deleted from the watch list.  pm.sendRequest(pre_request_retrieveyourwatchlist, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Pre-Transaction: RetrieveYourWatchlist Failed\u0026#34;); } else { // Get all ListingId on the Watchlist pm.test(\u0026#34;Get all ListingId on the Watchlist\u0026#34;, function () { var jsonData = response.json(); var Listdata = jsonData[\u0026#39;List\u0026#39;]; var arr = []; for (i = 0; i \u0026lt; Listdata.length; i++) { // bidding items can\u0026#39;t be deleted, need to exclude them if (Listdata[i].BidCount != 1) { arr.push(Listdata[i].ListingId); } } postman.setEnvironmentVariable(\u0026#39;WatchlistListingIdCount\u0026#39;, arr.length); if(arr.length \u0026lt; 1){ var WatchlistListingIdCount = pm.environment.get(\u0026#34;WatchlistListingIdCount\u0026#34;); console.log(\u0026#34;WatchlistListingIdCount: \u0026#34; +WatchlistListingIdCount + \u0026#34;, nothing items need to be deleted.\u0026#34;); } else { postman.setEnvironmentVariable(\u0026#39;WatchlistListingId\u0026#39;, arr); var WatchlistListingId = pm.environment.get(\u0026#34;WatchlistListingId\u0026#34;); console.log(All the can be deleted ListingId on the Watchlist: \u0026#34;); console.log(WatchlistListingId); } console.log(\u0026#34;Pre-Transaction: RetrieveYourWatchlist Pass\u0026#34;); }); ... If fetched items from the watch list \u0026lt;=0, there are no items in the watchlist. Just initiate a meaningless \u0026lsquo;ListingId\u0026rsquo;.  var WatchlistListingIdCount = pm.environment.get(\u0026#34;WatchlistListingIdCount\u0026#34;); var WatchlistListingId = pm.environment.get(\u0026#34;WatchlistListingId\u0026#34;).split(\u0026#34;,\u0026#34;); if (WatchlistListingIdCount \u0026lt;= 0) { //Grant a meaningless value to LastListingId postman.setEnvironmentVariable(\u0026#39;LastListingId\u0026#39;, \u0026#34;0000000000\u0026#34;); } ... If fetched items from the watch list =1, store the \u0026lsquo;ListingId\u0026rsquo; for later API request of \u0026lsquo;RemoveAListingFromYourWatchlist\u0026rsquo; to use.  else if (WatchlistListingIdCount == 1) { postman.setEnvironmentVariable(\u0026#39;LastListingId\u0026#39;, WatchlistListingId[(Number(WatchlistListingIdCount) - 1)]); } ... If fetched items from the watch list \u0026gt;1, assembling the pre-request \u0026lsquo;Remove a listing from your watchlist\r\u0026rsquo; to remove all the items but the last item in the watch list, then leave the last item to be removed for the later transaction \u0026lsquo;Remove a listing from your watchlist\r\u0026rsquo; to use.  else { //Delete ListingId from Watchlist, but leave the last ListingId for later transaction to delete console.log(\u0026#34;Pre-Transaction: RemoveAListingFromYourWatchlist Start\u0026#34;); postman.setEnvironmentVariable(\u0026#39;LastListingId\u0026#39;, WatchlistListingId[(Number(WatchlistListingIdCount) - 1)]); var LastListingId = pm.environment.get(\u0026#34;LastListingId\u0026#34;); console.log(\u0026#34;LastListingId: \u0026#34; + LastListingId); //Exclude the last ListingId for (var i = 0; i \u0026lt; (WatchlistListingId.length - 1); i++) { const pre_request_removealistingfromyourwatchlist = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;) + \u0026#39;/v1/MyTradeMe/WatchList/\u0026#39; + WatchlistListingId[i] + \u0026#39;.JSON\u0026#39;, method: \u0026#39;DELETE\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; pm.sendRequest(pre_request_removealistingfromyourwatchlist, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Pre-Transaction: RemoveAListingFromYourWatchlist Failed\u0026#34;); } else { // Output the ListingId that has been deleted pm.test(\u0026#34;Delete ListingId from the Watchlist, but leave the LastListingId: \u0026#34; + LastListingId, function () { // console.log(response.json()); }); } }); } console.log(\u0026#34;Pre-Transaction: RemoveAListingFromYourWatchlist Pass\u0026#34;); } } }); Note: how to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r  Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\nHow to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r Assembling the delete request - Remove a listing from your watchlist  Base on the API specification, parameter - listingId means the ID of the listing to remove.\nAnd the listingId origin from the response of pre_request \u0026lsquo;Retrieve your watchlist\r\u0026rsquo;, and it has already been set to environment variables: {{LastListingId}}.\nSo the request should be DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/{{LastListingId}}.JSON\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; }   API checkpoint   Using the post_request: API - Retrieve your watchlist to check whether it still has items on the watchlist that can be deleted.\nCheck whether the functionality of pre_request \u0026lsquo;Retrieve your watchlist\r\u0026rsquo; works;\nand it can exclude those items that cannot execute the delete operation from its response for another pre_request transaction \u0026lsquo;Remove a listing from your watchlist\r\u0026rsquo; to use;\nand it can remain the last item from its response for the downstream transaction \u0026lsquo;Remove a listing from your watchlist\r\u0026rsquo; to use.\nCheck whether the functionality of \u0026lsquo;Remove a listing from your watchlist\r\u0026rsquo; works, and it can remove the last item from watchlist.\nThen we get the checking code snippet below base on the example feature.\nconsole.log(\u0026#34;Post-Transaction: RetrieveYourWatchlist Start\u0026#34;); const post_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;)+\u0026#39;/v1/MyTradeMe/Watchlist/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; var LastListingId = pm.environment.get(\u0026#34;LastListingId\u0026#34;); pm.sendRequest(post_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Post-Transaction: RetrieveYourWatchlist Failed\u0026#34;); } else { // Confirm whether all ListingId have been deleted from the Watchlist pm.test(\u0026#34;Checking LastListingId: \u0026#34; +LastListingId +\u0026#34; has been deleted\u0026#34;, function () { var jsonData = response.json(); var Listdata = jsonData[\u0026#39;List\u0026#39;]; var arr = []; for(i = 0; i \u0026lt; Listdata.length; i++) { //bidding items can\u0026#39;t be deleted, need to exclude them if(Listdata[i].BidCount != 1){ arr.push(Listdata[i].ListingId); } } if (arr.length == 0){ console.log(\u0026#34;Current count of ListingId that can be deleted in the watchlist: \u0026#34; +arr.length); } }); console.log(\u0026#34;Post-Transaction: RetrieveYourWatchlist Pass\u0026#34;); } }); Run script to verify the checkpoint works from console log.\nAPI Testing Script Enhancement   Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.   Run the final script and to verify from front-end page or console log.   Display on the watchlist page before removing operation.\nDisplay on the watchlist page after removing operation.\nAPI Testing Script Negative Cases Extension Using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 26, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-rm-a-listing-from-watchlist/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-5-Remove a listing from your watchlist API testing"},{"categories":null,"content":"API - Retrieve closing soon listings script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Retrieves the items closing soon for the whole country or for a single region.   Key request fields   ​\tMore refer to: Retrieve closing soon listings\r  Key response fields - A category tree.           TotalCount Integer The total number of results in the collection. Can be larger than the number of returned results.   TotalCountTruncated Boolean True if the total count of results exceeded the allowed maximum and was truncated.   Page Integer The index of the current page of results (starts at 1).   PageSize Integer The number of results in the current page.   List Collection of or null A list of the results in the current page.    ListingId Long Integer   \u0026hellip; \u0026hellip; \u0026hellip;    More refer to: Retrieve closing soon listings\r  Example request   GET https://api.tmsandbox.co.nz/v1/Listings/closing.JSON?rows=1000\n  Example response   { \u0026#34;TotalCount\u0026#34;: 250, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 250, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149292446, \u0026#34;Title\u0026#34;: \u0026#34;fox drawing\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0339-5487-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;BuyNowPrice\u0026#34;: 1.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1626323575513)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1626928375513)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1626926636817)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Art/Digital-art\u0026#34;, \u0026#34;Region\u0026#34;: \u0026#34;Canterbury\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Christchurch City\u0026#34;, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$1.00 per item\u0026#34;, \u0026#34;PromotionId\u0026#34;: 1, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;MemberId\u0026#34;: 4007247 }, ... ] } Business Presentation   Front-end page - Go to closing soon listings page     Front-end page - closing soon listings page     Business scope selection   Chained portfolio transactions\nRetrieve your watchlist\r-\u0026gt; Remove a listing from your watchlist\r-\u0026gt; Retrieve closing soon listings(I\u0026rsquo;m here)\r-\u0026gt; Add a listing to your watchlist\rGet all the items at 1st page of the closing soon listings.\n  Business verification points   Verify items on the 1st page of closing soon listings exist in the query result.\nAPI Testing Script Debugging   Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\n  Assembling the request - Retrieve closing soon listings\r   Base on the API specification, parameter - rows=1000 means the maximum number of results to return.\nSo the request should be GET https://api.tmsandbox.co.nz/v1/Listings/closing.JSON?rows=1000\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;TotalCount\u0026#34;: 250, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 250, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149294548, \u0026#34;Title\u0026#34;: \u0026#34;Princess Pink of Ballerina\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0347-1417-6174-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 9.0000, \u0026#34;BuyNowPrice\u0026#34;: 16.7500, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1626759267867)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1627364067867)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;HasGallery\u0026#34;: true, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1627362314009)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Toys-models/Pretend-playing/Other\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/4549071.jpg\u0026#34;, \u0026#34;IsNew\u0026#34;: true, \u0026#34;Region\u0026#34;: \u0026#34;Wellington\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Wellington City\u0026#34;, \u0026#34;HasReserve\u0026#34;: true, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;ReserveState\u0026#34;: 2, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$9.00\u0026#34;, \u0026#34;PromotionId\u0026#34;: 2, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;MemberId\u0026#34;: 4003082 }, ... ] }   API checkpoint   Check whether it has closing soon items in the response.\nThen we get the checking code snippet below base on the example feature.\npm.test(\u0026#34;Checking if there are any items in the Closing Soon Listings\u0026#34;, function () { console.log(\u0026#34;Post-Transaction: CheckingtheCountsofClosingSoonListings Start\u0026#34;); var jsonData = pm.response.json(); var TotalCount = jsonData.TotalCount; if (TotalCount \u0026gt;= 0){ console.log(\u0026#34;Found \u0026#34; + TotalCount +\u0026#34; items in the Closing Soon Listings\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofClosingSoonListings Pass\u0026#34;); } else{ console.log(\u0026#34;Post-Transaction: CheckingtheCountsofClosingSoonListings Failed\u0026#34;); } }); Run script to verify the checkpoint works from console log.\nAPI Testing Script Enhancement Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.\nRun the final script and to verify from front-end page or console log.\nAPI Testing Script Negative Cases Extension Using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 27, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-retrieve-closing-soon-listings/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-6-Retrieve closing soon listings API testing"},{"categories":null,"content":"API - Add a listing to your watchlist script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Adds a listing to the authenticated user\u0026rsquo;s watchlist.   Key request fields   More refer to: Add a listing to your watchlist\rKey response fields - Details on whether the operation succeeded. Attempting to remove an auction that doesn\u0026rsquo;t exist or is not on the watchlist will not produce an error.\n          Success Boolean Indicates whether the operation was successful.   Description String or null The description of the error, if the operation failed.    Example request POST https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/2149294825.JSON\n Example response:  { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } Business Presentation   Front-end page - Closing soon item detail page     Front-end page - Watchlist page     Business scope selection   Chained portfolio transactions\nRetrieve your watchlist\r-\u0026gt; Remove a listing from your watchlist\r-\u0026gt; Retrieve closing soon listings\r-\u0026gt; Add a listing to your watchlist(I’m here)\rChoose API - Retrieve closing soon listings as pre-request to get all items on the 1st page of closing soon listings.\nRandomly add 1 of the above items to the watchlist.\n Business verification points  Checking selected items can add to the watchlist.\nAPI Testing Script Debugging   Assembling the pre-request \u0026lsquo;Retrieve closing soon listings\u0026rsquo;   The pre-request script\u0026rsquo;s main coding logic is as below:\n Pre-request the API - \u0026lsquo;Retrieve closing soon listings\u0026rsquo; to fetch all items on the 1st page of closing soon listings.  console.log(\u0026#34;Pre-Transaction: RetrieveClosingSoonListings Start\u0026#34;); const pre_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;)+\u0026#39;/v1/Listings/closing.JSON?rows=1000\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; ... ​\tNote: how to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\rRandomly choose 1 item from all the fetched items, and store the item as a parameter for later API - \u0026lsquo;Add a listing to your watchlist\u0026rsquo; to use.  pm.sendRequest(pre_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Pre-Transaction: RetrieveClosingSoonListings Failed\u0026#34;); } else { pm.test(\u0026#34;Get all the closing soon ListingId\u0026#34;, function () { var jsonData = response.json(); var List = jsonData.List; var ListingIdsCount = jsonData.TotalCount;// Get the 250 closing soon ListingIds from 1st page var PageSize = jsonData.PageSize; var arr = []; // Traversal json object to get all the ListingId if (List !== []){ for (i in List){ var ListingId = List[i].ListingId; arr.push(ListingId); } } // Store all the ListingId as a variable if(i == (Number(PageSize)-1)){ postman.setEnvironmentVariable(\u0026#39;ListingIds\u0026#39;, arr); postman.setEnvironmentVariable(\u0026#39;ListingIdsCount\u0026#39;, ListingIdsCount); } }); // Randomly get a ListingId from ListingIds for later transaction use var ListingIdsCount = pm.environment.get(\u0026#34;ListingIdsCount\u0026#34;); var arrListingIds=pm.environment.get(\u0026#34;ListingIds\u0026#34;).split(\u0026#34;,\u0026#34;); postman.setEnvironmentVariable(\u0026#39;ListingIdAddToWatchList\u0026#39;, arrListingIds[Math.floor(Math.random() * Number(ListingIdsCount))]); var ListingIdAddToWatchList = pm.environment.get(\u0026#34;ListingIdAddToWatchList\u0026#34;); console.log(\u0026#34;From \u0026#34;+ListingIdsCount +\u0026#34; closing soon items randomly choose the: \u0026#34;+ListingIdAddToWatchList+\u0026#34; waiting to be added to the watchlist\u0026#34;); console.log(\u0026#34;Pre-Transaction: RetrieveClosingSoonListings Pass\u0026#34;); }   Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\nHow to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r Assembling the request - \u0026lsquo;Add a listing to your watchlist\u0026rsquo;  Base on the API specification, parameter - listingId means the ID of the listing to add to the watchlist.\nAnd the listingId origin from the response of pre_request \u0026lsquo;Retrieve closing soon listings\r\u0026rsquo;, and it has already been set to environment variables: {{ListingIdAddToWatchList}}.\nSo the request should be POST https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/{{ListingIdAddToWatchList}}.JSON\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; }   API checkpoint   Using the post_request: API - Retrieve your watchlist to check whether the given item has been added onto the watchlist.\nThen we get the checking code snippet below base on the example feature.\nconsole.log(\u0026#34;Post-Transaction: CheckingAddToWatchList Start\u0026#34;); var ListingIdAddToWatchList = pm.environment.get(\u0026#34;ListingIdAddToWatchList\u0026#34;); const post_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;)+\u0026#39;/v1/MyTradeMe/Watchlist/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; pm.sendRequest(post_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Post-Transaction: CheckingAddToWatchList Failed\u0026#34;); } else { // Confirm whether ListingIdAddToWatchList existed in the Watchlist pm.test(\u0026#34;Checking ListingId \u0026#34; +ListingIdAddToWatchList +\u0026#34; has been added\u0026#34;, function () { console.log(response.json()); var jsonData = response.json(); var Listdata = jsonData[\u0026#39;List\u0026#39;]; for(i = 0; i \u0026lt; Listdata.length; i++) { if (ListingIdAddToWatchList == Listdata[i].ListingId){ console.log(\u0026#34;ListingId \u0026#34; +ListingIdAddToWatchList + \u0026#34; has been added to the watchlist\u0026#34;); } } }); console.log(\u0026#34;Post-Transaction: CheckingAddToWatchList Pass\u0026#34;); } }); Run script to verify the checkpoint works from console log.\nAPI Testing Script Enhancement   Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.   Run the final script and to verify from front-end page or console log.   After the \u0026lsquo;Add a listing to your watchlist\u0026rsquo; operation, see the watchlist.\nAPI Testing Script Negative Cases Extension Using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 26, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-add-a-listing-to-watchlist/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-7-Add a listing to your watchlist API testing"},{"categories":null,"content":"API - Retrieve your won items script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Retrieves a list of purchases for the authenticated user.   Multiple-quantity auctions can be purchased multiple times.\n  Key request fields     Key response fields - A list of items the authenticated user has purchased.            TotalCount Integer The total number of results in the collection. Can be larger than the number of returned results.    Page Integer The index of the current page of results (starts at 1).    PageSize Integer The number of results in the current page.    List Collection of or null A list of the results in the current page.     ListingId Long Integer The ID of the listing.   … … … …   PurchaseId Integer A unique ID that identifies the sale.    … … … …      More refer to: Retrieve your won items\r  Example request   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/All.JSON\n  Example response - 1 item on the won list:   { \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149290179, \u0026#34;Title\u0026#34;: \u0026#34;Samsung Galaxy BV Weaving S9 Case\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0344-0899-1135-5537-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, ... \u0026#34;ListingGroupId\u0026#34;: 73059, ... \u0026#34;PaymentInfo\u0026#34;: \u0026#34;NZ Bank Deposit\u0026#34;, \u0026#34;Price\u0026#34;: 12.99, \u0026#34;SelectedShipping\u0026#34;: \u0026#34;rural\u0026#34;, \u0026#34;ShippingPrice\u0026#34;: 9.99, \u0026#34;ShippingType\u0026#34;: 4, ... \u0026#34;PurchaseId\u0026#34;: 26176, ... } ] }   Example response - 0 item on the won list:   { \u0026#34;TotalCount\u0026#34;: 0, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 0, \u0026#34;List\u0026#34;: [] } Business Presentation   Front-end page - Won list page - have items on     Front-end page - Won list page - have no items on     Business scope selection:   Chained portfolio transactions\nRetrieve your won items(I’m here)\r-\u0026gt; Remove a purchase from your won items list\r-\u0026gt; General search\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now\r  Business verification points   Checking there are items on the won list.\nAPI Testing Script Debugging   Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\nHow to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r  Assembling the request - \u0026lsquo;Retrieve your won items\r\u0026rsquo;   Base on the API specification, parameter - All means return all won items in the last 45 days.\nSo the request should be GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/All.JSON\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149290179, \u0026#34;Title\u0026#34;: \u0026#34;Samsung Galaxy BV Weaving S9 Case\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0344-0899-1135-5537-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1625630212963)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1625648672660)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1625649420456)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Mobile-phones/Accessories/Cases-covers/Samsung\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/4676325.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 4676325, \u0026#34;Seller\u0026#34;: { \u0026#34;MemberId\u0026#34;: 4000334, \u0026#34;Nickname\u0026#34;: \u0026#34;paperclip4\u0026#34;, \u0026#34;DateAddressVerified\u0026#34;: \u0026#34;/Date(1338811200000)/\u0026#34;, \u0026#34;DateJoined\u0026#34;: \u0026#34;/Date(1338811200000)/\u0026#34;, \u0026#34;Email\u0026#34;: \u0026#34;owen4@snipesoft.net.nz\u0026#34;, \u0026#34;UniqueNegative\u0026#34;: 0, \u0026#34;UniquePositive\u0026#34;: 3, \u0026#34;FeedbackCount\u0026#34;: 3, \u0026#34;IsAddressVerified\u0026#34;: true }, \u0026#34;IsNew\u0026#34;: true, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Samsung\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;Quantity\u0026#34;: 1, \u0026#34;IsFlatShippingCharge\u0026#34;: true, \u0026#34;Options\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Colour\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;Blue\u0026#34; } ], \u0026#34;ListingGroupId\u0026#34;: 73059, \u0026#34;StatusDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;AuctionAttribute\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;BuyerFeedbackPlaced\u0026#34;: 0, \u0026#34;SellerFeedbackPlaced\u0026#34;: 0, \u0026#34;DeliveryId\u0026#34;: 0, \u0026#34;FpoDecisionViaMobile\u0026#34;: false, \u0026#34;HasPaidByCreditCard\u0026#34;: false, \u0026#34;InvoiceId\u0026#34;: 0, \u0026#34;OfferId\u0026#34;: 0, \u0026#34;PaymentInfo\u0026#34;: \u0026#34;NZ Bank Deposit\u0026#34;, \u0026#34;Price\u0026#34;: 12.99, \u0026#34;SelectedShipping\u0026#34;: \u0026#34;rural\u0026#34;, \u0026#34;ShippingPrice\u0026#34;: 9.99, \u0026#34;ShippingType\u0026#34;: 4, \u0026#34;SoldDate\u0026#34;: \u0026#34;/Date(1625648672660)/\u0026#34;, \u0026#34;SoldType\u0026#34;: \u0026#34;BUYNOW\u0026#34;, \u0026#34;PaymentInstructions\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;PurchaseId\u0026#34;: 26176, \u0026#34;ReferenceNumber\u0026#34;: \u0026#34;P26176\u0026#34;, \u0026#34;SubtotalPrice\u0026#34;: 12.99, \u0026#34;TotalShippingPrice\u0026#34;: 9.99, \u0026#34;TotalSalePrice\u0026#34;: 22.98, \u0026#34;TrackedParcels\u0026#34;: [], \u0026#34;TaxSubTotal\u0026#34;: 0, \u0026#34;HasPaidByDeferredPayment\u0026#34;: false } ] }   API checkpoint   Check whether items exist on the won list.\nAnd store the won items PurchaseId and their counts as two environment variables: {{WonPurchaseId}} and {{WonPurchaseIdCount}} for downstream API - Remove a purchase from your won items list\r' use.\nThen we get the checking code snippet below base on the example feature.\nconsole.log(\u0026#34;Post-Transaction: CheckingWonListHaveItems Start\u0026#34;); pm.test(\u0026#34;CheckingWonListHasItems\u0026#34;, function () { var jsonData = pm.response.json(); var arr =[]; var List = jsonData.List; if (List !== []){ for (i in List){ var PurchaseId = List[i].PurchaseId; arr.push(PurchaseId); } // Store WonPurchaseIdCount for later deleting usage postman.setEnvironmentVariable(\u0026#39;WonPurchaseIdCount\u0026#39;, arr.length); } if(arr !== []){ if(arr.length \u0026gt;=1){ // Store WonItems for later deleting usage postman.setEnvironmentVariable(\u0026#39;WonPurchaseId\u0026#39;, arr); console.log(\u0026#34;WonPurchaseId counts to: \u0026#34; + arr.length + \u0026#34;, the purchaseId: \u0026#34; + arr); console.log(\u0026#34;Post-Transaction: CheckingWonListHaveItems Pass\u0026#34;); } else{ postman.setEnvironmentVariable(\u0026#39;WonPurchaseId\u0026#39;, arr); console.log(\u0026#34;WonPurchaseId counts to: \u0026#34; + arr.length + \u0026#34;. There are no items on the won list.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingWonListHaveItems Pass\u0026#34;); } } else{ console.log(\u0026#34;Post-Transaction: CheckingWonListHaveItems Failed\u0026#34;); } }); Run script to verify the checkpoint works from console log.\nIt has no items on the won list page displaying on the console log.\nIt has items on the won list page displaying on the console log.\nAPI Testing Script Enhancement   Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.   Run the final script and to verify from front-end page or console log.   API Testing Script Negative Cases Extension Using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 27, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-retrieve-won-items/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-8-Retrieve your won items API testing"},{"categories":null,"content":"API - Remove a purchase from your won items list script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Hides a listing from the won items list.   Key request fields     Key response fields - Details on whether the operation was successful.   Note that this operation will only report failure if the purchase still exists in the won items list after the operation completes. In all other cases, this API will report success (for example it will report success if the purchase ID is invalid or the purchase has already been removed).\n          Success Boolean Indicates whether the operation was successful.   Description String or null The description of the error, if the operation failed.      Example request   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/All.JSON\n  Example response   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } Business Presentation   Front-end page - Won list page (pick a given item to delete)     Front-end page - Confirm to remove a given item from won items list.     Business scope selection   Chained portfolio transactions\nRetrieve your won items\r-\u0026gt; Remove a purchase from your won items list(I’m here)\r-\u0026gt; General search\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now\rChoose API - \u0026lsquo;Retrieve your won items\u0026rsquo; as pre-request to get all won items that want to be removed\nRemove all won items on the won items list\n  Business verification points   Checking a purchased item has been removed by visiting the won items list page.\nAPI Testing Script Debugging   Fetch the environment variables from the upstream API \u0026lsquo;Retrieve your won items\r\u0026rsquo;   Fetch two environment variables: {{WonPurchaseId}} and {{WonPurchaseIdCount}} which means all won items PurchaseId and their counts on the watch list. These variables set origin from the response of the upstream API - \u0026lsquo;Retrieve your won items\r\u0026rsquo;.\nvar WonPurchaseIdCount = pm.environment.get(\u0026#34;WonPurchaseIdCount\u0026#34;); var WonPurchaseId = pm.environment.get(\u0026#34;WonPurchaseId\u0026#34;).split(\u0026#34;,\u0026#34;); ... Where to set the two variables refer to: Retrieve your won items - API Testing Script Debugging\r-\u0026gt; API checkpoint.\n  Assembling the pre-request \u0026lsquo;Remove a purchase from your won items list\r\u0026rsquo;   Remove all won items from the won items list, but leave the last won item (for later request \u0026lsquo;Remove a purchase from your won items list\r\u0026rsquo; to use.\nif (WonPurchaseIdCount \u0026lt;= 0){ postman.setEnvironmentVariable(\u0026#39;LastWonPurchaseId\u0026#39;, \u0026#34;00000\u0026#34;); } else if (WonPurchaseIdCount == 1){ postman.setEnvironmentVariable(\u0026#39;LastWonPurchaseId\u0026#39;, WonPurchaseId[(Number(WonPurchaseIdCount) - 1)]); } else{ //Remove all items but the last item on the won list. The later transaction will remove the last item from the won list. console.log(\u0026#34;Pre-Transaction: RemoveAPurchaseFromYourWonItemsList Start\u0026#34;); postman.setEnvironmentVariable(\u0026#39;LastWonPurchaseId\u0026#39;, WonPurchaseId[(Number(WonPurchaseIdCount) - 1)]); var LastWonPurchaseId = pm.environment.get(\u0026#34;LastWonPurchaseId\u0026#34;); console.log(\u0026#34;LastWonPurchaseId: \u0026#34; + LastWonPurchaseId); //Exclude the last WonPurchaseId for (var i = 0; i \u0026lt; (WonPurchaseId.length - 1); i++) { const pre_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;) + \u0026#39;/v1/MyTradeMe/Won/\u0026#39; + WonPurchaseId[i] + \u0026#39;.JSON\u0026#39;, method: \u0026#39;DELETE\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; pm.sendRequest(pre_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Pre-Transaction: RemoveAPurchaseFromYourWonItemsList Failed\u0026#34;); } else { // Output the ListingId that has been deleted pm.test(\u0026#34;Delete PurchaseId from the Wonlist, but leave the LastPurchaseId: \u0026#34; + LastWonPurchaseId, function () { // console.log(response.json()); }); } }); } setTimeout(()=\u0026gt;{ console.log(\u0026#34;Pre-Transaction: RemoveAPurchaseFromYourWonItemsList Pass\u0026#34;); }, 2000); } Note: how to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r  Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\nHow to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r  Assembling the request - \u0026lsquo;Remove a purchase from your won items list\r\u0026rsquo;   Base on the API specification, parameter - purchaseId means the hided item from the won items list.\nAnd the purchaseId origin from the response of pre_request \u0026lsquo;Remove a purchase from your won items list\r\u0026rsquo;, and it has already been set to environment variables: {{LastWonPurchaseId}}.\nSo the request should be DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/{{LastWonPurchaseId}}.JSON\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; }   API checkpoint   Check wheter have items on the won list.\nThen we get the checking code snippet below base on the example feature.\n//Check wheter have items on the won list console.log(\u0026#34;Post-Transaction: CheckingDeleteWonItems Start\u0026#34;); var LastWonPurchaseId = pm.environment.get(\u0026#34;LastWonPurchaseId\u0026#34;); const post_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;) + \u0026#39;/v1/MyTradeMe/Won/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;4B34BCCFD24CF3497EE36E54204AA7E2\u0026#34;,oauth_token=\u0026#34;38B073E4F6C65F722A0CF964492EA6A2\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;0D8635F6A51F0EA381A8D97F5D7812E2%26293BD08354D18D33871C4EBB02D67ACA\u0026#34;\u0026#39;], body: { } }; pm.sendRequest(post_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Post-Transaction: CheckingDeleteWonItems Failed\u0026#34;); } else { // Output the PurchaseId that has been removed pm.test(\u0026#34;Checking LastWonPurchaseId: \u0026#34; +LastWonPurchaseId +\u0026#34; has been removed\u0026#34;, function () { var jsonData = response.json(); var TotalCount = jsonData.TotalCount; if (TotalCount == 0){ console.log(\u0026#34;Current items count on the won list: \u0026#34;+TotalCount + \u0026#34;. All items have been removed from the won list.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingDeleteWonItems Pass\u0026#34;); } else{ console.log(\u0026#34;Current items count on the won list: \u0026#34;+TotalCount + \u0026#34;. Still have Items need to be removed from the won list.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingDeleteWonItems Failed\u0026#34;); } }); } }); Run script to verify the checkpoint works from console log.\nOne item is removed from the won list page.\nMultiple items are removed from the won list page.\nAPI Testing Script Enhancement   Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.   Run the final script and to verify from front-end page or console log.   Display on the Won list page before removing operation.\nDisplay on the Won list page after removing operation.\nAPI Testing Script Negative Cases Extension Using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 28, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-rm-a-purchase-from-won-list/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-9-Remove a purchase from your won items list API testing"},{"categories":null,"content":"API - General search script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Allows you to search for listings on Trade Me by category, by keywords or a combination of these two.   The result set can be filtered by a variety of properties, including availability of Buy Now, Pay Now, item condition or seller.\n  Key request fields             page Integer (optional) The page number of the set of results to return, starting from 1. Defaults to 1.   … … …   rows Integer (optional) The number of results per page; also the maximum number of results to return. The maximum is 25 for unauthenticated requests and 500 for authenticated requests. Defaults to 25 (unauthenticated) or 50 (authenticated).   … … …    More refer to: General search\r  Key response fields              TotalCount Integer The total number of results in the collection. Can be larger than the number of returned results.    TotalCountTruncated Boolean True if the total count of results exceeded the allowed maximum and was truncated.    Page Integer The index of the current page of results (starts at 1).    PageSize Integer The number of results in the current page.    List Collection of or null A list of the results in the current page.     ListingId Long Integer The ID of the listing.    BuyNowPrice Number The Buy Now price.    HasBuyNow Boolean Indicates whether the item has Buy Now.   … … … …    More refer to: General search\r  Example request   GET https://api.tmsandbox.co.nz/v1/Search/General.JSON?buy=All\u0026amp;rows=500\u0026amp;page=4\n  Example response   { \u0026#34;TotalCount\u0026#34;: 16479, \u0026#34;Page\u0026#34;: 4, \u0026#34;PageSize\u0026#34;: 500, \u0026#34;List\u0026#34;: [ ... { \u0026#34;ListingId\u0026#34;: 2149294614, \u0026#34;Title\u0026#34;: \u0026#34;Cobra Glassware\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0341-0881-4739-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 11.0000, \u0026#34;BuyNowPrice\u0026#34;: 33.0000, ... \u0026#34;HasBuyNow\u0026#34;: true, ... }, ... ] } Business Presentation   Front-end page - Search box tick the \u0026lsquo;Buy Now\u0026rsquo; to filter items with \u0026lsquo;Buy Now\u0026rsquo; feature.     Business scope selection   Chained portfolio transactions\nRetrieve your won items\r-\u0026gt; Remove a purchase from your won items list\r-\u0026gt; General search(I’m here)\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now\rSearching 500 items by search function and only pick the items that has the \u0026lsquo;HasBuyNow\u0026rsquo; feature and the BuyNowPrice \u0026lt;= $20 from the response for downstream transaction ‘Retrieve the details of a single listing’ to use.\n  Business verification points   Checking given searching conditions can get items, and a random item of these items can be stored for downstream transaction \u0026lsquo;RetrieveTheDetailsOfASingleListing\u0026rsquo; to use.\nAPI Testing Script Debugging   Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\nHow to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r  Assembling the request - \u0026lsquo;Remove a purchase from your won items list\r\u0026rsquo;   Base on the API specification, parameter buy=All means filter listings to only those with Buy Now.\nParameter rows=500 means the maximum number of results per page is 500 for authenticated requests.\nParameter page=4 means The page 4 of the set of results to return.\nSo the request should be GET https://api.tmsandbox.co.nz/v1/Search/General.JSON?buy=All\u0026amp;rows=500\u0026amp;page=4\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;TotalCount\u0026#34;: 16479, \u0026#34;Page\u0026#34;: 4, \u0026#34;PageSize\u0026#34;: 500, \u0026#34;List\u0026#34;: [ ... { \u0026#34;ListingId\u0026#34;: 2149288229, \u0026#34;Title\u0026#34;: \u0026#34;The Shawshank Redemption (Special Edition)\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0003-9232-9241-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;BuyNowPrice\u0026#34;: 12, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1625090253613)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1625695053613)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;HasGallery\u0026#34;: true, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1625649443316)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Movies-TV/Bluray/Drama\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/104197832.jpg\u0026#34;, \u0026#34;Region\u0026#34;: \u0026#34;Wellington\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Wellington City\u0026#34;, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$12.00 per item\u0026#34;, \u0026#34;HasFreeShipping\u0026#34;: true, \u0026#34;PromotionId\u0026#34;: 2, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;MemberId\u0026#34;: 4007156 }, ... ] }   API checkpoint   Check whether the functionality of \u0026lsquo;general search\u0026rsquo; works, and it can fetch any ListingId has the \u0026lsquo;HasBuyNow\u0026rsquo; feature from its response for the downstream transaction \u0026lsquo;Retrieve the details of a single listing\r\u0026rsquo; or \u0026lsquo;Buy an auction using Buy Now\r\u0026rsquo; to use.\nThen we get the checking code snippet below base on the example feature.\nconsole.log(\u0026#34;Post-Transaction: CheckingListingIdHasBuyNow Start\u0026#34;); pm.test(\u0026#34;GetListingIdHasBuyNow\u0026#34;, function () { var jsonData = pm.response.json(); var Page = jsonData.Page; var PageSize = jsonData.PageSize; var arr =[]; var List = jsonData.List; if (typeof(List) !== \u0026#34;undefined\u0026#34;){ for (i in List){ var ListingId = List[i].ListingId; //Only pick the items that has the \u0026#39;HasBuyNow\u0026#39; feature and the BuyNowPrice \u0026lt;= $20 if(List[i].HasBuyNow == true \u0026amp;\u0026amp; List[i].BuyNowPrice \u0026lt;=20){ arr.push(ListingId); } } postman.setEnvironmentVariable(\u0026#39;ListingIdHasBuyNowCount\u0026#39;, arr.length); } if(Array.isArray(arr) \u0026amp;\u0026amp; arr.length === 0){ console.log(pm.response.json()); console.log(\u0026#34;Didn\u0026#39;t fetch any ListingId has the \u0026#39;HasBuyNow\u0026#39; feature: \u0026#34; +SingleListingId); console.log(\u0026#34;Post-Transaction: CheckingListingIdHasBuyNow Failed\u0026#34;); } else{ postman.setEnvironmentVariable(\u0026#39;ListingIdHasBuyNow\u0026#39;, arr); console.log(\u0026#34;Page: \u0026#34;+Page+\u0026#34;, total items: \u0026#34;+PageSize); console.log(\u0026#34;\u0026#39;HasBuyNow\u0026#39; items counts to: \u0026#34; + arr.length + \u0026#34;, ListingId details: \u0026#34;); console.log(arr); // Randomly get one ListingId from the stored ListingId list that has the \u0026#39;HasBuyNow\u0026#39; feature. // The ListingId will be picked for downstream transaction \u0026#39;RetrieveTheDetailsOfASingleListing\u0026#39; to use. var ListingIdHasBuyNowCount = pm.environment.get(\u0026#34;ListingIdHasBuyNowCount\u0026#34;); var ListingIdHasBuyNow=pm.environment.get(\u0026#34;ListingIdHasBuyNow\u0026#34;).split(\u0026#34;,\u0026#34;); postman.setEnvironmentVariable(\u0026#39;SingleListingId\u0026#39;, ListingIdHasBuyNow[Math.floor(Math.random() * Number(ListingIdHasBuyNowCount))]); var SingleListingId = pm.environment.get(\u0026#34;SingleListingId\u0026#34;); console.log(\u0026#34;Get random SingleListingId: \u0026#34; +SingleListingId); console.log(\u0026#34;Post-Transaction: CheckingListingIdHasBuyNow Pass\u0026#34;); } }); Run script to verify the checkpoint works from console log.\nAPI Testing Script Enhancement   Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.   Run the final script and to verify from front-end page or console log.   API Testing Script Negative Cases Extension Using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 29, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-general-search/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-10-General search API testing"},{"categories":null,"content":"API - Retrieve the details of a single listing script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Retrieves the details of a single listing.   Key request fields     Key response fields - The details of the listing.      ListingId Long Integer The ID of the listing.      … … …    ShippingOptions Collection of or null A list of shipping options.     Method String or null The name of the delivery method (e.g. “NZ Courier”, “Rural Delivery”). Only applicable if ShippingType is Custom.    ShippingId Long Integer The ID of the shipping option (used when bidding or for Buy Now). Not required when listing an item.   … … … …      Example request   GET https://api.tmsandbox.co.nz/v1/Listings/2149295093.JSON\n  Example response   { \u0026#34;ListingId\u0026#34;: 2149295093, ... \u0026#34;AllowsPickups\u0026#34;: 3, \u0026#34;ShippingOptions\u0026#34;: [ { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 4.99, \u0026#34;Method\u0026#34;: \u0026#34;nationwide non-rural\u0026#34;, \u0026#34;ShippingId\u0026#34;: 4 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 9.99, \u0026#34;Method\u0026#34;: \u0026#34;rural\u0026#34;, \u0026#34;ShippingId\u0026#34;: 5 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 0, \u0026#34;Method\u0026#34;: \u0026#34;test free shipping\u0026#34;, \u0026#34;ShippingId\u0026#34;: 6 } ], ... } Business Presentation   Front-end page - details of an item     Business scope selection   Chained portfolio transactions\nRetrieve your won items\r-\u0026gt; Remove a purchase from your won items list\r-\u0026gt; General search(I’m here)\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now\rOnly pick the item that has the \u0026lsquo;Buy Now\u0026rsquo; feature to display.\nFetch a ‘ShippingId’ from the response for downstream transaction ‘Buy an auction using Buy Now’\rto use.\n  Business verification points   Checking the given item details is displayed on the page.\nAPI Testing Script Debugging   Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\nHow to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r  Assembling the request - \u0026lsquo;Retrieve the details of a single listing\r\u0026rsquo;   Base on the API specification, parameter - listingId means the ID of the listing to retrieve.\nAnd the listingId origin from the response of upstream request \u0026lsquo;General search\r\u0026rsquo;, and it has already been set to environment variables: {{SingleListingId}}.\nSo the request should be GET https://api.tmsandbox.co.nz/v1/Listings/{{SingleListingId}}.JSON\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;ListingId\u0026#34;: 2149295658, ... \u0026#34;BuyNowPrice\u0026#34;: 13.4400, ... \u0026#34;HasBuyNow\u0026#34;: true, ... \u0026#34;AllowsPickups\u0026#34;: 1, \u0026#34;ShippingOptions\u0026#34;: [ { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 3.5, \u0026#34;Method\u0026#34;: \u0026#34;Tracked metro courier\u0026#34;, \u0026#34;ShippingId\u0026#34;: 4 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 5.75, \u0026#34;Method\u0026#34;: \u0026#34;Tracked rural courier\u0026#34;, \u0026#34;ShippingId\u0026#34;: 5 }, { \u0026#34;Type\u0026#34;: 2, \u0026#34;Price\u0026#34;: 0, \u0026#34;Method\u0026#34;: \u0026#34;I intend to pick-up\u0026#34;, \u0026#34;ShippingId\u0026#34;: 2 } ], ... }   API checkpoint   Check whether the functionality of \u0026lsquo;Retrieve the details of a single listing\u0026rsquo; works, and it can prioritize the pick-up option from its response for the downstream transaction \u0026lsquo;Buy an auction using Buy Now\r\u0026rsquo; to use.\nThen we get the checking code snippet below base on the example feature.\nconsole.log(\u0026#34;Post-Transaction: CheckingSingleListingIdDetails Start\u0026#34;); pm.test(\u0026#34;CheckingSingleListingIdDetails\u0026#34;, function () { console.log(pm.response.json()); var jsonData = pm.response.json(); var ListingId = jsonData.ListingId; var ShippingOptions = jsonData.ShippingOptions; var arrShippingId =[]; var arrMethod =[]; if(jsonData.HasBuyNow == true){ if (ShippingOptions !== []){ breakloop:{ for (i in ShippingOptions){ // Fetch the ShippingId that the shipping way is pick-up for downstream transaction \u0026#39;Buy an auction using Buy Now\u0026#39; to use if(ShippingOptions[i].Method == \u0026#34;I intend to pick-up\u0026#34;){ postman.setEnvironmentVariable(\u0026#39;ShippingId\u0026#39;, ShippingOptions[i].ShippingId); postman.setEnvironmentVariable(\u0026#39;Method\u0026#39;, ShippingOptions[i].Method); break breakloop; } // Fetch random ShippingId only when ShippingMethod has no pick-up option else{ arrShippingId.push(ShippingOptions[i].ShippingId); arrMethod.push(ShippingOptions[i].Method); postman.setEnvironmentVariable(\u0026#39;arrShippingIdCount\u0026#39;, arrShippingId.length); postman.setEnvironmentVariable(\u0026#39;arrShippingId\u0026#39;, arrShippingId); // If it has too many ShippingId, to get the randdom ShippingId should better not execute in the loop var ShippingId=pm.environment.get(\u0026#34;arrShippingId\u0026#34;).split(\u0026#34;,\u0026#34;); var arrShippingIdCount=pm.environment.get(\u0026#34;arrShippingIdCount\u0026#34;); var RandShippingOptions = Math.floor(Math.random() * Number(arrShippingIdCount)); postman.setEnvironmentVariable(\u0026#39;ShippingId\u0026#39;, arrShippingId[RandShippingOptions]); postman.setEnvironmentVariable(\u0026#39;Method\u0026#39;, arrMethod[RandShippingOptions]); } } } var ShippingId=pm.environment.get(\u0026#34;ShippingId\u0026#34;); var Method=pm.environment.get(\u0026#34;Method\u0026#34;); console.log(\u0026#34;ListingId: \u0026#34;+ListingId +\u0026#34;, ShippingId: \u0026#34; + ShippingId +\u0026#34;, and Method: \u0026#34; +Method); } console.log(\u0026#34;Post-Transaction: CheckingSingleListingIdDetails Pass\u0026#34;); } else{ console.log(\u0026#34;Post-Transaction: CheckingSingleListingIdDetails Failed\u0026#34;); } }); Run script to verify the checkpoint works from console log.\nAPI Testing Script Enhancement Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.\nRun the final script and to verify from front-end page or console log.\nAPI Testing Script Negative Cases Extension Using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 29, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-retrieve-listings-details/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-11-Retrieve the details of a single listing API testing"},{"categories":null,"content":"API - Buy an auction using Buy Now script development steps API Specification -\u0026gt; Business Presentation -\u0026gt; API Testing Script Debugging -\u0026gt; API Testing Script Enhancement -\u0026gt; API Testing Script Negative Cases Extension -\u0026gt; API Testing Script Publishment\nAPI Specification   API Function: Buys an item using Buy Now.   Key request fields     Key response fields - The details of the Buy Now request.      Success Boolean Indicates whether the operation was successful.      Description String or null The description of the error, if the operation failed.    StatusCode Enumeration The status of the Buy Now request.     Success 0 The bid was a success.   … … … …   PurchaseId Long Integer The ID of the purchase that was just made.    … … … …      Example request   POST https://api.tmsandbox.co.nz/v1/Bidding/BuyNow.JSON\n  Example response   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Seller\u0026#39;s email owen4@snipesoft.net.nz\u0026#34;, \u0026#34;StatusCode\u0026#34;: 0, \u0026#34;PurchaseId\u0026#34;: 26231 } Business Presentation   Front-end page - Item details page click \u0026lsquo;Buy Now\u0026rsquo; button.     Front-end page - Confirm purchase page     Front-end page - Purchase details page     Business scope selection   Chained portfolio transactions\nRetrieve your won items\r-\u0026gt; Remove a purchase from your won items list\r-\u0026gt; General search\r-\u0026gt; Retrieve the details of a single listing\r-\u0026gt; Buy an auction using Buy Now(I’m here)\rFetch a ‘ShippingId’ from the response for downstream transaction ‘Buy an auction using Buy Now’\rto use.\n  Business verification points   Checking the given item details is displayed on the page.\nAPI Testing Script Debugging   Choose the OAuth 1.0 in the Authorization label of Postman to authorize the request.   The OAuth 1.0 is for the transaction that needs to be authorized before sending. Template likes the below:\nHow to get Consumer Key, Consumer Secret, OAuth Token, and OAuth Token Secret, please refer to Preparation before API testing demo\r  Assembling the request - \u0026lsquo;Buy an auction using Buy Now\r\u0026rsquo;   Base on the API specification, parameter - ListingId means the ID of the listing the Buy Now request is for.\nAnd the listingId origin from the response of upstream request \u0026lsquo;General search\r\u0026rsquo;, and it has already been set to environment variables: {{SingleListingId}}.\nBase on the API specification, parameter - ShippingOption means the ID of the preferred shipping option which will be used if the Buy Now request succeeds. This ID can be retrieved from the ShippingId field in the listing detail.\nAnd the ShippingOption origin from the response of upstream request \u0026lsquo;Remove a purchase from your won items list\r\u0026rsquo;, and it has already been set to environment variables: {{ShippingId}}.\nSo the request should be https://api.tmsandbox.co.nz/v1/Bidding/BuyNow.JSON\n  API connectivity   The connectivity test passes and gets a response example.\n{ \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Seller\u0026#39;s email mp70@abcde.com\u0026#34;, \u0026#34;StatusCode\u0026#34;: 0, \u0026#34;PurchaseId\u0026#34;: 26262 }   API checkpoint   Check whether the functionality of \u0026lsquo;Buy an auction using Buy Now\u0026rsquo; works, and it can successfully buy an item into won items list.\nThen we get the checking code snippet below base on the example feature.\n// Check BuyNow operation is sucessful console.log(\u0026#34;Post-Transaction: CheckingBuyNow Start\u0026#34;); pm.test(\u0026#34;CheckingBuyNowSuccess\u0026#34;, function () { console.log(pm.response.json()); var jsonData = pm.response.json(); var Success = jsonData.Success; var StatusCode = jsonData.StatusCode; var PurchaseId= jsonData.PurchaseId; postman.setEnvironmentVariable(\u0026#39;BuyNowPurchaseId\u0026#39;, PurchaseId); if(Success == true \u0026amp;\u0026amp; StatusCode == 0){ console.log(\u0026#34;Get sucessful StatusCode: \u0026#34; +StatusCode+\u0026#34; (0-Success)\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingBuyNow Pass\u0026#34;); } else{ //0-Success, 1-None, 2-ReserveMet, ..., 42-AutoBidDecreased console.log(\u0026#34;Get failed StatusCode: \u0026#34; +StatusCode); var Description = jsonData.Description; console.log(\u0026#34;Failed Description: \u0026#34; +Description); console.log(\u0026#34;Post-Transaction: CheckingBuyNow Failed\u0026#34;); } }); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Start\u0026#34;); const post_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;)+\u0026#39;/v1/MyTradeMe/Won/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;4B34BCCFD24CF3497EE36E54204AA7E2\u0026#34;,oauth_token=\u0026#34;38B073E4F6C65F722A0CF964492EA6A2\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;0D8635F6A51F0EA381A8D97F5D7812E2%26293BD08354D18D33871C4EBB02D67ACA\u0026#34;\u0026#39;], body: { } }; // setTimeout(()=\u0026gt;{ pm.sendRequest(post_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Failed\u0026#34;); } else { // Confirm whether PurchaseId of new buy item existed on the won list. pm.test(\u0026#34;Checking NewPurchasedListId existed in the won list\u0026#34;, function () { console.log(response.json()); var jsonData = response.json(); var Listdata = jsonData[\u0026#39;List\u0026#39;]; var SingleListingId = pm.environment.get(\u0026#34;SingleListingId\u0026#34;); var BuyNowPurchaseId = pm.environment.get(\u0026#34;BuyNowPurchaseId\u0026#34;); breakloop:{ for(var i = 0; i \u0026lt; Listdata.length; i++) { // console.log(\u0026#34;ListingId: \u0026#34; + Listdata[i].ListingId + \u0026#34;, PurchaseId: \u0026#34; + Listdata[i].PurchaseId); if (SingleListingId == Listdata[i].ListingId \u0026amp;\u0026amp; BuyNowPurchaseId == Listdata[i].PurchaseId){ console.log(\u0026#34;Found PurchaseId \u0026#34; +BuyNowPurchaseId +\u0026#34; and ListingId \u0026#34;+SingleListingId + \u0026#34; exists on the won list\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Pass\u0026#34;); break breakloop; } } if (i==0){ console.log(\u0026#34;Not Found any PurchaseId and ListingId exist on the won list.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Failed\u0026#34;); } else{ console.log(\u0026#34;The purchased item hasn\u0026#39;t been shown on the won list page, please waiting 60 seconds to check again.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Failed\u0026#34;); } } }); } }); // }, 70000); Run script to verify the checkpoint works from console log.\nAPI Testing Script Enhancement   Enhance the script, such as to add the transactional function, exceptional verification, parameterization, etc.   Run the final script and to verify from front-end page or console log.   Before the \u0026lsquo;Buy Now\u0026rsquo; operation, see the item details.\nAfter the \u0026lsquo;Buy Now\u0026rsquo; operation, see the item details.\nAfter the \u0026lsquo;Buy Now\u0026rsquo; operation, see the won items list.\nAPI Testing Script Negative Cases Extension Using the \u0026lsquo;Equivalent Class Partitioning\u0026rsquo; and \u0026lsquo;Boundary Value Analysis\u0026rsquo; as we did in manual testing cases.\nThese API test scripts are doing the negative direction of the business, to be an extension to the above API positive case.\nAPI Testing Script Publishment Move script from debug folder to public folder when we finished API positive and negative cases.\nThen wait to be published to the GitHub specific repo combining with other scripts using the CICD tool.\n","date":"Jul 29, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-buy-an-auction-using-buy-now/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-12-Buy an auction using Buy Now API testing"},{"categories":null,"content":"Scenario‘s position in the API automation testing Typical transactions selection -\u0026gt; Corresponding API selection -\u0026gt; Scripting -\u0026gt; Scenarios and reports(I\u0026rsquo;m here) -\u0026gt; CICD\nTypical transactions selection Typical transactions selection refers to: Trade Me-2-typical transactions\r\nCorresponding API selection and scripting Corresponding API selection and scripting refers to:\nTrade Me-3-Retrieve general categories API testing\r Trade Me-4-Retrieve your watchlist API testing\r Trade Me-5-Remove a listing from your watchlist API testing\r Trade Me-6-Retrieve closing soon listings API testing\r Trade Me-7-Add a listing to your watchlist API testing\r Trade Me-8-Retrieve your won items API testing\r Trade Me-9-Remove a purchase from your won items list API testing\r Trade Me-10-General search API testing\r Trade Me-11-Retrieve the details of a single listing API testing\r Trade Me-12-Buy an auction using Buy Now API testing\r Two ways of running your scenarios Postman uses the concept of collection to store your API testing scripts as a basic scenario.\nYou could choose two ways to run the scenario and display the running report.\nOne is by the collection runner, and another is the \u0026lsquo;Newman\u0026rsquo; tool.\nRun your scenarios by the collection runner   What is the postman collection runner   The Collection Runner allows you to run sets of requests in a specified sequence.\nThe Collection Runner will log your request test results, and your scripts can pass data between requests as well as altering the request workflow.\nMore refer to official doc: Using the Collection Runner\r.\n  Go to the collection runner label     Enable \u0026lsquo;Show Postman Console\u0026rsquo;   View \u0026gt; Show Postman Console to enable the console log   Set running order, iterations, parametric data files, then click the \u0026lsquo;Run collection\u0026rsquo; button     See reports from Postman in-build \u0026lsquo;View Results\u0026rsquo;     See running results from console log   Run your scenarios by \u0026lsquo;Newman\u0026rsquo;   What is the Newman   Newman is a command-line collection runner for Postman.\nIt allows you to effortlessly run and test a Postman collection directly from the command-line.\nIt is built with extensibility in mind so that you can easily integrate it with your continuous integration servers and build systems.\nMore refer to: newman GitHub\r  How to install the Newman?   How to install the Newman refers to: How to install Newman?\r\n  Export collection files to local   Right click given collection -\u0026gt; Export -\u0026gt; single click \u0026lsquo;Collection v2.1 (recommended)\u0026rsquo; -\u0026gt; Export -\u0026gt; choose a local directory to store the collection file.\nThis demo stores to local D:\\Software\\postman\\collections\nWill have both positive and negative case scripts to be exported to local\nPositive and negative case scripts name as \u0026lsquo;tradeMeSandBox.postman_collection.json\u0026rsquo; and \u0026lsquo;tradeMeSandBox-Negative.postman_collection.json\u0026rsquo;.\n  Export environment parameter file to local   Click specific environment the \u0026lsquo;Edit\u0026rsquo; -\u0026gt; Export -\u0026gt; choose a local directory to store the environment file.\nThis demo stores to local D:\\Software\\postman\\data\n  Generate cli and html report   Using Newman reporters to generate both command line and web page reports.\nThe grammar refers to Reporters\r.\n  See cli and html report details   ","date":"Aug 2, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-scenarios-and-newman-report/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-13-scenarios-and-newman-reports"},{"categories":null,"content":"API automation testing CI process Typical transactions selection -\u0026gt; Corresponding API selection -\u0026gt; Scripting -\u0026gt; Scenarios and reports -\u0026gt; CI(I\u0026rsquo;m here) Typical transactions selection Typical transactions selection refers to: Trade Me-2-typical transactions\r Corresponding API selection and scripting Corresponding API selection and scripting refers to:   Trade Me-3-Retrieve general categories API testing\r Trade Me-4-Retrieve your watchlist API testing\r Trade Me-5-Remove a listing from your watchlist API testing\r Trade Me-6-Retrieve closing soon listings API testing\r Trade Me-7-Add a listing to your watchlist API testing\r Trade Me-8-Retrieve your won items API testing\r Trade Me-9-Remove a purchase from your won items list API testing\r Trade Me-10-General search API testing\r Trade Me-11-Retrieve the details of a single listing API testing\r Trade Me-12-Buy an auction using Buy Now API testing\r   Scenarios and reports Scenarios and reports refer to: Trade Me-13-scenarios-and-reports\r. Jenkins CI process Practice   Steps of Jenkins CI process   Preparations -\u0026gt; New a CI job -\u0026gt; Job configuration -\u0026gt; Job running -\u0026gt; Job results checking -\u0026gt; Email to stakeholders   Preparations - related tools installation   Jenkins installation refers to: How to install Jenkins?\r Git Bash installation refers to: How to install Git Bash?\r   Preparations - environment initiation   Initialize folder structure for Postman-related scripts, data, reports, repository before building the CI job. rem create folder for Postman collection, env parameter, temporary parameter, reports pushd d:\\Software \u0026amp;\u0026amp; md postman\\collections postman\\data postman\\reports\\hisreports postman\\postman_github Set the Postman home directory to system environment parameter setx \u0026#34;POSTMAN_HOME\u0026#34; \u0026#34;D:\\Software\\postman\u0026#34; /M Preparations - export Postman collection and environment variables file to local export Postman collection file to local refers to: export Postman collection file to local \r\nexport Postman environment variables file to local refers to: export Postman environment variables file to local \r\n  Preparations - GItHub repository clone   Clone remote Postman GitHub repository to given local folder Note: need to start a new dos window after setting the system environment variables\nrem postman github repository clone pushd %POSTMAN_HOME%\\postman_github \u0026amp;\u0026amp; git init \u0026amp;\u0026amp; git clone https://github.com/ifulltest/postman.git Set email and password to authorize files transfer between local and remote repository. [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true [remote \u0026#34;origin\u0026#34;] url = https://Github username:passwrod@github.com/ifulltest/postman.git fetch = +refs/heads/*:refs/remotes/origin/*   New a CI job   Start Jenkins by self-defined port number: java -jar jenkins.war \u0026ndash;httpPort=8088 \u0026hellip;\u0026hellip;\nCreate a Freestyle project The example project named as: \u0026lsquo;TradeMe-API-Automation-Practice\u0026rsquo;\n  Job configuration - General   Discard old builds   Job configuration - Build - archive reports   Build Windows batch command, archive Newman reports that creating for more than seven days to the history folder. rem Archive Newman reports that creating for more than seven days to the hisreports folder. pushd %POSTMAN_HOME% \u0026amp;\u0026amp; ping /n 3 127.0.0.1\u0026gt;nul copy /y /b reports\\hisreports\\newmanrpt-his.html \u0026#34;%POSTMAN_HOME%\\reports\u0026#34; \u0026amp;\u0026amp; forfiles /p \u0026#34;%POSTMAN_HOME%\\reports\u0026#34; /m *.html /d -7 /c \u0026#34;cmd /c move @path %POSTMAN_HOME%\\reports\\hisreports\u0026#34; \u0026amp;\u0026amp; copy /y /b reports\\hisreports\\newmanrpt-his.txt \u0026#34;%POSTMAN_HOME%\\reports\u0026#34; \u0026amp;\u0026amp; forfiles /p \u0026#34;%POSTMAN_HOME%\\reports\u0026#34; /m *.txt /d -7 /c \u0026#34;cmd /c move @path %POSTMAN_HOME%\\reports\\hisreports\u0026#34; Before the archive operation, two files in the reports folder creating for more than 7 days need to be archived. Run job and see the Jenkins log Started by user GaryGao Running as SYSTEM Building on master in workspace D:\\Software\\Jenkins\\workspace\\TradeMe-API-Automation-Practice [TradeMe-API-Automation-Practice] $ cmd /c call C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\jenkins7423834600478251788.bat D:\\Software\\Jenkins\\workspace\\TradeMe-API-Automation-Practice\u0026gt;rem Archive Newman reports that creating for more than seven days to the hisreports folder. D:\\Software\\Jenkins\\workspace\\TradeMe-API-Automation-Practice\u0026gt;pushd D:\\Software\\postman \u0026amp;\u0026amp; ping /n 3 127.0.0.1 1\u0026gt;nul D:\\Software\\postman\u0026gt;copy /y /b reports\\hisreports\\newmanrpt-his.html \u0026#34;D:\\Software\\postman\\reports\u0026#34; \u0026amp;\u0026amp; forfiles /p \u0026#34;D:\\Software\\postman\\reports\u0026#34; /m *.html /d -7 /c \u0026#34;cmd /c move @path D:\\Software\\postman\\reports\\hisreports\u0026#34; \u0026amp;\u0026amp; copy /y /b reports\\hisreports\\newmanrpt-his.txt \u0026#34;D:\\Software\\postman\\reports\u0026#34; \u0026amp;\u0026amp; forfiles /p \u0026#34;D:\\Software\\postman\\reports\u0026#34; /m *.txt /d -7 /c \u0026#34;cmd /c move @path D:\\Software\\postman\\reports\\hisreports\u0026#34; 1 file(s) copied. 1 file(s) moved. 1 file(s) moved. 1 file(s) moved. 1 file(s) copied. 1 file(s) moved. D:\\Software\\postman\u0026gt;exit 0 Finished: SUCCESS After the archive operation, the given two files are archived in the hisreports folder. Note: \u0026lsquo;newmanrpt-his.html\u0026rsquo; and \u0026lsquo;newmanrpt-his.txt\u0026rsquo; in the hisreports folder are two files created more than 7 days ago, making sure the archiving loop operation is not failed.\n  Job configuration - Build - generate cli \u0026amp; html reports   Build jobs for generating both positive and negative case CLI \u0026amp; HTML reports. rem Using Newman to generate positive case CLI \u0026amp; HTML reports, dynamic report name stores in a temporary file. pushd %POSTMAN_HOME% if %time:~0,2% leq 9 (set h=0%time:~1,1%) else (set h=%time:~0,2%) set y=%date:~0,4%\u0026amp; set m=%date:~5,2%\u0026amp; set d=%date:~8,2%\u0026amp; set mi=%time:~3,2%\u0026amp; set s=%time:~6,2%\u0026amp; set ms=%time:~9,2% \u0026amp;\u0026amp; ping /n 3 127.0.0.1\u0026gt;nul newman run collections\\tradeMeSandBox.postman_collection.json -e data\\tradeMeSandBox.postman_environment.json -r cli,html --reporter-html-export reports\\newmanrpt-%y%%m%%d%%h%%mi%%s%.html\u0026gt;reports\\newmanrpt-%y%%m%%d%%h%%mi%%s%.txt \u0026amp; echo |set /p=\u0026#34;newmanrpt-%y%%m%%d%%h%%mi%%s%\u0026#34;\u0026gt;%POSTMAN_HOME%\\data\\fn.txt \u0026amp; exit 0 rem Using Newman to generate negative case CLI \u0026amp; HTML reports, dynamic report name stores in a temporary file. pushd %POSTMAN_HOME% if %time:~0,2% leq 9 (set h=0%time:~1,1%) else (set h=%time:~0,2%) set y=%date:~0,4%\u0026amp; set m=%date:~5,2%\u0026amp; set d=%date:~8,2%\u0026amp; set mi=%time:~3,2%\u0026amp; set s=%time:~6,2%\u0026amp; set ms=%time:~9,2% \u0026amp;\u0026amp; ping /n 3 127.0.0.1\u0026gt;nul newman run collections\\tradeMeSandBox-Negative.postman_collection.json -e data\\tradeMeSandBox.postman_environment.json -r cli,html --reporter-html-export reports\\newmanrpt-%y%%m%%d%%h%%mi%%s%-neg.html\u0026gt;reports\\newmanrpt-%y%%m%%d%%h%%mi%%s%-neg.txt \u0026amp; echo |set /p=\u0026#34;newmanrpt-%y%%m%%d%%h%%mi%%s%-neg\u0026#34;\u0026gt;%POSTMAN_HOME%\\data\\negfn.txt \u0026amp; exit 0 Run job and see the Jenkins log After the job, CLI \u0026amp; HTML reports and temporary data files are generated.   Job configuration - Build - upload local reports to remote GitHub repository   Copy newly generated Newman report to local GitHub repository rem copy newly generated Newman report to local GitHub repository pushd %POSTMAN_HOME% set /P fn=\u0026lt;data\\fn.txt \u0026amp;\u0026amp; set /P negfn=\u0026lt;data\\negfn.txt copy /y reports\\%fn%.* postman_github\\postman\\reports \u0026amp;\u0026amp; copy /y reports\\%negfn%.* postman_github\\postman\\reports Run job and see the Jenkins log After the job, given reports have been copied to local GitHub repository Commit given reports local GitHub to public GitHub repository rem Commit given reports local GitHub to public GitHub repository pushd %POSTMAN_HOME% set /P fn=\u0026lt;data\\fn.txt \u0026amp;\u0026amp; set /P negfn=\u0026lt;data\\negfn.txt pushd %POSTMAN_HOME%\\postman_github\\postman\\reports \u0026amp;\u0026amp; git pull origin main \u0026amp;\u0026amp; git add %fn%.* %negfn%.* \u0026amp;\u0026amp; git commit -m \u0026#34;txt and html report\u0026#34; \u0026amp;\u0026amp; git push -u origin main Run job and see the Jenkins log After the job, given reports have been committed to public GitHub repository   Job configuration - Build - Email to stakeholders   Build job for emailing stakeholders the reports related information. rem Email to stakeholders the given testing report pushd %POSTMAN_HOME% \u0026amp;\u0026amp; node collections\\nodemailer.js \u0026amp;\u0026amp; del %POSTMAN_HOME%\\data\\*fn.txt Before the job, see related storage status. Run job and see the Jenkins log After the job, see related storage and email status.   How to use Node.js realize the email function   The above example mainly uses node.js the \u0026lsquo;nodemailer\u0026rsquo; module to realize the email function.\nInstall the Node.js in the Postman home directory or directly move the \u0026lsquo;node_moudules\u0026rsquo; in.\nHow to install Node.js please refer to: How to install Node.js\r Install the extended module \u0026lsquo;nodemailer\u0026rsquo; and \u0026lsquo;moment\u0026rsquo; to Node.js. Moule installation command:\nnpm install nodemailer or yarn add nodemailer \u0026ndash;save\nnpm install moment or yarn add moment\nEmail realizing by \u0026lsquo;nodemailer.js\u0026rsquo; - get current time for later email title to use. // Get current time for later email title to use. const moment = require(\u0026#39;moment\u0026#39;) let currentTime = moment(Date.now()).format(\u0026#39;YYYY-MM-DD HH:mm:ss\u0026#39;) Email realizing by \u0026lsquo;nodemailer.js\u0026rsquo; - file operation and concatenate the email content. // file systme module which can operate the file const fs = require(\u0026#34;fs\u0026#34;); const path_fn = \u0026#34;D:/Software/postman/data/fn.txt\u0026#34;; // file path const isExist_fn = fs.existsSync(path_fn); // check whether file exist const filedata_fn = isExist_fn ? fs.readFileSync(path_fn, \u0026#34;utf-8\u0026#34;) : \u0026#34;\u0026#34;; const fs_neg = require(\u0026#34;fs\u0026#34;); const path_negfn = \u0026#34;D:/Software/postman/data/negfn.txt\u0026#34;; const isExist_negfn = fs_neg.existsSync(path_negfn); const filedata_negfn = isExist_negfn ? fs_neg.readFileSync(path_negfn, \u0026#34;utf-8\u0026#34;) : \u0026#34;\u0026#34;; console.log(\u0026#34;Positive cases report name: \u0026#34;+filedata_fn); console.log(\u0026#34;Negative cases report name: \u0026#34;+filedata_negfn); // Concatenate the email content var arr=new Array(); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;font size=\u0026#39;5\u0026#39;\u0026gt;Positive cases HTML report: \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;a href=https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_fn+\u0026#34;.html\u0026gt;\u0026lt;b\u0026gt;\u0026lt;font size=\u0026#39;4\u0026#39;\u0026gt;https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_fn+\u0026#34;.html\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;font size=\u0026#39;5\u0026#39;\u0026gt;Positive cases TXT report: \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;a href=https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_fn+\u0026#34;.txt\u0026gt;\u0026lt;b\u0026gt;\u0026lt;font size=\u0026#39;4\u0026#39;\u0026gt;https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_fn+\u0026#34;.txt\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;font size=\u0026#39;5\u0026#39;\u0026gt;Negative cases HTML report: \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;a href=https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_negfn+\u0026#34;.html\u0026gt;\u0026lt;b\u0026gt;\u0026lt;font size=\u0026#39;4\u0026#39;\u0026gt;https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_negfn+\u0026#34;.html\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;font size=\u0026#39;5\u0026#39;\u0026gt;Negative cases TXT report: \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;a href=https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_negfn+\u0026#34;.txt\u0026gt;\u0026lt;b\u0026gt;\u0026lt;font size=\u0026#39;4\u0026#39;\u0026gt;https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_negfn+\u0026#34;.txt\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); var htmltxt = arr.join(\u0026#34;\u0026#34;); console.log(\u0026#34;htmltxt: \u0026#34;+htmltxt); Email realizing by \u0026lsquo;nodemailer.js\u0026rsquo; - sending the email // nodemailer module which can operate email var nodemailer = require(\u0026#34;nodemailer\u0026#34;) var transport = nodemailer.createTransport({ host: \u0026#34;smtp.gmail.com\u0026#34;, secureConnection: true, port: 465, auth:{ user: \u0026#34;sender email\u0026#34;, pass: \u0026#34;sender email password\u0026#34; } }) var mailOptions = { from: \u0026#34;sender email\u0026#34;, to: \u0026#34;receiver email\u0026#34;, subject: \u0026#34;Daily env check: \u0026#34;+currentTime, text: \u0026#34;Hello-text\u0026#34;, html: htmltxt, } transport.sendMail(mailOptions, function(err, response) { if(err) console.log(err) else console.log(response) })   Other CI practices that waiting to be extended   The above CI example uses the Windows batch command to realize the CI process.\nUsing \u0026lsquo;Execute shell\u0026rsquo; and \u0026lsquo;Pipe line\u0026rsquo; mode to realize the CI process will be displayed on later blog.\n","date":"Aug 3, 2021","permalink":"https://ifulltest.github.io/en/posts/tm-api-jenkins-cicd-process/","series":["Postman API Automation Practice"],"tags":["Postman","Jenkins"],"title":"Trade Me-14-Jenkins-CI-process"},{"categories":["DevOps"],"content":"Git is a set of command line utility programs that are designed to execute on a Unix style command-line environment.\nGit Bash is an application for Microsoft Windows environments which provides an emulation layer for a Git command line experience.\nThis article will concisely introduce one of the basic Git knowledge: how to install the Git Bash\u0026hellip;\nThe steps of Git Bash installation Download and install Git Bash -\u0026gt; Start the Git Bash -\u0026gt; Basic configuration\nDownload and install Git Bash   Download Git Bash   Git Bash package downloading page: Git Bash download\r  Install Git Bash   Double-click to run the installation package, click \u0026ldquo;Next\u0026rdquo; in the pop-up installation window, and finally click \u0026ldquo;Install\u0026rdquo; to complete the installation.\n  Start the Git Bash   Click the Windows Start icon, type \u0026ldquo;Git Bash\u0026rdquo; in the Start search bar, click Enter to open the Git Bash client, and It is recommended that you pin it to the Windows taskbar.\nCheck the version by command git \u0026ndash;version\nBasic configuration To configure the Git Bash client username and email, enter the following command line in Git Bash.\ngit config --global user.name \u0026#34;\u0026lt;Your username\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;Your email\u0026gt;\u0026#34; More about Git Bash More about Git Bash please refer to its official documents: Git Documentation\r","date":"Aug 3, 2021","permalink":"https://ifulltest.github.io/en/posts/git-bash-installation/","series":null,"tags":["Git","GitHub"],"title":"How to install Git Bash?"},{"categories":["DevOps"],"content":"The JDK - \u0026lsquo;Java™ Platform, Standard Edition Development Kit ' is a development environment for building applications, and components using the Java programming language.\nIt includes tools useful for developing and testing programs written in the Java programming language and running on the Java platform\u0026hellip;\nThe steps of JDK installation   Download JDK   Download JDK\nJDK16 download page\rDecompress to given folder\n  Set the environment variable for JDK   Set \u0026lsquo;JAVA_HOME\u0026rsquo; = D:\\Software\\Java\\jdk-16.0.2\nSet \u0026lsquo;CLASSPATH\u0026rsquo; - .;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar;\nSet \u0026lsquo;Path\u0026rsquo; - %JAVA_HOME%\\bin\n  Check the installation and configuration worked.   Check by the commands: java -version and javac\n","date":"Aug 3, 2021","permalink":"https://ifulltest.github.io/en/posts/jdk-installation/","series":null,"tags":["Java","Jenkins"],"title":"How to install JDK?"},{"categories":["DevOps"],"content":"The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project.\nThis article will concisely introduce one of the basic Jenkins knowledge: how to install the Jenkins \u0026hellip;\nThe steps of Jenkins installation Preparations -\u0026gt; Download and install Jenkins -\u0026gt; Start the Jenkins\nPreparations before Jenkins installation   Install JDK   How to install JDK refers to: How to install JDK\rDownload and install Jenkins   Download Jenkins   Jenkins package downloading page: Jenkins download\rJenkins installation refers to: Installing Jenkins\r  Jenkins starting   Start Jenkins by self-defined port number: java -jar jenkins.war \u0026ndash;httpPort=8088\n\u0026hellip;\u0026hellip;\nMore about Jenkins More about Jenkins please refer to its official documents: Jenkins User Documentation\r","date":"Aug 3, 2021","permalink":"https://ifulltest.github.io/en/posts/jenkins-installation/","series":null,"tags":["Jenkins"],"title":"How to install Jenkins?"},{"categories":["API Automation"],"content":"The steps of Newman installation Download and install the Newman application -\u0026gt; Verify your Newman installation by version -\u0026gt; Run Newman to get reports \u0026hellip;\nDownload and install the Newman application Before installing the Newman, you need to install the Node.js first. How to install the Node.js please refer to: The steps of Node.js installation\r Newman official tutorial refers to: https://nodejs.org/en/download/ Using \u0026lsquo;npm install -g newman\u0026rsquo; to install the app. Verify your Newman installation by version Using demo Postman given collection run Newman to get the report Export collection and environment file to local, then run Newman command to get the demo report. How to get the collection and environment file, please refer to: Export collection files to local\r and Export environment parameter file to local\r How to run Newman to get the demo report, please refer to: Generate cli and html report\r","date":"Aug 2, 2021","permalink":"https://ifulltest.github.io/en/posts/newman-installation/","series":null,"tags":["Postman"],"title":"How to install Newman?"},{"categories":["API Automation","UI Automation"],"content":"The steps of Node.js installation Download and install the Node.js application -\u0026gt; Verify your Node.js installation by version -\u0026gt; Create a simple script \u0026hellip;\nDownload and install the Node.js application Go to official website to download and install the app: https://nodejs.org/en/download/\nSet the Path to Environment Variables Verify your Node.js installation by version Create a simple script Create the demo script \u0026lsquo;test.js\u0026rsquo; to verify the basic function is worked.\n","date":"Aug 2, 2021","permalink":"https://ifulltest.github.io/en/posts/nodejs-installation/","series":null,"tags":["Postman","Cypress"],"title":"How to install Node.js?"},{"categories":["API Automation"],"content":"The steps of Postman installation Download and install the postman application -\u0026gt; Register your account and create the workspace -\u0026gt; Create the collection -\u0026gt; Add a request and begin your scripting \u0026hellip;\nDownload and install the postman application Go to official website to download and install the app: https://www.postman.com/downloads/\nRegister your account and create the workspace Create the collection Add a request and begin your scripting ","date":"Aug 2, 2021","permalink":"https://ifulltest.github.io/en/posts/postman-installation/","series":null,"tags":["Postman"],"title":"How to install Postman?"},{"categories":["UI Automation"],"content":"We will start the journey of Cypress discovery from here.\nThis article will quickly introduce what is Cypress, what can Cypress do, steps of installation and starting the Cypress \u0026hellip;\nWhat is Cypress Cypress is an UI automation testing tool which facing on the modern web.\nWhat can Cypress do to be continued\u0026hellip;\n","date":"Feb 5, 2021","permalink":"https://ifulltest.github.io/en/posts/cypress-installation/","series":null,"tags":["Cypress"],"title":"How to install Cypress?"},{"categories":["API Automation"],"content":"We will start the journey of JMeter discovery from here.\nThis article will talk about JMeter installation-related knowledge \u0026hellip;\nWhat is JMeter JMeter is one of the open-source software in the Apache Software Foundation.\nIt is originally designed to do the performance testing for the web application based on HTTP/HTTPS protocol.\nWhat can JMeter do As its developing, now it has been extended to do more types of testing, such as below:\n Web - HTTP, HTTPS (Java, NodeJS, PHP, ASP.NET, …) SOAP / REST Webservices FTP Database via JDBC LDAP Message-oriented middleware (MOM) via JMS Mail - SMTP(S), POP3(S), and IMAP(S) Native commands or shell scripts TCP Java Objects  Steps of JMeter installation (Windows)  Get the installation package of JDK (JDK 15)\r.   Configuration of JDK  JAVA_HOME: D:\\Software\\Java\\jdk-15\nPath: .;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin\nCLASSPATH: .;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar;\n Validation of JDK installation   Get the installation package of JMeter(JMeter v5.4.1)\r  How to start the JMeter base directory\\\n","date":"Feb 4, 2021","permalink":"https://ifulltest.github.io/en/posts/jmeter-installation/","series":null,"tags":["JMeter"],"title":"How to install JMeter?"},{"categories":["Configuration Management"],"content":"As a public repository, GitHub mainly restored the source code from the local system, using git to control the software version. There are several commands frequently used from local git to GitHub\u0026hellip;\nCommon commands for Git Here are the Git commands which are being covered:\n  git config   git init   git clone   git add   git commit   git diff   git reset   git status   git rm   git log   git show   git tag   git branch   git checkout   git merge   git remote   git push   git pull   git stash   More details of git commands For more about the git commands, you can refer to below website:\nTop 20 Git Commands With Examples\r","date":"Sep 19, 2020","permalink":"https://ifulltest.github.io/en/posts/github-common-commands-or-operations/","series":null,"tags":["GitHub"],"title":"What are the different commands or operations in GitHub?"},{"categories":["DevOps"],"content":"A release pipeline can also be thought of as a workflow. A workflow whose purpose is releasing software. As such, modelling your release pipeline should simply be a case of modelling how you want to release your software\u0026hellip;\nMore about release pipe line For more about the release pipe line, you can refer to below demo on Youtube:\n ","date":"Sep 19, 2020","permalink":"https://ifulltest.github.io/en/posts/what-is-a-release-pipeline/","series":null,"tags":["CICD"],"title":"What is a release pipeline?"},{"categories":["DevOps"],"content":"As the picture showed, CT, CI and CD will work better when they are together. To know how they are achieved by the DevOps server, we need to see each concept of CI, CD, and CT\u0026hellip;\nContinuous Integration Continuous Integration (CI) is the process of automating the build and testing of code every time someone commits changes to version control. Many think this is the most critical component to making an effectively agile development team.\nContinuous Delivery Continuous Delivery (CD) is the practice is the practice of streamlining and automating all the processes leading up to deployment. There are a number of steps in CD, such as validating the quality of the build in the previous environment. When done manually these steps can take significant effort and time. However, using cloud technologies and proper orchestration, they can be automated.\nContinuous Testing Continuous Testing (CT), which can also be referred to as Continuous Quality, is the practice of embedding and automating test activities into every “commit”.\nCI,CD,CT Pip Line   The development environment builds a version from the development branch and runs the Unit testing cases. When success for these cases, we will push code to the testing branch.\n  The testing environment automated run Unit and automation testing case after building finish. But only when these cases passed, the final build will show us a sort of successful building tips. When functional testing is finished in the testing environment, we will push code to the production branch.\n  The testing environment automated run Unit and automation testing case after building finish. But only when these cases passed, the final build will show us a sort of successful building tips. When functional testing is finished in the production environment, we will decide to deliver it to real customers.\n  More about CI,CD,CT For more about how the CI,CD,CT work together, you can refer to below video:\n  ","date":"Sep 19, 2020","permalink":"https://ifulltest.github.io/en/posts/how-does-ci-cd-ct-to-be-achieved/","series":null,"tags":["CICD"],"title":"What is CI CD CT, and how they are achieved by DevOps server?"},{"categories":["Configuration Management"],"content":"In software development, a build is the process of converting source code files into standalone software artifact(s) that can be run on a computer, or the result of doing so. In terms of compilation, they are two different concepts\u0026hellip;.\n\u0026ldquo;Building\u0026rdquo; is a fairly general term, and it can refer to anything that is needed to go from editable source material (source code, scripts, raw data files, etc.) to a shippable software product. Building can (and usually does) involve several steps, such as pre-processing, compiling, linking, converting data files, running automated tests, packaging, etc.\n\u0026ldquo;Compiling\u0026rdquo; is more specific, and almost invariably refers to a process that takes source code as its input, and outputs something runnable, typically machine code for either a physical or virtual machine, or source code in a different language.\nMore about build For more about the build, you can refer to below website:\nSoftware Build\r","date":"Sep 19, 2020","permalink":"https://ifulltest.github.io/en/posts/difference-of-code-build-and-compilation/","series":null,"tags":["CICD"],"title":"What is the difference between code build and compilations?"},{"categories":["Project Management"],"content":"The primary purpose of test or project management tools is to help managers plan, execute and control all aspects of the test ore project management process. What we benefit from such tools are\u0026hellip;\n  To get all co-workers on the same boat.   To reduce distraction to a certain extent.   More convenient for tracking and retrospection of the whole project.   To encourage healthy competition between co-workers and reduce the dispute for job performance.  ","date":"Sep 19, 2020","permalink":"https://ifulltest.github.io/en/posts/purpose-of-a-test-or-pm-tool/","series":null,"tags":["Test Basis"],"title":"What is the purpose of a test or project management tool?"},{"categories":["DevOps"],"content":"In the DevOps approach, testers and developers play equally important roles. The boundaries of job responsibilities between a developer and tester become blurred in DevOps\u0026hellip;\nQA in DevOps is more than just a role. It is a culture. QA ties together development and operations and enables them to collaborate to have software and applications up \u0026amp; running. Everyone in the organization takes responsibility for quality and stability, and thereby for the business success.\nThe effect of QA in a DevOps environment   Continuous testing and quality monitoring\n  Continuous development based on TDD and BDD\n  Ensured quality is everyone\u0026rsquo;s responsibility\n  Established priorities, potential risks and business performance\n  Visualized quality indicators per application\n  Enable flexible quality coverage decisions\n  Implement metrics to manage QA efficiency\n  More about QA in DevOps environment For more about QA in DevOps environment, you can refer to below public class on Youtube:\n   ","date":"Sep 19, 2020","permalink":"https://ifulltest.github.io/en/posts/the-role-of-a-qa-in-a-devops-environment/","series":null,"tags":["CICD"],"title":"What is the role of a QA in a DevOps environment?"},{"categories":["Configuration Management"],"content":"Version control systems are a category of software tools that help a software team manage changes to source code over time\u0026hellip;\nVersion control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members.\n  More about VCS introduction For more about VCS, you can refer to below website:\nVCS Introduction from Atlassian\r","date":"Sep 19, 2020","permalink":"https://ifulltest.github.io/en/posts/what-is-vcs/","series":null,"tags":["CICD"],"title":"What is VCS?"},{"categories":["Project Management"],"content":" QA works with development teams to help ship features quickly and safely. Jira plays a part in QA to do the below works\u0026hellip;  More about Jira for QA More about Jira for QA refer to: Jira Software Server 8.12 documentation\r","date":"Sep 14, 2020","permalink":"https://ifulltest.github.io/en/posts/how-does-a-qa-use-jira/","series":null,"tags":["Jira"],"title":"How does a QA use JIRA?"},{"categories":["Project Management"],"content":"Many Jira alternatives can be chosen for your projects. Some of them are free or free with some conditions. Here is a list of alternatives\u0026hellip;\nJira alternatives    Jira Alternatives Pricing     Asana free with conditions   Assembla    Backlog free with conditions   Basecamp    Binfire    Bitrix24    Bugzilla free   ClickUp free with conditions   Clubhouse    Crocagile    Donedone    Eylean free with conditions   Hive    Hygger free with conditions   Kanbanize    LiquidPlanner    Mavenlink    monday.com    Nifty    nTask free with conditions   Ora.pm    Pivotal Tracker free with conditions   ProofHub free with conditions   QuickBase    Redmine free   SpiraTeam    Target Process free   Trello free with conditions   VersionOne free with conditions   VivifyScrum    Workzone    Wrike free with conditions    More about Jira alternatives More comparison information about these alternatives can refer to the below URL.\n8 Best JIRA Alternatives to Try in 2020 (Free and Paid)\r23 Best Jira- Alternatives for Agile Project Management in 2020\r11 Best JIRA Alternatives In 2020 (Research Done For You)\r","date":"Sep 14, 2020","permalink":"https://ifulltest.github.io/en/posts/what-are-alternatives-to-jira/","series":null,"tags":["Jira"],"title":"What are alternatives to JIRA?"},{"categories":["Configuration Management"],"content":"GitHub repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets – anything your project needs\u0026hellip;\nA demo of the GitHub repository Your project\u0026rsquo;s repository contains all of your project\u0026rsquo;s files and stores each file\u0026rsquo;s revision history. You can also discuss and manage your project\u0026rsquo;s work within the repository. This is a example of a github repository:\nMore about GitHub repository For more about the GitHub repository, you can refer to below website:\nAbout repositories\r Guides for GitHub\r","date":"Sep 14, 2020","permalink":"https://ifulltest.github.io/en/posts/github-repository/","series":null,"tags":["GitHub"],"title":"What is a GitHub repository?"},{"categories":["Project Management"],"content":"Jira Software is built for every member of your software team to plan, track, and release great software\u0026hellip;\nControl each phase of the whole process for multiple projects As is shown above, Jira can control each phase of the whole process for a single project or multiple projects.\n Product roadmap  Ship faster and more reliably by building smarter plans for your team and for your organization.\n Plan  Create user stories and issues, plan sprints, and distribute tasks across your software team.\n Track  Prioritize and discuss your team’s work in full context with complete visibility.\n Release  Ship with confidence and sanity knowing the information you have is always up-to-date.\n Report  Improve team performance based on real-time, visual data that your team can put to use.\n Flexible Customization  Every team has a unique process for shipping software. Use an out-of-the-box workflow, or create one to match the way your team works.\n Flexible Extension  Knowledge management, development workflow, CI/CD, and other extensible plug-ins perform Jira better.\nMore about Jira All the above features make Jira be a competent tool to smooth projects to continue to be successful.\nFor more about the Jira, you can refer to its official website:\nmore-about-Jira\r","date":"Sep 14, 2020","permalink":"https://ifulltest.github.io/en/posts/what-is-the-purpose-of-jira/","series":null,"tags":["Jira"],"title":"What is the purpose of JIRA?"},{"categories":["Functional Test"],"content":"User acceptance testing and usability testing are two easy confusing concepts. But overall, they go from a different perspective\u0026hellip;\nUser Acceptance Testing UAT is the last phase of the software testing process. During UAT, actual software users test the software to make sure it can handle required tasks in real-world scenarios, according to specifications. UAT is one of the final and critical software project procedures that must occur before newly developed software is rolled out to the market.\nUsability Testing Usability testing refers to evaluating a product or service by testing it with representative users. Typically, during a test, participants will try to complete typical tasks while observers watch, listen and takes notes. The goal is to identify any usability problems, collect qualitative and quantitative data and determine the participant\u0026rsquo;s satisfaction with the product.\nThe detailed comparison between Alpha testing and Beta testing is as below:\nTypical Usability Test Scenario  The facilitator will welcome the participant and explain the test session, ask the participant to sign the release form, and ask any pre-test or demographic questions. The facilitator explains thinking aloud and asks if the participant has any additional questions. The facilitator explains where to start. The participant reads the task scenario aloud and begins working on the scenario while they think aloud. The note-takers take notes of the participant’s behaviours, comments, errors and completion (success or failure) on each task. The session continues until all task scenarios are completed or time allotted has elapsed. The facilitator either asks the end-of session subjective questions or sends them to an online survey, thanks the participant, gives the participant the agreed-on incentive, and escorts them from the testing environment. ","date":"Sep 13, 2020","permalink":"https://ifulltest.github.io/en/posts/difference-between-uat-and-usability-test/","series":null,"tags":["Test Basis"],"title":"Difference between UAT and usability testing?"},{"categories":["Functional Test"],"content":"Agile Scrum is a practice that helps continuous iteration of development and testing in the software development process. Unlike the Waterfall model, some features of Agile Scrum helps to solve the problems that traditional software development models cannot conquered\u0026hellip;.\nPros of Agile Scrum compares to traditional development models  Users are involved in software development, the correct decisions are made in the project very early. It is a continuous iteration of development and testing in the software development process. Concurrently performs developing and testing, more efficient than traditional software development models. Users get a first-hand view and a sense of ownership of the venture. It is more flexible than traditional software development models. The feature of embracing change makes it obviously differentiate with traditional models, which is fear to make the change. More face-to-face interaction with each other than paying all attention to specifications file. Easier to visualize the program in its entirety\u0026hellip; ","date":"Sep 13, 2020","permalink":"https://ifulltest.github.io/en/posts/scrum-helps-software-development-models/","series":null,"tags":["Agile Basis"],"title":"How Agile Scrum Helps Solve The Problems In Traditional Software Development Models?"},{"categories":["Project Management"],"content":"Some of the practices on different types of Agile frameworks bring significant improvement after the failure of the traditional development model. Such as Scrum, Extreme Programming, Kan ban, Lean, Feature-Driven Development, Dynamic System Development, Crystal\u0026hellip;\nScrum Scrum focuses on breaking a project down into sprints, and only planning and managing one sprint at a time. It also has unique project roles, including scrum master, product owner, and development team. It is similar to Kanban in many ways.\nA typical Scrum framework is as below:\nExtreme Programming XP planning addresses two key questions: predicting what will be accomplished by the due date, and determining what to do next.\nThere are two key planning steps in XP: release planning, and iteration planning.\nXP 12 core practices are as below:\nKan ban Kanban uses incremental improvements to continuously add parts or features until such time that the product is fit to be delivered. It allows the development team to visualize their entire workflow. The development process is generally broken down into multiple problems and is managed using a task board.\nThe Kanan 6 core practies are as below:\nLean Lean is a way of working which focuses on the removal of waste from a process.\nThe Lean 7 core principles are as below:\nFeature-Driven Development Feature-Driven Development (FDD) involved creating software models every two weeks and requires a development and design plan for every software model feature.\nIt\u0026rsquo;s main purpose is to deliver tangible, working software repeatedly in a timely manner. The advantage of using FDD is that it is scalable even to large teams due to the concept of ‘just enough design initially’ (JEDI).\nThe FDD 5 basic activies are as below:\nDynamic System Development DSDM is an Agile method that focuses on the full project lifecycle. It is an iterative approach to software development. The framework is built on four principles: feasibility and business study, functional model and prototype iteration, design and build iteration, and implementation.\nThe DSDM 9 principles are as below:\nCrystal Crystal methodology is one of the most lightweight and flexible approaches to develop software. It is color-coded including Clear, Crystal Yellow, Crystal Orange.\nThe Crystal Clear 7 properties are as below:\n","date":"Sep 13, 2020","permalink":"https://ifulltest.github.io/en/posts/different-agile-methodology/","series":null,"tags":["Agile Basis"],"title":"What are different frameworks within Agile methodology?"},{"categories":["Functional Test"],"content":"The waterfall model is the earliest SDLC \rapproach that was used for software development. It divide the whole process of software development into separate phases. The outcome of one phase acts as the input for the next phase sequentially\u0026hellip;\nProblems with waterfall model  No workable code to be tested up to the last few steps of the process. Changing requirements are unwelcome. Therefore, it will be impractical to use the waterfall model approach in such situations. Project scope changing too frequently will cause expensive delays and drastically change the required output. Test work goes in the last stage. It\u0026rsquo;s hard to troubleshoot when finding a comprehensive issue. All surround by specifications file, it is difficult to visualize the program in its entirety. ","date":"Sep 13, 2020","permalink":"https://ifulltest.github.io/en/posts/problems-of-waterfall-model/","series":null,"tags":["Agile Basis"],"title":"What are the real life problems with traditional way of waterfall model?"},{"categories":["Project Management"],"content":"This article focus on the similarity and difference between Scrum and Kanban. As to the concept and basic featues of Scrum and Kanban, can refer to \u0026hellip;\nConcept of Scrum and Kanban The basic concept of Scrum and Kanban refer to: What are different frameworks within Agile methodology?\rThe similarity between Scrum and Kanban Both are Lean and Agile.\nBothe use pull sheduling.\nBoth limi WIP.\nBoth use transparency to drive process improvement.\nBothe are based on self-organizing teams.\nBoth require breaking the work into pieces.\nBoth continuously optimize its release plan based on empirical data.\nThe difference between Scrum and Kanban ","date":"Sep 13, 2020","permalink":"https://ifulltest.github.io/en/posts/difference-between-scrum-and-kanban/","series":null,"tags":["Agile Basis"],"title":"What are the similarity and difference between Scrum and Kanban?"},{"categories":["Functional Test"],"content":"Regression testing will be performed after functional modification or bug is fixed. These two activities may damage at a different extent to other functions that are related to the function need to be modified or repaired\u0026hellip;\nRegression Testing Demo The demo is shown above. Initially, we already have the Mastercard to make the payment.\nNow we add the Paypal as a new mode of payment. We have to test for Mastercard at the whole trading chain to ensure the new payment mode will not impact the old payment mode.\nThat\u0026rsquo;s what we called the regression testing.\n","date":"Sep 13, 2020","permalink":"https://ifulltest.github.io/en/posts/what-is-regression-testing-with-example/","series":null,"tags":["Test Basis"],"title":"What is regression testing with example?"},{"categories":["Functional Test"],"content":"  Alpha testing is performed in the controlled developing environment by real users but not internal developers or testers. It is often going after finishing a module or the whole system.\nBeta testing is performed in the uncontrolled external environment by real users. It is often going after the stable version of Alpha testing\u0026hellip;\n   The detailed comparison between Alpha testing and Beta testing is as below:  ","date":"Sep 12, 2020","permalink":"https://ifulltest.github.io/en/posts/difference-between-alpha-and-beta-testing/","series":null,"tags":["Test Basis"],"title":"Difference between alpha and beta testing?"},{"categories":["Functional Test"],"content":"Severity indicates the degree of damage defects impact to quality.Priority indicates the order to fix defects.\nSeverity and priority as two crucial aspects to defects; have some distinctions and connections.\nIn general, high severity often with high priority, but that is not exactly one-to-one correspondence\u0026hellip;\nSeverity Classification Severity is more from the user view to be defined.\n  Critical\n​ Errors result in complete failure.\n  Major\n​ Major defects result in system collapses or crashes, yet a few functionalities that remain workable.\n  Minor\n​ Defects have an impact on the non-critical path of the product or minor functions. It can cause some malfunction but will still keep the software up and running.\n  Trivial\n​ Errors do not cause malfunctions by impacting any data or function, but still have space to improve.\n  Priority Classification Priority is more from the internal view, such as the product designer or project manager, to be defined.\n  Urgent\n​ Must be fixed immediately / in the next build.\n  High\n​ Must be fixed in any of the upcoming builds but should be included in the release.\n  Medium\n​ May be fixed after the release / in the next release.\n  Low\n​ May or may not be fixed at all.\n  Different companies will define the severity and priority by themselves based on the real situation for their business.\n","date":"Sep 12, 2020","permalink":"https://ifulltest.github.io/en/posts/determine-defect-the-priority-and-severity/","series":null,"tags":["Test Basis"],"title":"How do you determine priority and severity of a defect?"},{"categories":["Functional Test"],"content":"As is shown below, generally including 4 classes of test conditions to expend test cases.\nThey are: valid verification, invalid verification, user interface capabilities, user experience capabilities\u0026hellip;\n The demo case of different test conditions has been listed in the above picture. ","date":"Sep 12, 2020","permalink":"https://ifulltest.github.io/en/posts/writing-conditions-and-cases-for-new-func/","series":null,"tags":["Test Basis"],"title":"How do you go about writing test conditions and cases for new functionality?"},{"categories":["Functional Test"],"content":"Defects related activities mainly includes: select defect tracking tool, log defects, track and close defects, retrospect defect report\u0026hellip;\n  to select defect tracking tool\n​ To find a appropriate defect tracking tool would be the first important thing before tester log defects. There are there kinds of defects tracking tools can choose.\n  to log defects\n​ To log defects, must has some necessary attributes included in them. Such as defect id, defect summary, defect description(includes test data), priority, severity, assignee, status, expected solving date, etc.\n  to track and close defects\n​ The process of track and close defects is the best way to know your product from frequent discussion among related co-workers.\n  to retrospect defect report\n​ This phase is often underestimated by the company, but it truly helps different IT roles improve themselves for the next iteration.\n ","date":"Sep 12, 2020","permalink":"https://ifulltest.github.io/en/posts/how-do-you-log-defects/","series":null,"tags":["Test Basis"],"title":"How do you log defects?"},{"categories":["Functional Test"],"content":"The functional test is from various aspects to measure whether the software is ready to deliver to the business world\u0026hellip;\n  Unit Testing Unit testing as the smallest inseparable unit; it can be a single action or an available API for a component.\nComponent Testing Component testing aims to focus on the functionality and usability of an independent component.\nSmoke Testing Smoke testing is often happened on new building version, to use it quickly to verify the available baseline of the software.\nIntegration Testing Integration testing focuses not only on the individual component or module but also on the interactive part when different components integrated together.\nRegression Testing Regression testing is more like a test based on system-level. Make sure new features or functions will not break any existing functionality.\nSanity Testing When making sure new features or fixtures will not impact any other functions, the build version is stable, we execute the sanity test first. It is a subset of regression testing. When the sanity test passed, we move further to system testing.\nSystem Testing System testing is performed after the stage of integration. It will run a complete test on the integrated system to make all the preparations before the use acceptance testing.\nUser Acceptance Testing User acceptance testing is the last step after system testing to deliver software to the real-world.\n ","date":"Sep 12, 2020","permalink":"https://ifulltest.github.io/en/posts/different-types-of-functional-testing/","series":null,"tags":["Test Basis"],"title":"What are different types of functional testing?"},{"categories":["Functional Test"],"content":"The software will experience unit testing, integration testing, system testing, acceptance testing to be delivered to the real-world. What\u0026rsquo;s the difference between integration testing, system testing, and end-to-end testing?\nIntegration Testing Integration testing focuses not only on the individual component or module but also on the interactive part when differents components intergrated together. When all the integration testing passed, we will go to system testing.\nSystem Testing System testing is performed after the stage of integration. It will run a complete test on the integrated system to make all the preparations before using acceptance testing.\nEnd to End Testing End-to-end testing often happens on or after system testing. It not like system testing pays more attention to its own system. End-to-end testing is more like a joint test involving all related systems to ensure the whole business chain will be performed smoothly.\n","date":"Sep 12, 2020","permalink":"https://ifulltest.github.io/en/posts/difference-between-sit-and-e2e-testing/","series":null,"tags":["Test Basis"],"title":"What is the difference between system, integration and E2E testing?"},{"categories":["Functional Test"],"content":"A software normally get developed by business requirement collection, product design, product developing, product test, product deployment, product operating and monitor\u0026hellip;\n To get requirements from different roles, such as Top Management, Product Designer, Market Operator, Customer, Technical Member When requirements passed the feasibility analysis will start to design When then design get involved roles agreed, will start to develop. When pass the baseline testing from the developer, will build to test environment to get the tested version When passed the testing on the test, pre-production, and production environment, will exposure product to clients Periodically collect the feedback for continuously improve or big change for new business strategy. ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/how-does-software-get-developed/","series":null,"tags":["Test Basis"],"title":"How does software get developed?"},{"categories":["Functional Test"],"content":"Clients -\u0026gt; CDN -\u0026gt; Nginx -\u0026gt; Static Date or Dynamic Data or Cache -\u0026gt; SQL Database or NoSQL Database\u0026hellip;\n  Clients request a URL;\n  CDN interpret URL and route to the nearest network;\n  When request safety pass the 1st network, will get to the distribution layer such as Nginx(whatever the public cloud or private cloud);\n  The Nginx cluster will distribute request basing on what type it belongs to:\n​\tThe static request will fetch data from static server.\n​\tThe dynamic request will fetch data from the app server base on what business type it belongs to.\n​\tThe hot data are preferable store in a cache server such as Redis.\n  When a request pass to the app server will get a series of verification when logically is safety, will select related data from the database.\n ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/how-does-software-get-hosted/","series":null,"tags":["Test Basis"],"title":"How does software get hosted?"},{"categories":["Functional Test"],"content":"As is shown below, when a new requirement coming, Normally we will do a static check, test design, test preparation, then start a series of checks and test activities\u0026hellip;\nTo Understand Features from PRD   To Find the 1st Impression About New Product Features\n​ The PRD is the first impression you have for a new feature. The upcoming test activities will go around this Doc.\n  To Mark Unclear Or Unstable Requirement Design\n​ As early as you can to find unclear requirement design, that will save more cost when it will be found in the later phase.\n​ Also to detect some unstable or risky requirements in the phase of requirement design, then mark down and track for it.\n  To Start Your Design   To Design Your Test Cases\n​ Statically to design test cases may be boring, but a necessary part for you to clear your mind.\n  To Design Your Test Data\n​ Test data may classify to 2 classes:\n​ 1st is the pre-preparation data, which is not directly for testing the new feature, but you have to create in advance.\n​ 2nd is the real-time data, which are with your test cases move forward they are created at the same time.\n  To Design Your Test Scripts\n​ At the first version publishing the new feature to be tested, may don\u0026rsquo;t have enough time to develop automation scripts.\n​ So the best is to prepare it as early as you can.\n  To Start Your Test Preparation   To Collect the Environment Info\n​ If related environments are new to the new feature, will need you to collect env info before testing.\n  To Close Watch on The Change of PRD or Development\n​ To track those unstable requirement points, so that to make sure your test preparation works are valid.\n  To Prepare the Basic Frame of Test Script\n​ Don\u0026rsquo;t need to develop a workable script at this stage. Try to prepare the basic script frame and code.\n  To Start Your Test   To Check the Environment\n​ Often block your testing to start is your environment, to check it fist, and quickly report env issue to related co-workers.\n  To Set the Test Data\n​ Once environments are fine, to quickly set up pre-preparation test data for your subsequent testing.\n  To Run Your Smoke Test Cases\n​ To quickly run given smoke test cases, to find some blocking bugs, and sent them to related co-workers to solve.\n  To Run Your Sanity Test Cases\n​ Once the smoke test passed, you can start to run your sanity test cases for the new feature.\n​ Also, it may fail in some key data chain for passing the new feature, to report it and track until to be fixed.\n  To Run Your System Test Cases\n​ Once your new feature testing finished, you need to continue your system test cases.\n​ If you and related co-works have confirmed some function will not be impacted, you could just quickly run the regression test.\n​ The best way is to gradually accumulate automation test scripts to help you do the system test.\n  To Report Test bugs\n​ To report test bugs will come through the whole test process from product design to test execution\n  To Run Your Regression Test Cases\n​ To let your automation scripts do the test for old function.\n​ To manually do the regression test for the new feature.\n  To Complete Your Test Scripts\n​ CICD also makes sense to test. When the first version for the new feature you don\u0026rsquo;t enough time to complete test scripts.\n​ You can finish them before the next version. So that all the new feature test cases will be included in your test scripts.\n ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/the-process-of-testing-a-new-requirement/","series":null,"tags":["Test Basis"],"title":"How would you go about testing a new requirement and what's the process?"},{"categories":["Functional Test"],"content":"The differences are shown below, normally will have development, test, pre-production, and production environment for delivering software\u0026hellip;\n The responsibilities of different environments have been listed in the above picture. ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/different-environments-in-development-team/","series":null,"tags":["Test Basis"],"title":"What are the different environments in a software development team?"},{"categories":["Functional Test"],"content":"As is shown below, a typical 3-tiers software application includes a presentation layer, business layer, and data layer\u0026hellip;\n  Presentation layer\n​ The presentation layer receives a client request and responds to the client with structured data.\n  Business layer\n​ The business layer controls the business logic, while the request is in accordance with logic rules will fetch data from the data layer\n​ Also if the request is to fetch some hot data, it will be passed and quickly to get data from the non-persistent data layer.\n  Data layer\n​ The data layer restores some configuration info, user info, business info, and log info.\n​ The most expensive part of an application is the data. The application fight for fetching data from the business world, then based on the data to make the business decision for the next step.\n ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/different-layers-communicate-in-an-app/","series":null,"tags":["Test Basis"],"title":"What are the different layers in an app and how do they communicate with each other?"},{"categories":["DevOps"],"content":"Normally, we classify cloud service to private cloud service, public cloud service, and hybrid cloud service\u0026hellip;\nPrivate cloud service   Need to have a professional operations team.\n  Not flexible.\n  Increased maintenance cost.\n  More safety data comparing to public cloud service.\n  Public cloud service:   Fast to get infrastructure-related service without too high request to the knowledge of operations.\n  Appropriate to the initial stage for a new company.\n  Less safety than private cloud service.\n  Hybrid cloud service   More proper to be as a transient solution to a company want to migrate service from one side to another side\n  The sensitive data store in private cloud service, others in public, keep flexible to extend meanwhile more safety.\n ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/what-is-a-cloud-service/","series":null,"tags":["DevOps Basis"],"title":"What is a cloud service?"},{"categories":["Functional Test"],"content":"The Software Development Life Cycle (SDLC) refers to a methodology with clearly defined processes for creating high-quality software. in detail, the SDLC methodology focuses on the following phases of software development\u0026hellip;\n Requirement analysis Planning Software design such as architectural design Software development Testing Deployment ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/what-is-sdlc/","series":null,"tags":["Test Basis"],"title":"What is SDLC?"},{"categories":["Functional Test"],"content":"Software Testing Life Cycle (STLC) refers to a testing process which has specific steps to be executed in a definite sequence to ensure that the quality goals have been met. In the STLC process, each activity is carried out in a planned and systematic way. Each phase has different goals and deliverables. the STLC methodology focuses on the following phases of software development\u0026hellip;\n Requirements phase Planning Phase Analysis phase Design Phase Implementation Phase Execution Phase Conclusion Phase Closure Phase ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/what-is-stlc/","series":null,"tags":["Test Basis"],"title":"What is STLC?"},{"categories":["Functional Test"],"content":"The typical classification of environment for IT products is as below. Separate environments will make sure different roles using their own environment. To focus on different test purposes.\nAlso, will do their test work parallelly, improve efficiency, reduce disturbance from each other\u0026hellip;\n  dev environment\n​ Mainly faced to developers, the version changed more frequently. External users cannot reach.\n​ This environment is used to test the basic logic for a function, and finish the unit test as a baseline.\n  test environment\n​ Mainly faced to testers, the version is relatively stable. External users cannot reach.\n​ This environment is used to test the integrated or system function. A bunch of bugs will be detected.\n  pre-production environment\n​ Mainly faced to testers, the related configuration tries hard to keep the same with the production.\n​ External users cannot visit.\n​ This environment is used to test the integrated function or system function.\n  production environment\n​ Mainly faced to testers, product designers, and related users, External users can reach.\n​ Still will find bugs, and normally caused by configuration.\n ","date":"Sep 11, 2020","permalink":"https://ifulltest.github.io/en/posts/why-do-we-need-a-separate-test-environment/","series":null,"tags":["Test Basis"],"title":"Why do we need a separate test environment?"},{"categories":null,"content":"Who Am I  10+ years old testing veteran. Expertise in performance testing, automation testing, knowledge sharing, and testing team-building. Big love delicious food, karaoke, NBA games, and Hollywood blockbuster! My favourite singers: Michael Jackson, Whitney Houston, Mariah Carey. My favourite movie stars: Tom Hanks, Anthony Hopkins. My favourite sports stars: Mike Jordan, Kobe Bryant, Stephen Curry, Ronaldo.  What Can Be Found Here   The author expects to gradually cover the full-stack testing knowledge, such as manual testing, API testing, UI testing, mobile testing, performance testing, DevOps, and clouds. It would also benefit you in the covering process.\n  You could also rest your brain by browsing the original or forwarded learning experiences about English, migrant stories, philosophy, and religion on this website.\n  Whom I Want To Connect With  Bloggers in the testing or IT domain. Newcomers or those who are trying to make the switch to the testing domain. Testing engineers who are expanding their testing technical stack. Those who are interested in overseas life. ","date":"Sep 1, 2020","permalink":"https://ifulltest.github.io/en/posts/about-me/","series":["User Manual"],"tags":null,"title":"About Me"},{"categories":null,"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0.\rHugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub\r.\n","date":"Feb 28, 2019","permalink":"https://ifulltest.github.io/en/about/","series":null,"tags":null,"title":"About"}]