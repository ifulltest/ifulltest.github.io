[{"categories":null,"content":"我是谁  10 年以上测试老兵。擅长性能测试、自动化测试、知识共享和测试团队建设。 大爱美食、卡拉OK、NBA比赛、好莱坞大片！ 我最喜欢的歌手：迈克尔杰克逊、惠特尼休斯顿、玛丽亚凯莉。 我最喜欢的电影明星：汤姆汉克斯、安东尼霍普金斯。 我最喜欢的体育明星：迈克乔丹、科比布莱恩特、斯蒂芬库里、罗纳尔多 \u0026hellip;  在这里可以找到什么  作者期望逐步覆盖全栈测试知识，如手工测试、API测试、UI测试、移动测试、性能测试、DevOps、云等。这也将使您在这个覆盖过程中受益。 您还可以通过浏览本网站上有关英语、移民故事、哲学和宗教的原创或转发的学习经验以休息您的大脑。  我想与谁产生连接  测试或 IT 领域的博主。 新人或那些试图转行到测试领域的人。 正在扩展测试技术栈的测试工程师们。 对海外生活感兴趣的人。 ","date":"2020-09-01","permalink":"https://ifulltest.github.io/zh-cn/posts/about-me/","series":["User Manual"],"tags":null,"title":"关于我"},{"categories":null,"content":"当你第一次上这个网站时，网站路线图可以引导你快速了解网站的结构和作者的分类习惯……\n本网站的基本结构如上图：\n功能性:  语言切换器 - 用于在英文和中文博客之间切换。   分类切换器 - 从不同的角度对站点中的所有文章进行分类，例如专栏、种类、标签、归档文档\u0026hellip;\u0026hellip;   在站点中搜索 - 通过在本网站内搜索关键字来获取相关博客。   社交链接 - 通过其他各种社交链接与作者取得联系。   分享和收藏 - 通过 Ctrl+D 将您喜爱的文章加入书签到本地浏览器，或将文章分享到不同的社交媒体。   文章评论 - 让您在本网站内直接与作者交流。  专栏:  用户手册 - 提供有关作者和网站的必要信息。 移民故事 - 将在新西兰发布或转发移民故事。（计划中……） 宗教与哲学——将发布或转发与宗教或哲学相关的优秀文章。（计划中……） Postman API Automation Practice - 是一系列 Postman API 自动化实践。（即将到来……） Cypress UI Automation Practice - 是一系列 Cypress UI 自动化实践。（计划中……） Appium Mobile Automation Practice - 是一系列 Appium 移动自动化实践。（计划中……） JMeter Performance Testing Practice - 是一系列 JMeter 性能测试实践。（计划中……）  类别： 不像‘专栏’，‘种类’栏目会收集更多不系统的知识点，这些文章的一部分有可能再将来成为专栏的组成部分。\n 功能测试 - 与功能测试相关的原创或转发文章。 API 自动化 - 与 API 自动化测试相关的原创或转发文章。 UI 自动化 - 与 UI 自动化测试相关的原创或转发文章。 移动自动化 - 与移动自动化测试相关的原创或转发文章。 性能测试 - 与性能测试相关的原创或转发文章。 DevOps - 与 DevOps 相关的原创或转发文章。  标签： “标签”的分类通常归结为特定工具。“标签”下的文章知识点清晰，任何人都可以转载。\n Postman - 与API自动化测试工具Postman相关的原创或转发文章。 Cypress - 与UI自动化测试工具 Cypress 相关的原创或转发的文章。 Cucumber - 与BDD测试工具Cucumber相关的原创或转发的文章。 Selenium - 与UI自动化测试工具 Selenium 相关的原创或转发的文章。 Appium - 与 移动端UI自动化测试工具Appium 相关的原创或转发文章。 JMeter - 与性能测试或API自动化测试工具 JMeter 相关的原创或转发文章。 Jenkins - 与 CICD工具Jenkins 相关的原创或转发文章。  存档： “存档”分类将网站内所有文章存档，并按发布时间显示。\n","date":"2021-01-11","permalink":"https://ifulltest.github.io/zh-cn/posts/site-road-map/","series":["User Manual"],"tags":null,"title":"网站路线图"},{"categories":null,"content":"写这个系列的原因是什么？   1、用于测试技能演示。   作者希望通过一系列自动化测试实践分享来展示他在 API、UI、移动自动化测试领域的综合技能。\n  2、用于指导自动化测试新手。   选择一款流行的产品来演示其API自动化测试过程，将是上述人员快速进入自动化测试领域以节省时间的一种简便方法。\n  3、互相促进、共同进步。   该实践的技术架构图 该实践的全景图(点我看大图\r) 这个系列之后的下一步是什么？ 本系列主要涵盖从业务和API分析、API测试脚本技巧、API测试场景到CI流程的postman实践。\n这只是全栈测试的一小部分。\n在本系列之后，作者将继续发布其他自动化测试实践。如：\nCypress + Cucumber UI 自动化测试实践，\nAppium移动自动化测试实践，\nJMeter + Grafana\u0026amp;Prometheus\u0026amp;InfluxDB 性能测试实践，\nJenkins / Azure CI 流程，\nDocker 应用程序。\n敬请关注。\nTrade Me沙箱是什么？ Trade Me\r是新西兰最大的在线拍卖和分类广告网站。\nTrade Me 沙盒环境是 Trade Me 网站、API 和数据库的完全独立副本。\n它旨在允许您在安全环境中测试潜在的破坏性 API 操作。\n为什么选择 Trade Me？ 当我想选择一个产品来练习和展示我的自动化演示时，我会考虑一些因素：\n 这个产品是否流行并被大众广泛使用？ 该产品的业务复杂性是否足以让我涵盖不同类型的测试实践？ 该产品是否有足够明确的规范以允许我开发演示？ 看到我demo的实践者可以在同一个产品环境中复现那些操作吗？  Trade Me 完全满足了我的上述所有考虑。\nTrade Me沙箱官方材料   Trade Me沙箱网站（点我）\r。     Trade Me开发文档入口（点我）\r。     Trade Me入门（点我）\r。     Trade Me API概览（点我）\r。     Trade Me注册一个沙箱应用（点我）\r。     Trade Me API参考（点我）\r。   API测试演示前的准备工作 1.概述  创建个人帐户。 注册您的 API 应用程序 - 获取Consumer Key和Consumer Secret。 获得批准的身份验证 - 获得 OAuth Token 和 OAuth Token Secret。 用于验证OAuth授权工作生效的连通性测试。  2.注册Trade Me沙箱用户（点我）\r 3.注册您的API应用（点我）\r 登录 -\u0026gt; View My Trade Me -\u0026gt; My Trade Me API applications -\u0026gt; Developer options -\u0026gt; Register a new application -\u0026gt; 填写信息并点击\u0026rsquo;Register' (如果注册成功会得到consumer key 和 consumer secret)\n  我的Trade Me（点我）\r    我的Trade Me API应用（点我）\r    开发者选项（点我）\r     注册一个新的应用程序（点我）\r     获得consumer key和consumer secret   如果注册成功，将获得consumer key和consumer secret。\n4.认证（点我）\r 带有消费者密钥和消费者秘密的认证页面，点击\u0026rsquo;生成令牌'-\u0026gt;允许\n  生成访问令牌   注意: 如果您在“注册一个新的应用程序”步骤中没有给出正确的回调域，则此生成令牌操作将失败，如下页所示。\n参考回调域可以是： https://developer.trademe.co.nz\r参考回调网址可以是： https://developer.trademe.co.nz/callback\r  允许您的身份验证     获取您的令牌（返回**身份验证页面\r**可以看到它）   Trade Me第一个API连通性测试的演示 当我们完成准备工作后，我们可以挑选两种类型的交易来测试API的连通性。\n第一个交易不需要认证，第二个交易需要认证。\n我们将使用 API 测试工具 Postman 来验证连通性。\n  如何安装Postman？   Postman安装是指：如何安装Postman？\r\n  沙箱环境中的所有 API 域是：api.tmsandbox.co.nz，请参阅测试您的应用程序\r     API - 检索一般类别信息 (不需要身份验证信息)   API - 检索一般类别信息的参考接口文档（点我）\r 使用 Postman 测试连通性\n  API - 检索关注列表 (需要身份验证信息)   API - 检索关注列表参考接口文档（点我）\r 使用 Postman 测试连通性\n注意:\n当您确实想要贯穿上游和下游交易时，您可能需要自行组装网络请求。\n然后你需要注意一个名为oauth_signature的域, 它是由下面的子域组成的：\noauth_signature = Consumer Secret%26OAuth Token Secret\n","date":"2021-07-20","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-first-demo/","series":["Postman API Automation Practice"],"tags":["Postman","Cypress"],"title":"Trade Me-1-API测试的第一个演示 | Postman接口自动化测试"},{"categories":null,"content":"如何挑选典型的交易？ 在编写 API 测试脚本之前，我们需要从 TradeMe 中挑选一些典型的交易。\n我们选择的这些事务更好地涵盖了不同类型的请求，例如get、post、delete。\n这些交易的一部分应该在业务层面相互关联。\nAPI -检索一般类别\r   业务范围选择：获取所有子类别。   API 功能：检索全部或部分 Trade Me 类别树。   前端页面     关键请求字段     关键响应字段 - 类别树。           Name String or null 类别的名称。   Number String or null 类别的唯一标识符，例如“0004-0369-6076-”。我们计划将其更改为数字标识符（例如“6076”），因此您应该确保您可以处理这两种格式。   Path String or null 此类别的完整 URL 路径，例如“/Home-living/Beds-bedroom-furniture/Bedside-tables”。   Subcategories Collection of or null 属于该类别的子类别列表。   … … …    更多参考：检索一般类别\r\n  示例请求   GET https://api.tmsandbox.co.nz/v1/Categories.JSON?depth=1\n  示例响应   { \u0026#34;Name\u0026#34;: \u0026#34;Root\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Subcategories\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Trade Me Motors\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0001-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Trade-Me-Motors\u0026#34;, \u0026#34;HasClassifieds\u0026#34;: true, \u0026#34;AreaOfBusiness\u0026#34;: 3, \u0026#34;CanHaveSecondCategory\u0026#34;: true, \u0026#34;CanBeSecondCategory\u0026#34;: true, \u0026#34;IsLeaf\u0026#34;: false }, { \u0026#34;Name\u0026#34;: \u0026#34;Trade Me Property\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0350-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Trade-Me-Property\u0026#34;, \u0026#34;HasClassifieds\u0026#34;: true, \u0026#34;AreaOfBusiness\u0026#34;: 2, \u0026#34;IsLeaf\u0026#34;: false }, ... ], \u0026#34;AreaOfBusiness\u0026#34;: 0, \u0026#34;IsLeaf\u0026#34;: false } API -检索您的监视列表\r   业务范围选择   链式组合交易\n检索您的监视列表（我在这里）\r-\u0026gt;从您的监视列表中删除列表\r-\u0026gt;检索即将关闭的列表\r-\u0026gt;将列表添加到您的监视列表\r查询监视列表中的项目。\n  API 功能：检索经过身份验证的用户监视列表中的项目列表。   前端页面     关键请求字段     关键响应字段 -经过身份验证的用户的监视列表。            TotalCount Integer 集合中的结果总数。可以大于返回结果的数量。    Page Integer 当前结果页的索引（从 1 开始）。    PageSize Integer 当前页面中的结果数。    List Collection of or null 当前页面中的结果列表。     ListingId 长整数 商家信息的 ID。    BidCount 整数 项目的出价数量。   … … … …    更多参考：检索您的监视列表\r\n  示例请求   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Watchlist/All.JSON\n  示例响应   { \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149294406, \u0026#34;Title\u0026#34;: \u0026#34;11x Assorted T-Handle Hex Allen Keys\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;5964-5999-6004-9825-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 1.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;\\/Date(1626749989730)\\/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;\\/Date(1626922789730)\\/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;\\/Date(1626855531548)\\/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;\\/Building-renovation\\/Tools\\/Hand-tools\\/Sets-kits\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https:\\/\\/images.tmsandbox.co.nz\\/photoserver\\/thumb\\/8152697.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 8152697, \u0026#34;RegionId\u0026#34;: 16, \u0026#34;Region\u0026#34;: \u0026#34;Canterbury\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Christchurch City\u0026#34;, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;\\/Date(0)\\/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Sets \u0026amp; kits\u0026#34;, \u0026#34;Attributes\u0026#34;: [ ], \u0026#34;Subtitle\u0026#34;: \u0026#34;SKYLARC’S WINDFLOW TECHNOLOGY ONLINE AUCTION\u0026#34;, \u0026#34;MinimumNextBidAmount\u0026#34;: 1.0000, \u0026#34;IsOnWatchList\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$1.00\u0026#34;, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [ ], \u0026#34;Tags\u0026#34;: [ ] }, \u0026#34;IsDealer\u0026#34;: false, \u0026#34;IsLeading\u0026#34;: false, \u0026#34;IsOutbid\u0026#34;: false, \u0026#34;IsInCart\u0026#34;: false, \u0026#34;MemberBidShippingOption\u0026#34;: 0 } ], \u0026#34;FoundCategories\u0026#34;: [ { \u0026#34;Count\u0026#34;: 1, \u0026#34;Category\u0026#34;: \u0026#34;5964-\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;Building \u0026amp; renovation\u0026#34;, \u0026#34;CategoryId\u0026#34;: 5964 } ] } API -从您的监视列表中删除列表\r   业务范围选择   链式组合交易\n检索您的监视列表\r-\u0026gt;从您的监视列表中删除列表（我在这里）\r-\u0026gt;检索即将关闭的列表\r-\u0026gt;将列表添加到您的监视列表\r选择 API - Retrieve your watchlist as pre-request 以获取所有要删除的项目\n删除监视列表中的所有项目\n  API 功能：从经过身份验证的用户的监视列表中删除列表。   前端页面     关键请求字段     关键响应字段 - 有关操作是否成功的详细信息。   尝试删除不存在或不在监视列表中的拍卖不会产生错误。\n          Success Boolean 指示操作是否成功。   Description String or null 错误的描述，如果操作失败。    更多参考：从您的监视列表中删除列表\r\n  示例请求   DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/0000000000.JSON\n  示例响应   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } API -检索即将关闭的列表\r   业务范围选择   链式组合交易\n检索您的监视列表\r-\u0026gt;从您的监视列表中删除列表\r-\u0026gt;检索即将关闭的列表（我在这里）\r-\u0026gt;将列表添加到您的监视列表\r在即将关闭的列表的第一页获取所有项目。\n  API 功能：检索全国或单个地区即将关闭的项目。   前端页面     关键请求字段   更多参考：检索即将关闭的列表\r\n  关键响应字段            TotalCount Integer 集合中的结果总数。可以大于返回结果的数量。    TotalCountTruncated Boolean 如果结果总数超过允许的最大值并被截断，则为真。    Page Integer 当前结果页的索引（从 1 开始）。    PageSize Integer 当前页面中的结果数。    List Collection of or null 当前页面中的结果列表。     ListingIdv 长整数 商家信息的 ID。   … … … …    更多参考：检索即将关闭的列表\r\n  示例请求   GET https://api.tmsandbox.co.nz/v1/Listings/closure.JSON?rows=1000\r  示例响应   { \u0026#34;TotalCount\u0026#34;: 250, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 250, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149292446, \u0026#34;Title\u0026#34;: \u0026#34;fox drawing\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0339-5487-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;BuyNowPrice\u0026#34;: 1.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1626323575513)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1626928375513)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1626926636817)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Art/Digital-art\u0026#34;, \u0026#34;Region\u0026#34;: \u0026#34;Canterbury\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Christchurch City\u0026#34;, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$1.00 per item\u0026#34;, \u0026#34;PromotionId\u0026#34;: 1, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;MemberId\u0026#34;: 4007247 }, ... ] } API -将列表添加到您的监视列表\r   业务选择   链式组合交易\n检索您的监视列表\r-\u0026gt;从您的监视列表中删除列表\r-\u0026gt;检索即将关闭的列表\r-\u0026gt;将列表添加到您的监视列表（我在这里）\r选择 API - 检索即将关闭的列表作为预请求，以获取即将关闭列表的第一页上的所有项目。\n将上述项目中的 1 个随机添加到监视列表中。\n  API 功能：将列表添加到经过身份验证的用户的监视列表。   前端页面     关键请求字段   更多参考：将列表添加到您的监视列表\r\n  关键响应字段 - 有关操作是否成功的详细信息。           Success Boolean 指示操作是否成功。   Description String or null 错误的描述，如果操作失败。      示例请求   POST https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/2149292722.JSON\n  示例响应   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } API -检索您赢得的物品\r   业务选择   链式组合交易\n检索您赢得的物品（我在这里）\r-\u0026gt;从您赢得的物品列表中删除购买\r-\u0026gt;常规搜索\r-\u0026gt;检索单个列表的详细信息\r-\u0026gt;使用“立即购买”购买拍卖\r  API 功能：检索经过身份验证的用户的购买清单。   多数量拍卖可以多次购买。\n  前端页面     关键请求字段     关键响应字段 - 经过身份验证的用户已购买的项目列表。            TotalCount Integer 集合中的结果总数。可以大于返回结果的数量。    Page Integer 当前结果页的索引（从 1 开始）。    PageSize Integer 当前页面中的结果数。    List Collection of or null 当前页面中的结果列表。     ListingId 长整数 商家信息的 ID。   … … … …   PurchaseId Integer 标识销售的唯一 ID。    … … … …    更多参考：检索您赢得的物品\r\n  示例请求   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/All.JSON\n  示例响应   { \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149289946, \u0026#34;Title\u0026#34;: \u0026#34;Tankard 72\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0341-6534-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 10.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1625598488240)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1625650049187)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1626932384524)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Crafts/Transfers\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/4548749.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 4548749, \u0026#34;Seller\u0026#34;: { \u0026#34;MemberId\u0026#34;: 4000433, \u0026#34;Nickname\u0026#34;: \u0026#34;junk1b\u0026#34;, \u0026#34;DateAddressVerified\u0026#34;: \u0026#34;/Date(1380798000000)/\u0026#34;, \u0026#34;DateJoined\u0026#34;: \u0026#34;/Date(1343044800000)/\u0026#34;, \u0026#34;Email\u0026#34;: \u0026#34;junk1b@abcde.com\u0026#34;, \u0026#34;UniqueNegative\u0026#34;: 5, \u0026#34;UniquePositive\u0026#34;: 16, \u0026#34;FeedbackCount\u0026#34;: 11, \u0026#34;IsAddressVerified\u0026#34;: true }, \u0026#34;BidCount\u0026#34;: 1, \u0026#34;IsReserveMet\u0026#34;: true, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Transfers\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;Subtitle\u0026#34;: \u0026#34;J1B F4d1111\u0026#34;, \u0026#34;Quantity\u0026#34;: 1, \u0026#34;StatusDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;AuctionAttribute\u0026#34;: \u0026#34;260`TV|3495193540674667286`0\u0026#34;, \u0026#34;BuyerFeedbackPlaced\u0026#34;: 0, \u0026#34;SellerFeedbackPlaced\u0026#34;: 0, \u0026#34;DeliveryId\u0026#34;: 0, \u0026#34;FpoDecisionViaMobile\u0026#34;: false, \u0026#34;HasPaidByCreditCard\u0026#34;: false, \u0026#34;InvoiceId\u0026#34;: 0, \u0026#34;OfferId\u0026#34;: 0, \u0026#34;PaymentInfo\u0026#34;: \u0026#34;NZ Bank Deposit\u0026#34;, \u0026#34;Price\u0026#34;: 20.0000, \u0026#34;SelectedShipping\u0026#34;: \u0026#34;Buyer to pick-up\u0026#34;, \u0026#34;ShippingPrice\u0026#34;: 0, \u0026#34;ShippingType\u0026#34;: 2, \u0026#34;SoldDate\u0026#34;: \u0026#34;/Date(1625650049187)/\u0026#34;, \u0026#34;SoldType\u0026#34;: \u0026#34;BUYNOW\u0026#34;, \u0026#34;PaymentInstructions\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;PurchaseId\u0026#34;: 26180, \u0026#34;ReferenceNumber\u0026#34;: \u0026#34;P26180\u0026#34;, \u0026#34;SubtotalPrice\u0026#34;: 20.0000, \u0026#34;TotalShippingPrice\u0026#34;: 0, \u0026#34;TotalSalePrice\u0026#34;: 20.0000, \u0026#34;TrackedParcels\u0026#34;: [], \u0026#34;TaxSubTotal\u0026#34;: 0.00, \u0026#34;HasPaidByDeferredPayment\u0026#34;: false } ] } API -从您赢得的物品列表中删除购买\r   业务选择   链式组合交易\n检索您赢得的物品\r-\u0026gt;从您赢得的物品列表中删除购买（我在这里）\r-\u0026gt;常规搜索\r-\u0026gt;检索单个列表的详细信息\r-\u0026gt;使用“立即购买”购买拍卖\r选择 API - \u0026lsquo;Retrieve your won items\u0026rsquo; 作为预先请求以获取所有想要删除的赢得的物品\n删除获胜项目列表中的所有获胜项目\n  API 功能：从赢得的项目列表中隐藏一个列表。   前端页面     关键请求字段     关键响应字段 - 有关操作是否成功的详细信息。   请注意，此操作仅在操作完成后在赢得的物品列表中仍然存在购买的情况下才会报告失败。在所有其他情况下，此 API 将报告成功（例如，如果购买 ID 无效或购买已被删除，它将报告成功）。\n          Success Boolean 指示操作是否成功。   Description String or null 错误的描述，如果操作失败。      示例请求   DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/26180.JSON\n  示例响应   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } API -常规搜索\r   业务范围选择   链式组合交易\n检索您赢得的物品\r-\u0026gt;从您赢得的物品列表中删除购买\r-\u0026gt;常规搜索（我在这里）\r-\u0026gt;检索单个列表的详细信息\r-\u0026gt;使用“立即购买”购买拍卖\r通过搜索功能搜索 500 件商品，并仅从下游交易“检索单个列表的详细信息”的响应中选择具有“HasBuyNow”功能和 BuyNowPrice \u0026lt;= $20 的商品以供使用。\n  API 功能：允许您按类别、关键字或这两者的组合搜索 Trade Me 上的列表。   结果集可以通过各种属性进行过滤，包括“立即购买”、“立即付款”、“商品状况”或“卖家”的可用性。\n  前端页面     关键请求字段             page Integer (optional) 要返回的结果集的页码，从 1 开始。默认为 1。   … … …   rows Integer (optional) 每页结果数；也是要返回的最大结果数。对于未经身份验证的请求，最大值为 25，对于经过身份验证的请求，最大值为 500。默认为 25（未认证）或 50（已认证）。   … … …    更多参考：常规搜索\r  关键响应字段 - 搜索结果。              TotalCount Integer 集合中的结果总数。可以大于返回结果的数量。    TotalCountTruncated Boolean 如果结果总数超过允许的最大值并被截断，则为真。    Page Integer 当前结果页的索引（从 1 开始）。    PageSize Integer 当前页面中的结果数。    List Collection of or null 当前页面中的结果列表。     ListingId 长整数 商家信息的 ID。    BuyNowPrice 数字 立即购买价格。    HasBuyNow 布尔值 指示该项目是否有立即购买。   … … … …    更多参考：常规搜索\r  示例请求   GET https://api.tmsandbox.co.nz/v1/Search/General.JSON?buy=All\u0026amp;rows=500\u0026amp;page=4\n  示例响应   { \u0026#34;TotalCount\u0026#34;: 16479, \u0026#34;Page\u0026#34;: 4, \u0026#34;PageSize\u0026#34;: 500, \u0026#34;List\u0026#34;: [ ... { \u0026#34;ListingId\u0026#34;: 2149294614, \u0026#34;Title\u0026#34;: \u0026#34;Cobra Glassware\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0341-0881-4739-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 11.0000, \u0026#34;BuyNowPrice\u0026#34;: 33.0000, ... \u0026#34;HasBuyNow\u0026#34;: true, ... }, ... ] } API -检索单个列表的详细信息\r   业务范围选择   链式组合交易\n检索您赢得的物品\r-\u0026gt;从您赢得的物品列表中删除购买\r-\u0026gt;常规搜索\r-\u0026gt;检索单个列表的详细信息（我在这里）\r-\u0026gt;使用“立即购买”购买拍卖\r从上游交易“从您赢得的物品列表中删除购买\r”中获取具有“立即购买”功能的随机物品 以显示。\n从响应中获取“ShippingId “供下游交易“使用立即购买购买拍卖”\r以使用。\n  API 功能：检索单个列表的详细信息。   前端页面     关键请求字段     关键响应字段 - 列表的详细信息。              ListingId Long Integer 商家信息的 ID。    … … …    ShippingOptions Collection of or null 运输选项列表。     Method 字符串或空 递送方式的名称（例如“NZ Courier”、“Rural Delivery”）。仅当 ShippingType 为自定义时适用。    ShippingId 长整数 运输选项的 ID（在出价或立即购买时使用）。列出项目时不需要。   … … … …    更多参考：检索单个列表的详细信息\r  示例请求   GET https://api.tmsandbox.co.nz/v1/Listings/2149295093.JSON\n  示例响应   { \u0026#34;ListingId\u0026#34;: 2149295093, ... \u0026#34;AllowsPickups\u0026#34;: 3, \u0026#34;ShippingOptions\u0026#34;: [ { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 4.99, \u0026#34;Method\u0026#34;: \u0026#34;nationwide non-rural\u0026#34;, \u0026#34;ShippingId\u0026#34;: 4 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 9.99, \u0026#34;Method\u0026#34;: \u0026#34;rural\u0026#34;, \u0026#34;ShippingId\u0026#34;: 5 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 0, \u0026#34;Method\u0026#34;: \u0026#34;test free shipping\u0026#34;, \u0026#34;ShippingId\u0026#34;: 6 } ], ... } API -使用“立即购买”购买拍卖\r   业务选择   链式组合交易\n检索您赢得的物品\r-\u0026gt;从您赢得的物品列表中删除购买\r-\u0026gt;常规搜索\r-\u0026gt;检索单个列表的详细信息\r-\u0026gt;使用“立即购买”购买拍卖（我在这里）\r从上游交易“常规搜索\r”的响应中获取“ListingId” 作为请求字段之一。\n从上游交易“检索单个列表的详细信息\r”的响应中获取“ShippingId” 作为请求字段之一。\n  API 功能：使用“立即购买”购买商品。   前端页面 - 商品详情页面     前端页面-确认购买页面     前端页面 - 购买详情页面     前端页面 - Won 列表页面（已购买的项目显示在此页面上）     关键请求字段     关键响应字段 - Buy Now 请求的详细信息。              Success Boolean 指示操作是否成功。    Description String or null 错误的描述，如果操作失败。    StatusCode Enumeration 立即购买请求的状态。     Success 0 竞标成功。   … … … …   PurchaseId Long Integer 刚刚购买的 ID。    … … … …    更多参考：使用“立即购买”购买拍卖\r  示例请求   POST https://api.tmsandbox.co.nz/v1/Bidding/BuyNow.JSON\n  示例响应   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Seller\u0026#39;s email owen4@snipesoft.net.nz\u0026#34;, \u0026#34;StatusCode\u0026#34;: 0, \u0026#34;PurchaseId\u0026#34;: 26231 } ","date":"2021-07-23","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-typical-transactions/","series":["Postman API Automation Practice"],"tags":["Postman","Cypress"],"title":"Trade Me-2-典型交易 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 检索全部或部分 Trade Me 类别树。\nAPI - 检索一般类别脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段   关键响应字段 - 类别树。           Name String or null 类别的名称。   Number String or null 类别的唯一标识符，例如“0004-0369-6076-”。我们计划将其更改为数字标识符（例如“6076”），因此您应该确保您可以处理这两种格式。   Path String or null 此类别的完整 URL 路径，例如“/Home-living/Beds-bedroom-furniture/Bedside-tables”。   Subcategories Collection of or null 属于该类别的子类别列表。   … … …    更多 API 规范参考Retrieve general category\r。\n  示例请求   GET https://api.tmsandbox.co.nz/v1/Categories.JSON?depth=1\n  示例响应   { \u0026#34;Name\u0026#34;: \u0026#34;Root\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Subcategories\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Trade Me Motors\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0001-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Trade-Me-Motors\u0026#34;, \u0026#34;HasClassifieds\u0026#34;: true, \u0026#34;AreaOfBusiness\u0026#34;: 3, \u0026#34;CanHaveSecondCategory\u0026#34;: true, \u0026#34;CanBeSecondCategory\u0026#34;: true, \u0026#34;IsLeaf\u0026#34;: false }, { \u0026#34;Name\u0026#34;: \u0026#34;Trade Me Property\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0350-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Trade-Me-Property\u0026#34;, \u0026#34;HasClassifieds\u0026#34;: true, \u0026#34;AreaOfBusiness\u0026#34;: 2, \u0026#34;IsLeaf\u0026#34;: false }, ... ], \u0026#34;AreaOfBusiness\u0026#34;: 0, \u0026#34;IsLeaf\u0026#34;: false } 业务介绍   前端页面 - 转到所有类别页面   首页 \u0026gt; View all categories   前端页面-分类页面     业务范围选择   获取所有子类别。\n  业务验证点   验证查询结果中是否存在特定的子类别，例如“古董和收藏品”。\nAPI测试脚本调试   在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n  组装请求 - \u0026lsquo;检索一般类别\r'   从API规范来看，参数**-depth=1**表示返回类别树的所有子类别。\n所以请求应该是 GET https://api.tmsandbox.co.nz/v1/Categories.JSON?depth=1\n  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;Name\u0026#34;: \u0026#34;Root\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Subcategories\u0026#34;: [ ... { \u0026#34;Name\u0026#34;: \u0026#34;Antiques \u0026amp; collectables\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;0187-\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/Antiques-collectables\u0026#34;, \u0026#34;AreaOfBusiness\u0026#34;: 1, \u0026#34;CanHaveSecondCategory\u0026#34;: true, \u0026#34;CanBeSecondCategory\u0026#34;: true, \u0026#34;IsLeaf\u0026#34;: false }, ... ], \u0026#34;AreaOfBusiness\u0026#34;: 0, \u0026#34;IsLeaf\u0026#34;: false }   API检查点   我们可以知道连接测试响应的查询结果中存在子类别“古董和收藏品”。\n然后我们根据示例功能得到下面的检查代码片段。\npm.test(\u0026#34;Checking all subcategories returned, and the given subcategory exists in\u0026#34;, function () { var jsonData = pm.response.json(); var arr =[]; var Subcategories = jsonData.Subcategories; // Traverse all Subcategories from response, and find wheter a specific subcategory is in. for (i in Subcategories){ var Name = Subcategories[i].Name; arr.push(Name); if(Name == \u0026#34;Antiques \u0026amp; Collectables\u0026#34;){ var SpecificSubcategories = Name; } } // checkpoint: whether subcategory - \u0026#39;Antiques \u0026amp; Collectables\u0026#39; exists in the response if(SpecificSubcategories !== []){ console.log(\u0026#34;Subcategory - Antiques \u0026amp; Collectables existed\u0026#34;); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\nAPI 测试脚本增强  增强脚本，如添加事务功能、异常验证、参数化等。  pm.test(\u0026#34;Checking all subcategories returned, and the given subcategory exists in\u0026#34;, function () { console.log(\u0026#34;Post-Transaction: CheckingtheCountsofGivenSubcategory Start\u0026#34;); var jsonData = pm.response.json(); var arr =[]; if (typeof(pm.response.json().Subcategories) !== \u0026#34;undefined\u0026#34;){ var Subcategories = jsonData.Subcategories; // Traverse all Subcategories from response, and find wheter a specific subcategory is in. for (i in Subcategories){ var Name = Subcategories[i].Name; arr.push(Name); if(Name == \u0026#34;Antiques \u0026amp; collectables\u0026#34;){ var SpecificSubcategories = Name; } } console.log(\u0026#34;Subcategories counts to: \u0026#34; + jsonData.Subcategories.length); console.log(\u0026#34;All subcategories name listed below: \u0026#34;); console.log(arr); // checkpoint: whether subcategory - \u0026#39;Antiques \u0026amp; collectables\u0026#39; exists in the response if(typeof(SpecificSubcategories) !== \u0026#34;undefined\u0026#34; \u0026amp;\u0026amp; SpecificSubcategories.length \u0026gt;= 1 ){ console.log(\u0026#34;Subcategory - Antiques \u0026amp; collectables existed\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofGivenSubcategory Pass\u0026#34;); } else{ console.log(\u0026#34;Subcategory - Antiques \u0026amp; collectables is not existed\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofGivenSubcategory Failed\u0026#34;); } } else{ console.log(pm.response.json()); console.log(\u0026#34;Didn\u0026#39;t catch the Subcategory field\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofGivenSubcategory Failed\u0026#34;); } }); 运行最终脚本并从前端页面或控制台日志进行验证。\nAPI 测试脚本否定案例扩展 我们可以使用“等效类分区”和“边界值分析”来测试 API，就像我们在手动测试案例中所做的那样。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\n  组装请求 - \u0026lsquo;检索一般类别\r\u0026lsquo;（反方向）   从 API 规范来看，参数 - depth=-10可能是一个“超出边界值”的情况，如果我们发送一个带有这个参数的请求，它期望返回一个异常。\n所以请求应该是 GET https://api.tmsandbox.co.nz/v1/Categories.JSON?depth=-10\n  API检查点   运行脚本，我们得到示例响应为blow。\n{ \u0026#34;Name\u0026#34;: \u0026#34;Root\u0026#34;, \u0026#34;Number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;AreaOfBusiness\u0026#34;: 0, \u0026#34;IsLeaf\u0026#34;: false } 在发送此请求时，我们没有看到响应处理深度字段异常值的任何错误消息。\n因此，我们可以将此作为错误报告给开发人员。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-24","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-retrieve-general-categories/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-3-检索一般类别 API 测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 检索经过身份验证的用户监视列表中的项目列表。\nAPI - 检索您的监视列表脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段     关键响应字段 - 经过身份验证的用户的监视列表。            TotalCount Integer 集合中的结果总数。可以大于返回结果的数量。    Page Integer 当前结果页的索引（从 1 开始）。    PageSize Integer 当前页面中的结果数。    List Collection of or null 当前页面中的结果列表。     ListingId 长整数 商家信息的 ID。    BidCount 整数 项目的出价数量。   … … … …      更多 API 规范参考**检索您的监视列表\r** 。\n  示例请求   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Watchlist/All.JSON\n  示例响应   { \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149294406, \u0026#34;Title\u0026#34;: \u0026#34;11x Assorted T-Handle Hex Allen Keys\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;5964-5999-6004-9825-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 1.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;\\/Date(1626749989730)\\/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;\\/Date(1626922789730)\\/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;\\/Date(1626855531548)\\/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;\\/Building-renovation\\/Tools\\/Hand-tools\\/Sets-kits\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https:\\/\\/images.tmsandbox.co.nz\\/photoserver\\/thumb\\/8152697.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 8152697, \u0026#34;RegionId\u0026#34;: 16, \u0026#34;Region\u0026#34;: \u0026#34;Canterbury\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Christchurch City\u0026#34;, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;\\/Date(0)\\/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Sets \u0026amp; kits\u0026#34;, \u0026#34;Attributes\u0026#34;: [ ], \u0026#34;Subtitle\u0026#34;: \u0026#34;SKYLARC’S WINDFLOW TECHNOLOGY ONLINE AUCTION\u0026#34;, \u0026#34;MinimumNextBidAmount\u0026#34;: 1.0000, \u0026#34;IsOnWatchList\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$1.00\u0026#34;, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [ ], \u0026#34;Tags\u0026#34;: [ ] }, \u0026#34;IsDealer\u0026#34;: false, \u0026#34;IsLeading\u0026#34;: false, \u0026#34;IsOutbid\u0026#34;: false, \u0026#34;IsInCart\u0026#34;: false, \u0026#34;MemberBidShippingOption\u0026#34;: 0 } ], \u0026#34;FoundCategories\u0026#34;: [ { \u0026#34;Count\u0026#34;: 1, \u0026#34;Category\u0026#34;: \u0026#34;5964-\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;Building \u0026amp; renovation\u0026#34;, \u0026#34;CategoryId\u0026#34;: 5964 } ] } 业务介绍   前端页面 - 进入关注列表页面   登录 \u0026gt; Watchlist \u0026gt; View Watchlist   前端页面 - 关注列表页面     业务范围选择   查询监视列表中的项目。\n  业务验证点   检查监视列表中是否存在项目。\nAPI测试脚本调试   在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n  组装获取请求 -检索您的监视列表\r   基于 API 规范，参数 - All表示返回监视列表中的所有项目。\n所以请求应该是 GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Watchlist/All.JSON\n  API连通性   连通性测试通过，得到观察列表没有项目的响应示例。\n{ \u0026#34;TotalCount\u0026#34;: 0, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 0, \u0026#34;List\u0026#34;: [], \u0026#34;FoundCategories\u0026#34;: [] } 连通性测试通过并得到观察列表有项目的响应示例。\n{ \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149294806, \u0026#34;Title\u0026#34;: \u0026#34;Digitus DK-330301-00\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0002-4250-4256-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;BuyNowPrice\u0026#34;: 37.31, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1626835762520)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1627440562520)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1627290227336)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Computers/Cables-adaptors/Other\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/8240722.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 8240722, \u0026#34;IsNew\u0026#34;: true, \u0026#34;RegionId\u0026#34;: 2, \u0026#34;Region\u0026#34;: \u0026#34;Auckland\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Waitakere\u0026#34;, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Other\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;Attributes\u0026#34;: [], \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;IsOnWatchList\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$37.31 per item\u0026#34;, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;IsDealer\u0026#34;: false, \u0026#34;IsLeading\u0026#34;: false, \u0026#34;IsOutbid\u0026#34;: false, \u0026#34;IsInCart\u0026#34;: false, \u0026#34;MemberBidShippingOption\u0026#34;: 0 } ], \u0026#34;FoundCategories\u0026#34;: [ { \u0026#34;Count\u0026#34;: 1, \u0026#34;Category\u0026#34;: \u0026#34;0002-\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;Computers\u0026#34;, \u0026#34;CategoryId\u0026#34;: 2 } ] }   API检查点   我们可以从连通性测试响应中知道 TotalCount \u0026gt;= 0。\n然后我们根据示例功能得到下面的检查代码片段。\npm.test(\u0026#34;Checking if there are any items in the watch list\u0026#34;, function () { console.log(\u0026#34;Post-Transaction: CheckingtheCountsofWatchList Start\u0026#34;); var jsonData = pm.response.json(); var TotalCount = jsonData.TotalCount; if (TotalCount \u0026gt;= 0){ console.log(\u0026#34;Found \u0026#34; + TotalCount +\u0026#34; item on the watch list\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofWatchList Pass\u0026#34;); } else{ console.log(\u0026#34;Post-Transaction: CheckingtheCountsofWatchList Failed\u0026#34;); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\nAPI 测试脚本增强 增强脚本，如添加事务功能、异常验证、参数化等。\n运行最终脚本并从前端页面或控制台日志进行验证。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-25","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-retrieve-watchlist/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-4-检索您的监视列表 API 测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 从经过身份验证的用户的监视列表中删除列表。\nAPI - 从监视列表脚本开发步骤中删除列表 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段     关键响应字段 - 有关操作是否成功的详细信息。   尝试删除不存在或不在监视列表中的拍卖不会产生错误。\n          Success Boolean 指示操作是否成功。   Description String or null 错误的描述，如果操作失败。    更多 API 规范是指从您的监视列表中删除列表\r。\n  示例请求   DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/0000000000.JSON\n  示例响应   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } 业务介绍   前端页面 - 关注列表页面   登录 \u0026gt; Watchlist \u0026gt; View Watchlist \u0026gt; Delete \u0026gt; Confirm to delete   前端页面 - 确认删除项目页面     业务范围选择   链式组合交易\n检索您的监视列表\r-\u0026gt;从您的监视列表中删除列表（我在这里）\r-\u0026gt;检索即将关闭的列表\r-\u0026gt;将列表添加到您的监视列表\r从上游事务“检索您的监视列表\r”的响应中获取所有“ListingId ”作为请求字段。\n前置请求 \u0026lsquo;从您的监视列表中删除一个列表\r' 从 监视列表中删除所有 ListingId 但留下最后一个。\n从监视列表中删除最后一个 ListingId。\n  业务验证点   检查监视列表中的所有项目已被删除。\nAPI测试脚本调试   组装前置请求“检索您的监视列表\r”和“从您的监视列表中删除列表\r”   前置求脚本的主要编码逻辑如下：\n​\t1.前置请求 API - 检索您的监视列表以获取监视列表中的所有项目。\nconsole.log(\u0026#34;Pre-Transaction: RetrieveYourWatchlist Start\u0026#34;); // oauth_signature = Consumer Secret%26OAuth Token Secret const pre_request_retrieveyourwatchlist = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;) + \u0026#39;/v1/MyTradeMe/Watchlist/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; ... 注意：如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考API测试前的准备demo\r​\t2.所有获取的项目都应该排除那些字段是 \u0026lsquo;BidCount\u0026rsquo; = 1 以获取允许从监视列表中删除的所有项目。\u0026lsquo;BidCount\u0026rsquo; 字段表示该项目已被投标，无法从监视列表中删除。\npm.sendRequest(pre_request_retrieveyourwatchlist, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Pre-Transaction: RetrieveYourWatchlist Failed\u0026#34;); } else { // Get all ListingId on the Watchlist pm.test(\u0026#34;Get all ListingId on the Watchlist\u0026#34;, function () { var jsonData = response.json(); var Listdata = jsonData[\u0026#39;List\u0026#39;]; var arr = []; for (i = 0; i \u0026lt; Listdata.length; i++) { // bidding items can\u0026#39;t be deleted, need to exclude them if (Listdata[i].BidCount != 1) { arr.push(Listdata[i].ListingId); } } postman.setEnvironmentVariable(\u0026#39;WatchlistListingIdCount\u0026#39;, arr.length); if(arr.length \u0026lt; 1){ var WatchlistListingIdCount = pm.environment.get(\u0026#34;WatchlistListingIdCount\u0026#34;); console.log(\u0026#34;WatchlistListingIdCount: \u0026#34; +WatchlistListingIdCount + \u0026#34;, nothing items need to be deleted.\u0026#34;); } else { postman.setEnvironmentVariable(\u0026#39;WatchlistListingId\u0026#39;, arr); var WatchlistListingId = pm.environment.get(\u0026#34;WatchlistListingId\u0026#34;); console.log(All the can be deleted ListingId on the Watchlist: \u0026#34;); console.log(WatchlistListingId); } console.log(\u0026#34;Pre-Transaction: RetrieveYourWatchlist Pass\u0026#34;); }); ... ​\t3.如果从监视列表中提取的项目 \u0026lt;=0，则监视列表中没有项目。只需启动一个无意义的\u0026rsquo;ListingId\u0026rsquo;。\nvar WatchlistListingIdCount = pm.environment.get(\u0026#34;WatchlistListingIdCount\u0026#34;); var WatchlistListingId = pm.environment.get(\u0026#34;WatchlistListingId\u0026#34;).split(\u0026#34;,\u0026#34;); if (WatchlistListingIdCount \u0026lt;= 0) { //Grant a meaningless value to LastListingId postman.setEnvironmentVariable(\u0026#39;LastListingId\u0026#39;, \u0026#34;0000000000\u0026#34;); } ... ​\t4.如果从监视列表中提取的项目 =1，则存储 \u0026lsquo;ListingId\u0026rsquo; 以供之后的API \u0026lsquo;RemoveAListingFromYourWatchlist\u0026rsquo; 请求使用。\nelse if (WatchlistListingIdCount == 1) { postman.setEnvironmentVariable(\u0026#39;LastListingId\u0026#39;, WatchlistListingId[(Number(WatchlistListingIdCount) - 1)]); } ... ​\t5.如果从监视列表中获取的项目 \u0026gt;1，则组装前置请求“从您的监视列表中删除列表”\r以删除监视列表中除最后一个项目之外的所有项目，然后保留最后一个项目以供后续交易从您的监视列表中删除列表\r删除。\nelse { //Delete ListingId from Watchlist, but leave the last ListingId for later transaction to delete console.log(\u0026#34;Pre-Transaction: RemoveAListingFromYourWatchlist Start\u0026#34;); postman.setEnvironmentVariable(\u0026#39;LastListingId\u0026#39;, WatchlistListingId[(Number(WatchlistListingIdCount) - 1)]); var LastListingId = pm.environment.get(\u0026#34;LastListingId\u0026#34;); console.log(\u0026#34;LastListingId: \u0026#34; + LastListingId); //Exclude the last ListingId for (var i = 0; i \u0026lt; (WatchlistListingId.length - 1); i++) { const pre_request_removealistingfromyourwatchlist = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;) + \u0026#39;/v1/MyTradeMe/WatchList/\u0026#39; + WatchlistListingId[i] + \u0026#39;.JSON\u0026#39;, method: \u0026#39;DELETE\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; pm.sendRequest(pre_request_removealistingfromyourwatchlist, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Pre-Transaction: RemoveAListingFromYourWatchlist Failed\u0026#34;); } else { // Output the ListingId that has been deleted pm.test(\u0026#34;Delete ListingId from the Watchlist, but leave the LastListingId: \u0026#34; + LastListingId, function () { // console.log(response.json()); }); } }); } console.log(\u0026#34;Pre-Transaction: RemoveAListingFromYourWatchlist Pass\u0026#34;); } } }); 注意：如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考API测试前的准备demo\r  在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考API测试前的准备demo\r 组装删除请求 - 从您的监视列表中删除列表  根据 API 规范，参数 - listingId表示要删除的列表的 ID。\n并且listingId 来自前置请求' 检索您的监视列表\r\u0026lsquo;的响应，并且它已经设置为环境变量：{{LastListingId}}。\n所以请求应该是 DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/{{LastListingId}}.JSON\n  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; }   API检查点   使用后置请求: API - 检索您的监视列表以检查它是否仍有可以删除的监视列表中的项目。\n检查前置请求\u0026rsquo; Retrieve your watchlist\r\u0026lsquo;的功能是否有效；\n并且它可以从其响应中排除那些无法执行删除操作的项目，以便使用另一个前置请求事务“从您的监视列表中删除列表\r”；\n并且它可以保留其对下游事务“从您的监视列表中删除列表\r”的响应中的最后一项以供使用。\n检查“从您的监视列表中删除列表\r”的功能是否有效，它可以从监视列表中删除最后一个项目。\n然后我们根据示例功能得到下面的检查代码片段。\nconsole.log(\u0026#34;Post-Transaction: RetrieveYourWatchlist Start\u0026#34;); const post_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;)+\u0026#39;/v1/MyTradeMe/Watchlist/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; var LastListingId = pm.environment.get(\u0026#34;LastListingId\u0026#34;); pm.sendRequest(post_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Post-Transaction: RetrieveYourWatchlist Failed\u0026#34;); } else { // Confirm whether all ListingId have been deleted from the Watchlist pm.test(\u0026#34;Checking LastListingId: \u0026#34; +LastListingId +\u0026#34; has been deleted\u0026#34;, function () { var jsonData = response.json(); var Listdata = jsonData[\u0026#39;List\u0026#39;]; var arr = []; for(i = 0; i \u0026lt; Listdata.length; i++) { //bidding items can\u0026#39;t be deleted, need to exclude them if(Listdata[i].BidCount != 1){ arr.push(Listdata[i].ListingId); } } if (arr.length == 0){ console.log(\u0026#34;Current count of ListingId that can be deleted in the watchlist: \u0026#34; +arr.length); } }); console.log(\u0026#34;Post-Transaction: RetrieveYourWatchlist Pass\u0026#34;); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\nAPI 测试脚本增强   增强脚本，如添加事务功能、异常验证、参数化等。   运行最终脚本并从前端页面或控制台日志进行验证。   删除操作前显示在监视列表页面上。\n移除操作后显示在关注列表页面。\nAPI 测试脚本否定案例扩展 使用我们在手动测试案例中所做的“等效类划分”和“边界值分析”。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-26","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-rm-a-listing-from-watchlist/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-5-从您的监视列表中删除列表 API 测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 检索全国或单个地区即将关闭的项目。\nAPI - 检索即将关闭的列表脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段   更多参考：检索即将关闭的列表\r\n  关键响应字段 - 类别树。           TotalCount Integer 集合中的结果总数。可以大于返回结果的数量。   TotalCountTruncated Boolean 如果结果总数超过允许的最大值并被截断，则为真。   Page Integer 当前结果页的索引（从 1 开始）。   PageSize Integer 当前页面中的结果数。   List Collection of or null 当前页面中的结果列表。    ListingId 长整数   … … …    更多参考：检索即将关闭的列表\r\n  示例请求   GET https://api.tmsandbox.co.nz/v1/Listings/closure.JSON?rows=1000\r  示例响应   { \u0026#34;TotalCount\u0026#34;: 250, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 250, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149292446, \u0026#34;Title\u0026#34;: \u0026#34;fox drawing\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0339-5487-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;BuyNowPrice\u0026#34;: 1.0000, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1626323575513)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1626928375513)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1626926636817)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Art/Digital-art\u0026#34;, \u0026#34;Region\u0026#34;: \u0026#34;Canterbury\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Christchurch City\u0026#34;, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$1.00 per item\u0026#34;, \u0026#34;PromotionId\u0026#34;: 1, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;MemberId\u0026#34;: 4007247 }, ... ] } 业务介绍   前端页面 - 转到即将关闭的列表页面   登录 \u0026gt; View all Closing soon in all regions   前端页面 - 即将关闭列表页面     业务范围选择   链式组合交易 检索您的监视列表\r-\u0026gt;从您的监视列表中删除列表\r-\u0026gt;检索即将关闭的列表（我在这里）\r-\u0026gt;将列表添加到您的监视列表\r在即将关闭的列表的第一页获取所有项目。   业务验证点   验证查询结果中是否存在关闭即将关闭列表的第一页上的项目。\nAPI测试脚本调试   在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n  组合请求 -检索即将关闭的列表\r   根据 API 规范，参数 - rows=1000表示要返回的最大结果数。\n所以请求应该是 GET https://api.tmsandbox.co.nz/v1/Listings/closure.JSON?rows=1000\r  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;TotalCount\u0026#34;: 250, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 250, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149294548, \u0026#34;Title\u0026#34;: \u0026#34;Princess Pink of Ballerina\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0347-1417-6174-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 9.0000, \u0026#34;BuyNowPrice\u0026#34;: 16.7500, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1626759267867)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1627364067867)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;HasGallery\u0026#34;: true, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1627362314009)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Toys-models/Pretend-playing/Other\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/4549071.jpg\u0026#34;, \u0026#34;IsNew\u0026#34;: true, \u0026#34;Region\u0026#34;: \u0026#34;Wellington\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Wellington City\u0026#34;, \u0026#34;HasReserve\u0026#34;: true, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;ReserveState\u0026#34;: 2, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$9.00\u0026#34;, \u0026#34;PromotionId\u0026#34;: 2, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;MemberId\u0026#34;: 4003082 }, ... ] }   API检查点   检查响应中是否有即将关闭的项目。\n然后我们根据示例功能得到下面的检查代码片段。\npm.test(\u0026#34;Checking if there are any items in the Closing Soon Listings\u0026#34;, function () { console.log(\u0026#34;Post-Transaction: CheckingtheCountsofClosingSoonListings Start\u0026#34;); var jsonData = pm.response.json(); var TotalCount = jsonData.TotalCount; if (TotalCount \u0026gt;= 0){ console.log(\u0026#34;Found \u0026#34; + TotalCount +\u0026#34; items in the Closing Soon Listings\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingtheCountsofClosingSoonListings Pass\u0026#34;); } else{ console.log(\u0026#34;Post-Transaction: CheckingtheCountsofClosingSoonListings Failed\u0026#34;); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\nAPI 测试脚本增强 增强脚本，如添加事务功能、异常验证、参数化等。\n运行最终脚本并从前端页面或控制台日志进行验证。\nAPI 测试脚本否定案例扩展 使用我们在手动测试案例中所做的“等效类划分”和“边界值分析”。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-27","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-retrieve-closing-soon-listings/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-6-检索即将关闭列表 API 测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 将列表添加到经过身份验证的用户的监视列表。\nAPI - 将列表添加到您的监视列表脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段   更多参考：将列表添加到您的监视列表\r关键响应字段 - 有关操作是否成功的详细信息。 尝试删除不存在或不在监视列表中的拍卖不会产生错误。\n          Success Boolean 指示操作是否成功。   Description String or null 错误的描述，如果操作失败。    示例请求 POST https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/2149294825.JSON\n 示例响应：  { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } 业务介绍   前端页面 - 即将关闭商品详情页面   登录 \u0026gt; View all Closing soon in all regions \u0026gt; Add to watchlist   前端页面 - 关注列表页面     业务范围选择   链式组合交易\n检索您的监视列表\r-\u0026gt;从您的监视列表中删除列表\r-\u0026gt;检索即将关闭的列表\r-\u0026gt;将列表添加到您的监视列表（我在这里）\r从上游交易“检索即将关闭的列表\r”中获取即将关闭的列表中的随机项目，并将此项目添加到监视列表中。\n  业务验证点   检查所选项目可以添加到监视列表。\nAPI测试脚本调试   组装前置请求“检索即将关闭的列表”   前置请求脚本的主要编码逻辑如下：\n​\t1.前置请求 API -“检索即将关闭的列表”以获取即将关闭列表的第一页上的所有项目。\nconsole.log(\u0026#34;Pre-Transaction: RetrieveClosingSoonListings Start\u0026#34;); const pre_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;)+\u0026#39;/v1/Listings/closing.JSON?rows=1000\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; ... 注意：如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考**API测试前的准备demo\r**\n​\t2.从所有获取的项目中随机选择 1 个项目，并将该项目存储为参数以供以后 API - \u0026lsquo;将列表添加到您的监视列表\u0026rsquo; 使用。\npm.sendRequest(pre_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Pre-Transaction: RetrieveClosingSoonListings Failed\u0026#34;); } else { pm.test(\u0026#34;Get all the closing soon ListingId\u0026#34;, function () { var jsonData = response.json(); var List = jsonData.List; var ListingIdsCount = jsonData.TotalCount;// Get the 250 closing soon ListingIds from 1st page var PageSize = jsonData.PageSize; var arr = []; // Traversal json object to get all the ListingId if (List != \u0026#34;\u0026#34;){ for (i in List){ var ListingId = List[i].ListingId; arr.push(ListingId); } } // Store all the ListingId as a variable if(i == (Number(PageSize)-1)){ postman.setEnvironmentVariable(\u0026#39;ListingIds\u0026#39;, arr); postman.setEnvironmentVariable(\u0026#39;ListingIdsCount\u0026#39;, ListingIdsCount); } }); // Randomly get a ListingId from ListingIds for later transaction use var ListingIdsCount = pm.environment.get(\u0026#34;ListingIdsCount\u0026#34;); var arrListingIds=pm.environment.get(\u0026#34;ListingIds\u0026#34;).split(\u0026#34;,\u0026#34;); postman.setEnvironmentVariable(\u0026#39;ListingIdAddToWatchList\u0026#39;, arrListingIds[Math.floor(Math.random() * Number(ListingIdsCount))]); var ListingIdAddToWatchList = pm.environment.get(\u0026#34;ListingIdAddToWatchList\u0026#34;); console.log(\u0026#34;From \u0026#34;+ListingIdsCount +\u0026#34; closing soon items randomly choose the: \u0026#34;+ListingIdAddToWatchList+\u0026#34; waiting to be added to the watchlist\u0026#34;); console.log(\u0026#34;Pre-Transaction: RetrieveClosingSoonListings Pass\u0026#34;); }   在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考**API测试前的准备demo\r**\n  组合请求 - \u0026lsquo;将列表添加到您的监视列表\u0026rsquo;   根据 API 规范，参数 - listingId表示要添加到监视列表的列表的 ID。\nlistingId 来自前置请求**\u0026lsquo;检索即将关闭的列表\r**的响应，并且它已被设置为环境变量：{{ListingIdAddToWatchList}}。\n所以请求应该是 POST https://api.tmsandbox.co.nz/v1/MyTradeMe/WatchList/{{ListingIdAddToWatchList}}.JSON\n  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; }   API检查点   使用后置请求: API - **检索您的监视列表\r**以检查给定的项目是否已添加到监视列表中。\n然后我们根据示例功能得到下面的检查代码片段。\nconsole.log(\u0026#34;Post-Transaction: CheckingAddToWatchList Start\u0026#34;); var ListingIdAddToWatchList = pm.environment.get(\u0026#34;ListingIdAddToWatchList\u0026#34;); const post_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;)+\u0026#39;/v1/MyTradeMe/Watchlist/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; pm.sendRequest(post_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Post-Transaction: CheckingAddToWatchList Failed\u0026#34;); } else { // Confirm whether ListingIdAddToWatchList existed in the Watchlist pm.test(\u0026#34;Checking ListingId \u0026#34; +ListingIdAddToWatchList +\u0026#34; has been added\u0026#34;, function () { console.log(response.json()); var jsonData = response.json(); var Listdata = jsonData[\u0026#39;List\u0026#39;]; var count = 0; for(i = 0; i \u0026lt; Listdata.length; i++) { if (ListingIdAddToWatchList == Listdata[i].ListingId){ console.log(\u0026#34;ListingId \u0026#34; +ListingIdAddToWatchList + \u0026#34; has been added to the watchlist\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingAddToWatchList Pass\u0026#34;); count = 1; } } if (count == 0){ console.log(\u0026#34;ListingId \u0026#34; +ListingIdAddToWatchList + \u0026#34; hasn\u0026#39;t been added to the watchlist\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingAddToWatchList Failed\u0026#34;); } }); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\nAPI 测试脚本增强 增强脚本，如添加事务功能、异常验证、参数化等。\n运行最终脚本并从前端页面或控制台日志进行验证。\n在“将列表添加到您的监视列表”操作后，查看监视列表。\nAPI 测试脚本否定案例扩展 使用我们在手动测试案例中所做的“等效类划分”和“边界值分析”。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-26","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-add-a-listing-to-watchlist/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-7-将列表添加到您的监视列表 API 测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 检索经过身份验证的用户的购买清单。\n多数量拍卖可以多次购买。\nAPI - 检索您赢得的物品脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段     关键响应字段 - 经过身份验证的用户已购买的项目列表。            TotalCount Integer 集合中的结果总数。可以大于返回结果的数量。    Page Integer 当前结果页的索引（从 1 开始）。    PageSize Integer 当前页面中的结果数。    List Collection of or null 当前页面中的结果列表。     ListingId 长整数 商家信息的 ID。   … … … …   PurchaseId Integer 标识销售的唯一 ID。    … … … …      更多参考：检索您赢得的物品\r\n  示例请求   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/All.JSON\n  示例响应 - 获胜列表中的 1 个项目：   { \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149290179, \u0026#34;Title\u0026#34;: \u0026#34;Samsung Galaxy BV Weaving S9 Case\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0344-0899-1135-5537-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, ... \u0026#34;ListingGroupId\u0026#34;: 73059, ... \u0026#34;PaymentInfo\u0026#34;: \u0026#34;NZ Bank Deposit\u0026#34;, \u0026#34;Price\u0026#34;: 12.99, \u0026#34;SelectedShipping\u0026#34;: \u0026#34;rural\u0026#34;, \u0026#34;ShippingPrice\u0026#34;: 9.99, \u0026#34;ShippingType\u0026#34;: 4, ... \u0026#34;PurchaseId\u0026#34;: 26176, ... } ] }   示例响应 - 获胜列表中的 0 项：   { \u0026#34;TotalCount\u0026#34;: 0, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 0, \u0026#34;List\u0026#34;: [] } 业务介绍   前端页面 - 赢得列表页面 - 有项目   登录 \u0026gt; My Trade Me \u0026gt; Won   前端页面 - 获胜列表页面 - 没有项目     业务范围选择：   链式投资组合交易\n检索您赢得的物品（我在这里）\r-\u0026gt;从您赢得的物品列表中删除购买\r-\u0026gt;常规搜索\r-\u0026gt;检索单个列表的详细信息\r-\u0026gt;使用“立即购买”购买拍卖\r  业务验证点   检查获胜清单上是否有项目。\nAPI测试脚本调试   在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考API测试前的准备demo\r  组装请求 - \u0026lsquo;检索你赢得的物品\r'   基于 API 规范，参数 - All表示返回过去 45 天内所有赢得的项目。\n所以请求应该是 GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/All.JSON\n  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;TotalCount\u0026#34;: 1, \u0026#34;Page\u0026#34;: 1, \u0026#34;PageSize\u0026#34;: 1, \u0026#34;List\u0026#34;: [ { \u0026#34;ListingId\u0026#34;: 2149290179, \u0026#34;Title\u0026#34;: \u0026#34;Samsung Galaxy BV Weaving S9 Case\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0344-0899-1135-5537-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1625630212963)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1625648672660)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1625649420456)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Mobile-phones/Accessories/Cases-covers/Samsung\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/4676325.jpg\u0026#34;, \u0026#34;PhotoId\u0026#34;: 4676325, \u0026#34;Seller\u0026#34;: { \u0026#34;MemberId\u0026#34;: 4000334, \u0026#34;Nickname\u0026#34;: \u0026#34;paperclip4\u0026#34;, \u0026#34;DateAddressVerified\u0026#34;: \u0026#34;/Date(1338811200000)/\u0026#34;, \u0026#34;DateJoined\u0026#34;: \u0026#34;/Date(1338811200000)/\u0026#34;, \u0026#34;Email\u0026#34;: \u0026#34;owen4@snipesoft.net.nz\u0026#34;, \u0026#34;UniqueNegative\u0026#34;: 0, \u0026#34;UniquePositive\u0026#34;: 3, \u0026#34;FeedbackCount\u0026#34;: 3, \u0026#34;IsAddressVerified\u0026#34;: true }, \u0026#34;IsNew\u0026#34;: true, \u0026#34;Note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;CategoryName\u0026#34;: \u0026#34;Samsung\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;Quantity\u0026#34;: 1, \u0026#34;IsFlatShippingCharge\u0026#34;: true, \u0026#34;Options\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Colour\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;Blue\u0026#34; } ], \u0026#34;ListingGroupId\u0026#34;: 73059, \u0026#34;StatusDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;AuctionAttribute\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;BuyerFeedbackPlaced\u0026#34;: 0, \u0026#34;SellerFeedbackPlaced\u0026#34;: 0, \u0026#34;DeliveryId\u0026#34;: 0, \u0026#34;FpoDecisionViaMobile\u0026#34;: false, \u0026#34;HasPaidByCreditCard\u0026#34;: false, \u0026#34;InvoiceId\u0026#34;: 0, \u0026#34;OfferId\u0026#34;: 0, \u0026#34;PaymentInfo\u0026#34;: \u0026#34;NZ Bank Deposit\u0026#34;, \u0026#34;Price\u0026#34;: 12.99, \u0026#34;SelectedShipping\u0026#34;: \u0026#34;rural\u0026#34;, \u0026#34;ShippingPrice\u0026#34;: 9.99, \u0026#34;ShippingType\u0026#34;: 4, \u0026#34;SoldDate\u0026#34;: \u0026#34;/Date(1625648672660)/\u0026#34;, \u0026#34;SoldType\u0026#34;: \u0026#34;BUYNOW\u0026#34;, \u0026#34;PaymentInstructions\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;PurchaseId\u0026#34;: 26176, \u0026#34;ReferenceNumber\u0026#34;: \u0026#34;P26176\u0026#34;, \u0026#34;SubtotalPrice\u0026#34;: 12.99, \u0026#34;TotalShippingPrice\u0026#34;: 9.99, \u0026#34;TotalSalePrice\u0026#34;: 22.98, \u0026#34;TrackedParcels\u0026#34;: [], \u0026#34;TaxSubTotal\u0026#34;: 0, \u0026#34;HasPaidByDeferredPayment\u0026#34;: false } ] }   API检查点   检查获胜列表中是否存在项目。\n并将赢得的项目 PurchaseId 及其计数存储为两个环境变量：{{WonPurchaseId}} 和 {{WonPurchaseIdCount}} 用于下游 API -从您赢得的项目列表中删除购买\r 使用。\n然后我们根据示例功能得到下面的检查代码片段。\nconsole.log(\u0026#34;Post-Transaction: CheckingWonListHaveItems Start\u0026#34;); pm.test(\u0026#34;CheckingWonListHasItems\u0026#34;, function () { var jsonData = pm.response.json(); var arr =[]; var List = jsonData.List; if (List != \u0026#34;\u0026#34;){ for (i in List){ var PurchaseId = List[i].PurchaseId; arr.push(PurchaseId); } // Store WonPurchaseIdCount for later deleting usage postman.setEnvironmentVariable(\u0026#39;WonPurchaseIdCount\u0026#39;, arr.length); if(arr !== []){ if(arr.length \u0026gt;=1){ // Store WonItems for later deleting usage postman.setEnvironmentVariable(\u0026#39;WonPurchaseId\u0026#39;, arr); console.log(\u0026#34;WonPurchaseId counts to: \u0026#34; + arr.length + \u0026#34;, the purchaseId: \u0026#34; + arr); console.log(\u0026#34;Post-Transaction: CheckingWonListHaveItems Pass\u0026#34;); } else{ postman.setEnvironmentVariable(\u0026#39;WonPurchaseId\u0026#39;, arr); console.log(\u0026#34;WonPurchaseId counts to: \u0026#34; + arr.length + \u0026#34;. There are no items on the won list.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingWonListHaveItems Pass\u0026#34;); } } } else{ console.log(\u0026#34;Post-Transaction: CheckingWonListHaveItems Failed\u0026#34;); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\n它在控制台日志中显示的获胜列表页面上没有任何项目。\n它在控制台日志上显示的获胜列表页面上有项目。\nAPI 测试脚本增强 增强脚本，如添加事务功能、异常验证、参数化等。\n运行最终脚本并从前端页面或控制台日志进行验证。\nAPI 测试脚本否定案例扩展 使用我们在手动测试案例中所做的“等效类划分”和“边界值分析”。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-27","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-retrieve-won-items/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-8-检索您赢得的物品 API 测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 从赢得的项目列表中隐藏一个列表。\nAPI - 从您赢得的物品列表中删除购买脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段     关键响应字段 - 有关操作是否成功的详细信息。   请注意，此操作仅在操作完成后在赢得的物品列表中仍然存在购买的情况下才会报告失败。在所有其他情况下，此 API 将报告成功（例如，如果购买 ID 无效或购买已被删除，它将报告成功）。\n          Success Boolean 指示操作是否成功。   Description String or null 错误的描述，如果操作失败。      示例请求   GET https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/00000.JSON\n  示例响应   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; } 业务介绍   前端页面 - 赢得列表页面（选择要删除的给定项目）   登录 \u0026gt; My Trade Me \u0026gt; Won \u0026gt; Delete \u0026gt; Confirm to delete   前端页面 - 确认从赢得的项目列表中删除给定的项目。     业务范围选择   链式投资组合交易\n检索您赢得的物品\r-\u0026gt;从您赢得的物品列表中删除购买（我在这里）\r-\u0026gt;常规搜索\r-\u0026gt;检索单个列表的详细信息\r-\u0026gt;使用“立即购买”购买拍卖\r选择 API - \u0026lsquo;Retrieve your won items\u0026rsquo; 作为前置请求以获取所有想要删除的赢得的物品\n删除获胜项目列表中的所有获胜项目\n  业务验证点   通过访问赢得的项目列表页面已删除检查已购买的项目。\nAPI测试脚本调试   从上游 API 获取环境变量“检索您赢得的项目\r”   获取两个环境变量：{{WonPurchaseId}} 和 {{WonPurchaseIdCount}}，这意味着所有赢得的项目 PurchaseId 及其在监视列表中的计数。这些变量从上游 API 的响应中设置来源 - “检索您赢得的物品\r”。\nvar WonPurchaseIdCount = pm.environment.get(\u0026#34;WonPurchaseIdCount\u0026#34;); var WonPurchaseId = pm.environment.get(\u0026#34;WonPurchaseId\u0026#34;).split(\u0026#34;,\u0026#34;); ... 在哪里设置这两个变量参考：检索您赢得的物品 - API 测试脚本调试\r -\u0026gt; API checkpoint。\n  组装前置请求“从您赢得的物品列表中删除购买\r”   从赢得的项目列表中删除所有赢得的项目，但保留最后一个赢得的项目（以供后置请求**“从您的赢得项目列表中删除购买”\r**使用。\nif (WonPurchaseIdCount \u0026lt;= 0){ postman.setEnvironmentVariable(\u0026#39;LastWonPurchaseId\u0026#39;, \u0026#34;00000\u0026#34;); } else if (WonPurchaseIdCount == 1){ postman.setEnvironmentVariable(\u0026#39;LastWonPurchaseId\u0026#39;, WonPurchaseId[(Number(WonPurchaseIdCount) - 1)]); } else{ //Remove all items but the last item on the won list. The later transaction will remove the last item from the won list. console.log(\u0026#34;Pre-Transaction: RemoveAPurchaseFromYourWonItemsList Start\u0026#34;); postman.setEnvironmentVariable(\u0026#39;LastWonPurchaseId\u0026#39;, WonPurchaseId[(Number(WonPurchaseIdCount) - 1)]); var LastWonPurchaseId = pm.environment.get(\u0026#34;LastWonPurchaseId\u0026#34;); console.log(\u0026#34;LastWonPurchaseId: \u0026#34; + LastWonPurchaseId); //Exclude the last WonPurchaseId for (var i = 0; i \u0026lt; (WonPurchaseId.length - 1); i++) { const pre_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;) + \u0026#39;/v1/MyTradeMe/Won/\u0026#39; + WonPurchaseId[i] + \u0026#39;.JSON\u0026#39;, method: \u0026#39;DELETE\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;your Consumer Key\u0026#34;,oauth_token=\u0026#34;your OAuth Token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;your Consumer Secret%26your OAuth Token Secret\u0026#34;\u0026#39;], body: { } }; pm.sendRequest(pre_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Pre-Transaction: RemoveAPurchaseFromYourWonItemsList Failed\u0026#34;); } else { // Output the ListingId that has been deleted pm.test(\u0026#34;Delete PurchaseId from the Wonlist, but leave the LastPurchaseId: \u0026#34; + LastWonPurchaseId, function () { // console.log(response.json()); }); } }); } setTimeout(()=\u0026gt;{ console.log(\u0026#34;Pre-Transaction: RemoveAPurchaseFromYourWonItemsList Pass\u0026#34;); }, 2000); } 注意：如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考**API测试前的准备demo\r**\n  在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考**API测试前的准备demo\r**\n  组装请求 - \u0026lsquo;从您赢得的物品列表中删除购买\r'   根据 API 规范，参数 - purchaseId表示获胜项目列表中的隐藏项目。\npurchaseId来自前置请求 **\u0026lsquo;从您赢得的物品列表中删除购买\u0026rsquo;\r**的响应报文，它已被设置为环境变量：{{LastWonPurchaseId}}。\n所以请求应该是 DELETE https://api.tmsandbox.co.nz/v1/MyTradeMe/Won/{{LastWonPurchaseId}}.JSON\n  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Success\u0026#34; }   API检查点   检查是否有获胜列表中的项目。\n然后我们根据示例功能得到下面的检查代码片段。\n//Check wheter have items on the won list console.log(\u0026#34;Post-Transaction: CheckingDeleteWonItems Start\u0026#34;); var LastWonPurchaseId = pm.environment.get(\u0026#34;LastWonPurchaseId\u0026#34;); const post_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;) + \u0026#39;/v1/MyTradeMe/Won/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;Your consumerKey\u0026#34;,oauth_token=\u0026#34;Your token\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;Your consumerSecret%26Your tokenSecret\u0026#34;\u0026#39;], body: { } }; pm.sendRequest(post_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Post-Transaction: CheckingDeleteWonItems Failed\u0026#34;); } else { // Output the PurchaseId that has been removed pm.test(\u0026#34;Checking LastWonPurchaseId: \u0026#34; +LastWonPurchaseId +\u0026#34; has been removed\u0026#34;, function () { var jsonData = response.json(); var TotalCount = jsonData.TotalCount; if (TotalCount == 0){ console.log(\u0026#34;Current items count on the won list: \u0026#34;+TotalCount + \u0026#34;. All items have been removed from the won list.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingDeleteWonItems Pass\u0026#34;); } else{ console.log(\u0026#34;Current items count on the won list: \u0026#34;+TotalCount + \u0026#34;. Still have Items need to be removed from the won list.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingDeleteWonItems Failed\u0026#34;); } }); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\n从获胜列表页面中删除一项。\n从获胜列表页面中删除了多个项目。\nAPI 测试脚本增强   增强脚本，如添加事务功能、异常验证、参数化等。   运行最终脚本并从前端页面或控制台日志进行验证。   移除操作前显示在 Won 列表页面上。\n删除操作后显示在赢得的列表页面上。\nAPI 测试脚本否定案例扩展 使用我们在手动测试案例中所做的“等效类划分”和“边界值分析”。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-28","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-rm-a-purchase-from-won-list/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-9-从您赢得的物品列表中删除购买 API 测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 允许您按类别、关键字或这两者的组合搜索 Trade Me 上的列表。\n结果集可以通过各种属性进行过滤，包括“立即购买”、“立即付款”、“商品状况”或“卖家”的可用性。\nAPI - 常规搜索脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段             page Integer (optional) 要返回的结果集的页码，从 1 开始。默认为 1。   … … …   rows Integer (optional) 每页结果数；也是要返回的最大结果数。对于未经身份验证的请求，最大值为 25，对于经过身份验证的请求，最大值为 500。默认为 25（未认证）或 50（已认证）。   … … …    更多参考：常规搜索\r  关键响应字段              TotalCount Integer 集合中的结果总数。可以大于返回结果的数量。    TotalCountTruncated Boolean 如果结果总数超过允许的最大值并被截断，则为真。    Page Integer 当前结果页的索引（从 1 开始）。    PageSize Integer 当前页面中的结果数。    List Collection of or null 当前页面中的结果列表。     ListingId Long Integer 商家信息的 ID。    BuyNowPrice Number 立即购买价格。    HasBuyNow Boolean 指示该项目是否有立即购买。   … … … …    更多参考：常规搜索\r  示例请求   GET https://api.tmsandbox.co.nz/v1/Search/General.JSON?buy=All\u0026amp;rows=500\u0026amp;page=4\n  示例响应   { \u0026#34;TotalCount\u0026#34;: 16479, \u0026#34;Page\u0026#34;: 4, \u0026#34;PageSize\u0026#34;: 500, \u0026#34;List\u0026#34;: [ ... { \u0026#34;ListingId\u0026#34;: 2149294614, \u0026#34;Title\u0026#34;: \u0026#34;Cobra Glassware\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0341-0881-4739-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 11.0000, \u0026#34;BuyNowPrice\u0026#34;: 33.0000, ... \u0026#34;HasBuyNow\u0026#34;: true, ... }, ... ] } 业务介绍   前端页面 - 搜索框勾选“立即购买”以过滤具有“立即购买”功能的项目。   登录 \u0026gt; 搜索一个种类   业务范围选择   链式投资组合交易\n检索您赢得的物品\r-\u0026gt;从您赢得的物品列表中删除购买\r-\u0026gt;常规搜索（我在这里）\r-\u0026gt;检索单个列表的详细信息\r-\u0026gt;使用“立即购买”购买拍卖\r通过搜索功能搜索 500 件商品，并仅从下游交易“检索单个列表的详细信息”的响应中选择具有“HasBuyNow”功能和 BuyNowPrice \u0026lt;= $20 的商品以供使用。\n  业务验证点   检查给定的搜索条件可以获得项目，这些项目中的一个随机项目可以存储供下游事务\u0026rsquo;RetrieveTheDetailsOfASingleListing\u0026rsquo;使用。\nAPI测试脚本调试   在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考**API测试前的准备demo\r**\n  组装请求 - \u0026lsquo;从您赢得的物品列表中删除购买\r\u0026rsquo;   根据 API 规范，参数buy=All表示将列表过滤为仅包含“立即购买”的列表。\n参数rows=500表示对于经过身份验证的请求，每页的最大结果数为500。\n参数page=4表示要返回的结果集的第4页。\n所以请求应该是 GET https://api.tmsandbox.co.nz/v1/Search/General.JSON?buy=All\u0026amp;rows=500\u0026amp;page=4\n  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;TotalCount\u0026#34;: 16479, \u0026#34;Page\u0026#34;: 4, \u0026#34;PageSize\u0026#34;: 500, \u0026#34;List\u0026#34;: [ ... { \u0026#34;ListingId\u0026#34;: 2149288229, \u0026#34;Title\u0026#34;: \u0026#34;The Shawshank Redemption (Special Edition)\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;0003-9232-9241-\u0026#34;, \u0026#34;StartPrice\u0026#34;: 0, \u0026#34;BuyNowPrice\u0026#34;: 12, \u0026#34;StartDate\u0026#34;: \u0026#34;/Date(1625090253613)/\u0026#34;, \u0026#34;EndDate\u0026#34;: \u0026#34;/Date(1625695053613)/\u0026#34;, \u0026#34;ListingLength\u0026#34;: null, \u0026#34;HasGallery\u0026#34;: true, \u0026#34;AsAt\u0026#34;: \u0026#34;/Date(1625649443316)/\u0026#34;, \u0026#34;CategoryPath\u0026#34;: \u0026#34;/Movies-TV/Bluray/Drama\u0026#34;, \u0026#34;PictureHref\u0026#34;: \u0026#34;https://images.tmsandbox.co.nz/photoserver/thumb/104197832.jpg\u0026#34;, \u0026#34;Region\u0026#34;: \u0026#34;Wellington\u0026#34;, \u0026#34;Suburb\u0026#34;: \u0026#34;Wellington City\u0026#34;, \u0026#34;HasBuyNow\u0026#34;: true, \u0026#34;NoteDate\u0026#34;: \u0026#34;/Date(0)/\u0026#34;, \u0026#34;ReserveState\u0026#34;: 3, \u0026#34;IsBuyNowOnly\u0026#34;: true, \u0026#34;PriceDisplay\u0026#34;: \u0026#34;$12.00 per item\u0026#34;, \u0026#34;HasFreeShipping\u0026#34;: true, \u0026#34;PromotionId\u0026#34;: 2, \u0026#34;AdditionalData\u0026#34;: { \u0026#34;BulletPoints\u0026#34;: [], \u0026#34;Tags\u0026#34;: [] }, \u0026#34;MemberId\u0026#34;: 4007156 }, ... ] }   API检查点   检查“常规搜索”的功能是否有效，它可以从其对下游交易的响应中获取任何具有“HasBuyNow”功能的 ListingId \u0026lsquo;检索单个列表的详细信息\r\u0026lsquo;或\u0026rsquo;使用立即购买的拍卖\r\u0026lsquo;来使用.\n然后我们根据示例功能得到下面的检查代码片段。\nconsole.log(\u0026#34;Post-Transaction: CheckingListingIdHasBuyNow Start\u0026#34;); pm.test(\u0026#34;GetListingIdHasBuyNow\u0026#34;, function () { var jsonData = pm.response.json(); var Page = jsonData.Page; var PageSize = jsonData.PageSize; var arr =[]; var List = jsonData.List; if (typeof(List) !== \u0026#34;undefined\u0026#34;){ for (i in List){ var ListingId = List[i].ListingId; //Only pick the items that has the \u0026#39;HasBuyNow\u0026#39; feature and the BuyNowPrice \u0026lt;= $20 if(List[i].HasBuyNow == true \u0026amp;\u0026amp; List[i].BuyNowPrice \u0026lt;=20){ arr.push(ListingId); } } postman.setEnvironmentVariable(\u0026#39;ListingIdHasBuyNowCount\u0026#39;, arr.length); } if(Array.isArray(arr) \u0026amp;\u0026amp; arr.length === 0){ console.log(pm.response.json()); console.log(\u0026#34;Didn\u0026#39;t fetch any ListingId has the \u0026#39;HasBuyNow\u0026#39; feature: \u0026#34; +SingleListingId); console.log(\u0026#34;Post-Transaction: CheckingListingIdHasBuyNow Failed\u0026#34;); } else{ postman.setEnvironmentVariable(\u0026#39;ListingIdHasBuyNow\u0026#39;, arr); console.log(\u0026#34;Page: \u0026#34;+Page+\u0026#34;, total items: \u0026#34;+PageSize); console.log(\u0026#34;\u0026#39;HasBuyNow and BuyNowPrice \u0026lt;=20\u0026#39; items counts to: \u0026#34; + arr.length + \u0026#34;, ListingId details: \u0026#34;); console.log(arr); // Randomly get one ListingId from the stored ListingId list that has the \u0026#39;HasBuyNow\u0026#39; feature. // The ListingId will be picked for downstream transaction \u0026#39;RetrieveTheDetailsOfASingleListing\u0026#39; to use. var ListingIdHasBuyNowCount = pm.environment.get(\u0026#34;ListingIdHasBuyNowCount\u0026#34;); var ListingIdHasBuyNow=pm.environment.get(\u0026#34;ListingIdHasBuyNow\u0026#34;).split(\u0026#34;,\u0026#34;); postman.setEnvironmentVariable(\u0026#39;SingleListingId\u0026#39;, ListingIdHasBuyNow[Math.floor(Math.random() * Number(ListingIdHasBuyNowCount))]); var SingleListingId = pm.environment.get(\u0026#34;SingleListingId\u0026#34;); console.log(\u0026#34;Get random SingleListingId: \u0026#34; +SingleListingId); console.log(\u0026#34;Post-Transaction: CheckingListingIdHasBuyNow Pass\u0026#34;); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\nAPI 测试脚本增强 增强脚本，如添加事务功能、异常验证、参数化等。\n运行最终脚本并从前端页面或控制台日志进行验证。\nAPI 测试脚本否定案例扩展 使用我们在手动测试案例中所做的“等效类划分”和“边界值分析”。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-29","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-general-search/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-10-常规搜索API测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 检索单个列表的详细信息。\nAPI - 检索单个列表的详细信息脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段     关键响应字段 - 列表的详细信息。              ListingId Long Integer 商家信息的 ID。    … … …    HasBuyNow Boolean 表示商品是否有BuyNow标识    … … …    ShippingOptions Collection of or null 运输选项列表。     Method String or null 递送方式的名称（例如“NZ Courier”、“Rural Delivery”）。仅当 ShippingType 为自定义时适用。    ShippingId Long Integer 运输选项的 ID（在出价或立即购买时使用）。列出项目时不需要。   … … … …    更多请参考: 检索单个列表的详细信息\r\n  示例请求   GET https://api.tmsandbox.co.nz/v1/Listings/2149295093.JSON\n  示例响应   { \u0026#34;ListingId\u0026#34;: 2149295093, ... \u0026#34;AllowsPickups\u0026#34;: 3, \u0026#34;ShippingOptions\u0026#34;: [ { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 4.99, \u0026#34;Method\u0026#34;: \u0026#34;nationwide non-rural\u0026#34;, \u0026#34;ShippingId\u0026#34;: 4 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 9.99, \u0026#34;Method\u0026#34;: \u0026#34;rural\u0026#34;, \u0026#34;ShippingId\u0026#34;: 5 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 0, \u0026#34;Method\u0026#34;: \u0026#34;test free shipping\u0026#34;, \u0026#34;ShippingId\u0026#34;: 6 } ], ... } 业务介绍   前端页面 - 项目的详细信息   登录 \u0026gt; 搜索一个种类 \u0026gt; 过滤\u0026rsquo;buy now' 商品并进入商品详情页面   业务范围选择   链式组合交易\n检索您赢得的物品\r-\u0026gt;从您赢得的物品列表中删除购买\r-\u0026gt;常规搜索\r-\u0026gt;检索单个列表的详细信息（我在这里）\r-\u0026gt;使用“立即购买”购买拍卖\r从上游交易“从您赢得的物品列表中删除购买\r”中获取具有“立即购买”功能的随机物品 以显示。\n从下游交易“使用立即购买购买拍卖\r”的响应中获取随机 “ShippingId”\r以使用。\n  业务验证点   检查给定的项目详细信息显示在页面上。\nAPI测试脚本调试   在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考**API测试前的准备demo\r**\n  组装请求 - \u0026lsquo;检索单个列表的详细信息\r'   根据 API 规范，参数 - listingId表示要检索的列表 ID。\n并且listingId来自上游请求\u0026rsquo; General search\r\u0026lsquo;的响应，并且已经设置为环境变量：{{SingleListingId}}。\n所以请求应该是 GET https://api.tmsandbox.co.nz/v1/Listings/{{SingleListingId}}.JSON\n  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;ListingId\u0026#34;: 2149295658, ... \u0026#34;BuyNowPrice\u0026#34;: 13.4400, ... \u0026#34;HasBuyNow\u0026#34;: true, ... \u0026#34;AllowsPickups\u0026#34;: 1, \u0026#34;ShippingOptions\u0026#34;: [ { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 3.5, \u0026#34;Method\u0026#34;: \u0026#34;Tracked metro courier\u0026#34;, \u0026#34;ShippingId\u0026#34;: 4 }, { \u0026#34;Type\u0026#34;: 4, \u0026#34;Price\u0026#34;: 5.75, \u0026#34;Method\u0026#34;: \u0026#34;Tracked rural courier\u0026#34;, \u0026#34;ShippingId\u0026#34;: 5 }, { \u0026#34;Type\u0026#34;: 2, \u0026#34;Price\u0026#34;: 0, \u0026#34;Method\u0026#34;: \u0026#34;I intend to pick-up\u0026#34;, \u0026#34;ShippingId\u0026#34;: 2 } ], ... }   API检查点   检查“检索单个列表的详细信息”功能是否有效，它可以从其响应中优先选择提货选项，以便下游交易“使用立即购买购买拍卖\r”使用。\n然后我们根据示例功能得到下面的检查代码片段。\nconsole.log(\u0026#34;Post-Transaction: CheckingSingleListingIdDetails Start\u0026#34;); pm.test(\u0026#34;CheckingSingleListingIdDetails\u0026#34;, function () { console.log(pm.response.json()); var jsonData = pm.response.json(); var ListingId = jsonData.ListingId; var ShippingOptions = jsonData.ShippingOptions; var ShippingIds =[]; var Methods =[]; if(jsonData.HasBuyNow == true){ if (ShippingOptions !== []){ breakloop:{ for (i in ShippingOptions){ // Fetch the ShippingId that the shipping way is pick-up for downstream transaction \u0026#39;Buy an auction using Buy Now\u0026#39; to use if(ShippingOptions[i].Method == \u0026#34;I intend to pick-up\u0026#34;){ postman.setEnvironmentVariable(\u0026#39;ShippingId\u0026#39;, ShippingOptions[i].ShippingId); postman.setEnvironmentVariable(\u0026#39;Method\u0026#39;, ShippingOptions[i].Method); break breakloop; } // Fetch random ShippingId only when ShippingMethod has no pick-up option else{ ShippingIds.push(ShippingOptions[i].ShippingId); Methods.push(ShippingOptions[i].Method); postman.setEnvironmentVariable(\u0026#39;ShippingIdsCount\u0026#39;, ShippingIds.length); postman.setEnvironmentVariable(\u0026#39;ShippingIds\u0026#39;, ShippingIds); // If it has too many ShippingId, to get the randdom ShippingId should better not execute in the loop var ShippingId=pm.environment.get(\u0026#34;ShippingIds\u0026#34;).split(\u0026#34;,\u0026#34;); var ShippingIdsCount=pm.environment.get(\u0026#34;ShippingIdsCount\u0026#34;); var RandShippingOptions = Math.floor(Math.random() * Number(ShippingIdsCount)); postman.setEnvironmentVariable(\u0026#39;ShippingId\u0026#39;, ShippingIds[RandShippingOptions]); postman.setEnvironmentVariable(\u0026#39;Method\u0026#39;, Methods[RandShippingOptions]); } } } var ShippingId=pm.environment.get(\u0026#34;ShippingId\u0026#34;); var Method=pm.environment.get(\u0026#34;Method\u0026#34;); console.log(\u0026#34;ListingId: \u0026#34;+ListingId +\u0026#34;, ShippingId: \u0026#34; + ShippingId +\u0026#34;, and Method: \u0026#34; +Method); } console.log(\u0026#34;Post-Transaction: CheckingSingleListingIdDetails Pass\u0026#34;); } else{ console.log(\u0026#34;Post-Transaction: CheckingSingleListingIdDetails Failed\u0026#34;); } }); 运行脚本以从控制台日志验证检查点是否正常工作。\nAPI 测试脚本增强 增强脚本，如添加事务功能、异常验证、参数化等。\n运行最终脚本并从前端页面或控制台日志进行验证。\nAPI 测试脚本否定案例扩展 使用我们在手动测试案例中所做的“等效类划分”和“边界值分析”。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-29","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-retrieve-listings-details/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-11-检索单个列表的详细信息API 测试 | Postman接口自动化测试"},{"categories":null,"content":"API 功能 使用“立即购买”购买商品。\nAPI - 使用“立即购买”购买拍卖脚本开发步骤 API规范-\u0026gt;业务展示-\u0026gt;API测试脚本调试-\u0026gt;API测试脚本增强-\u0026gt;API测试脚本反向案例扩展-\u0026gt;API测试脚本发布\nAPI规范   关键请求字段     关键响应字段 - Buy Now 请求的详细信息。              Success Boolean 指示操作是否成功。    Description String or null 错误的描述，如果操作失败。    StatusCode Enumeration 立即购买请求的状态。     Success 0 竞标成功。   … … … …   PurchaseId Long Integer 刚刚购买的 ID。    … … … …      示例请求   POST https://api.tmsandbox.co.nz/v1/Bidding/BuyNow.JSON\n  示例响应   { \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Seller\u0026#39;s email owen4@snipesoft.net.nz\u0026#34;, \u0026#34;StatusCode\u0026#34;: 0, \u0026#34;PurchaseId\u0026#34;: 26231 } 业务介绍   前端页面 - 商品详情页面点击“立即购买”按钮。   登录 \u0026gt; 搜索一个种类 \u0026gt; 过滤\u0026rsquo;buy now' 商品并进入商品详情页面 \u0026gt; 单击\u0026rsquo;Buy Now' \u0026gt; 选择运输方式并确认购买   前端页面-确认购买页面     前端页面 - 购买详情页面     业务范围选择   链式组合交易\n检索您赢得的物品\r-\u0026gt;从您赢得的物品列表中删除购买\r-\u0026gt;通用搜索\r-\u0026gt;检索单个列表的详细信息\r-\u0026gt;使用“立即购买”购买拍卖（我在这里）\r从上游事务“通用搜索\r”的响应中获取“ListingId”作为请求字段之一。\n从上游交易“检索单个列表的详细信息\r”的响应中获取“ShippingId” 作为请求字段之一。\n  业务验证点   检查给定的项目详细信息显示在页面上。\nAPI测试脚本调试   在 Postman 的 Authorization 标签中选择 OAuth 1.0 对请求进行授权。   OAuth 1.0 是针对发送前需要授权的交易。模板如下：\n如何获取Consumer Key、Consumer Secret、OAuth Token、OAuth Token Secret，请参考API测试前的准备demo\r  组合请求 - \u0026lsquo;使用 Buy Now 购买拍卖\r'   根据 API 规范，参数 - ListingId表示 Buy Now 请求所针对的列表的 ID。\n并且listingId来自上游请求\u0026rsquo; General search\r\u0026lsquo;的响应，并且已经设置为环境变量：{{SingleListingId}}。\n根据 API 规范，参数 - ShippingOption表示如果立即购买请求成功将使用的首选运输选项的 ID。此 ID 可从商品详情中的 ShippingId 字段中检索。\n来自上游请求“从您赢得的商品列表中删除购买\r”的响应的 ShippingOption 来源 ，并且它已经设置为环境变量：{{ShippingId}}。\n所以请求应该是https://api.tmsandbox.co.nz/v1/Bidding/BuyNow.JSON\n  API连通性   连通性测试通过并获得响应示例。\n{ \u0026#34;Success\u0026#34;: true, \u0026#34;Description\u0026#34;: \u0026#34;Seller\u0026#39;s email mp70@abcde.com\u0026#34;, \u0026#34;StatusCode\u0026#34;: 0, \u0026#34;PurchaseId\u0026#34;: 26262 }   API检查点   检查“使用立即购买购买拍卖”功能是否有效，可以成功将物品购买到赢得的物品列表中。\n然后我们根据示例功能得到下面的检查代码片段。\n// Check BuyNow operation is sucessful console.log(\u0026#34;Post-Transaction: CheckingBuyNow Start\u0026#34;); pm.test(\u0026#34;CheckingBuyNowSuccess\u0026#34;, function () { console.log(pm.response.json()); var jsonData = pm.response.json(); var Success = jsonData.Success; var StatusCode = jsonData.StatusCode; var PurchaseId= jsonData.PurchaseId; postman.setEnvironmentVariable(\u0026#39;BuyNowPurchaseId\u0026#39;, PurchaseId); if(Success == true \u0026amp;\u0026amp; StatusCode == 0){ console.log(\u0026#34;Get sucessful StatusCode: \u0026#34; +StatusCode+\u0026#34; (0-Success)\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingBuyNow Pass\u0026#34;); } else{ //0-Success, 1-None, 2-ReserveMet, ..., 42-AutoBidDecreased console.log(\u0026#34;Get failed StatusCode: \u0026#34; +StatusCode); var Description = jsonData.Description; console.log(\u0026#34;Failed Description: \u0026#34; +Description); console.log(\u0026#34;Post-Transaction: CheckingBuyNow Failed\u0026#34;); } }); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Start\u0026#34;); const post_request = { url: pm.environment.get(\u0026#34;BaseUrl\u0026#34;)+\u0026#39;/v1/MyTradeMe/Won/All.JSON\u0026#39;, method: \u0026#39;GET\u0026#39;, header:[\u0026#39;Content-Type:application/json\u0026#39;, \u0026#39;Authorization:OAuth oauth_consumer_key=\u0026#34;4B34BCCFD24CF3497EE36E54204AA7E2\u0026#34;,oauth_token=\u0026#34;38B073E4F6C65F722A0CF964492EA6A2\u0026#34;,oauth_signature_method=\u0026#34;PLAINTEXT\u0026#34;,oauth_timestamp=\u0026#34;1623834029\u0026#34;,oauth_nonce=\u0026#34;Zr5dzIAuVON\u0026#34;,oauth_version=\u0026#34;1.0\u0026#34;,oauth_signature=\u0026#34;0D8635F6A51F0EA381A8D97F5D7812E2%26293BD08354D18D33871C4EBB02D67ACA\u0026#34;\u0026#39;], body: { } }; // setTimeout(()=\u0026gt;{ pm.sendRequest(post_request, function (err, response) { if (err) { console.log(err); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Failed\u0026#34;); } else { // Confirm whether PurchaseId of new buy item existed on the won list. pm.test(\u0026#34;Checking NewPurchasedListId existed in the won list\u0026#34;, function () { console.log(response.json()); var jsonData = response.json(); var Listdata = jsonData[\u0026#39;List\u0026#39;]; var SingleListingId = pm.environment.get(\u0026#34;SingleListingId\u0026#34;); var BuyNowPurchaseId = pm.environment.get(\u0026#34;BuyNowPurchaseId\u0026#34;); breakloop:{ for(var i = 0; i \u0026lt; Listdata.length; i++) { // console.log(\u0026#34;ListingId: \u0026#34; + Listdata[i].ListingId + \u0026#34;, PurchaseId: \u0026#34; + Listdata[i].PurchaseId); if (SingleListingId == Listdata[i].ListingId \u0026amp;\u0026amp; BuyNowPurchaseId == Listdata[i].PurchaseId){ console.log(\u0026#34;Found PurchaseId \u0026#34; +BuyNowPurchaseId +\u0026#34; and ListingId \u0026#34;+SingleListingId + \u0026#34; exists on the won list\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Pass\u0026#34;); break breakloop; } } if (i==0){ console.log(\u0026#34;Not Found any PurchaseId and ListingId exist on the won list.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Failed\u0026#34;); } else{ console.log(\u0026#34;The purchased item hasn\u0026#39;t been shown on the won list page, please waiting 60 seconds to check again.\u0026#34;); console.log(\u0026#34;Post-Transaction: CheckingPurchasedItemOnWonList Failed\u0026#34;); } } }); } }); // }, 70000); 运行脚本以从控制台日志验证检查点是否正常工作。\nAPI 测试脚本增强   增强脚本，如添加事务功能、异常验证、参数化等。   运行最终脚本并从前端页面或控制台日志进行验证。   在“立即购买”操作之前，请查看商品详情。\n在“立即购买”操作后，查看商品详情。\n在“立即购买”操作后，查看赢得的项目列表。\nAPI 测试脚本否定案例扩展 使用我们在手动测试案例中所做的“等效类划分”和“边界值分析”。\n这些API测试脚本都是做反方向的业务，作为上述API正案例的延伸。\nAPI测试脚本发布 当我们完成 API 正面和反面案例时，将脚本从调试文件夹移动到公共文件夹。\n然后等待使用 CICD 工具与其他脚本结合发布到 GitHub 特定存储库。\n","date":"2021-07-29","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-buy-an-auction-using-buy-now/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-12-使用Buy Now购买拍卖API 测试 | Postman接口自动化测试"},{"categories":null,"content":"场景处于API自动化测试中的位置 典型交易选择 -\u0026gt; 对应 API 选择 -\u0026gt; Scripting -\u0026gt;场景和报告（我在这儿） -\u0026gt; CICD\n典型交易选择 典型交易选择指：Trade Me-2-典型交易\r\n对应的API选择和脚本编写 对应的API选择和脚本编写参考：\n  Trade Me-3-检索一般类别 API 测试\r   Trade Me-4-检索您的监视列表 API 测试\r   Trade Me-5-从您的监视列表中删除列表 API 测试\r   Trade Me-6-检索即将关闭列表 API 测试\r   Trade Me-7-将列表添加到您的监视列表 API 测试\r   Trade Me-8-检索您赢得的物品 API 测试\r   Trade Me-9-从您赢得的物品列表中删除购买 API 测试\r   Trade Me-10-通用搜索API测试\r   Trade Me-11-检索单个列表的详细信息 API 测试\r   Trade Me-12-使用 Buy Now购买拍卖 API 测试\r   运行场景的两种方式 Postman 使用集合的概念来存储您的 API 测试脚本作为基本场景。\n您可以选择两种方式来运行场景和显示运行报告。\n一个是Collection Runner，另一个是Newman工具。\n由Collection Runner运行您的场景   什么是Collection Runner   Collection Runner 允许您以指定的顺序运行一组请求。\nCollection Runner 将记录您的请求测试结果，您的脚本可以在请求之间传递数据以及更改请求工作流程。\n更多请参考官方文档：使用 Collection Runner\r。\n  转到Collection Runner标签     启用“Show Postman Console”   View \u0026gt; Show Postman Console 以启用控制台日志   设置运行顺序、迭代次数、参数数据文件，然后单击“Run collection”按钮     查看来自 Postman 内置“View Results”的报告     从控制台日志查看运行结果   通过“Newman”运行您的场景   什么是Newman   Newman 是 Postman 的命令行收集运行程序。\n它允许您直接从命令行毫不费力地运行和测试 Postman 集合。\n它在构建时考虑到了可扩展性，因此您可以轻松地将其与您的持续集成服务器和构建系统集成。\n更多参考：Newman GitHub\r\n  如何安装Newman？   如何安装Newman参考：如何安装Newman？\r\n  将集合文件导出到本地   右键单击给定的集合 -\u0026gt; 导出 -\u0026gt; 单击“Collection v2.1 (recommended)” -\u0026gt; Export -\u0026gt; 选择一个本地目录来存储集合文件。\n此演示存储到本地 D:\\Software\\postman\\collections\n将有正面和反面案例脚本导出到本地\n正例和反例脚本名称为“tradeMeSandBox.postman_collection.json”和“tradeMeSandBox-Negative.postman_collection.json”。\n  导出环境参数文件到本地   单击特定环境“Edit”-\u0026gt; Export -\u0026gt; 选择本地目录来存储环境文件。\n此案例存储到本地 D:\\Software\\postman\\data\n  生成 CLI 和 HTML 报告   使用 Newman reporters 生成命令行和网页报告。\n语法指的是**Reporters\r** 。\n  查看 CLI 和 HTML 报告详细信息   ","date":"2021-08-02","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-scenarios-and-newman-report/","series":["Postman API Automation Practice"],"tags":["Postman"],"title":"Trade Me-13-场景和Newman报告 | Postman接口自动化测试"},{"categories":null,"content":"API自动化测试持续集成流程 典型事务选择 -\u0026gt; 对应 API 选择 -\u0026gt; 脚本编写 -\u0026gt; 场景和报告 -\u0026gt; 持续集成（我在这儿） 典型交易选择 典型交易选择参考：Trade Me-2-典型交易\r 对应的API选择和脚本编写 对应的API选择和脚本编写参考：   Trade Me-3-检索一般类别 API 测试\r   Trade Me-4-检索您的监视列表 API 测试\r   Trade Me-5-从您的监视列表中删除列表 API 测试\r   Trade Me-6-检索即将关闭列表 API 测试\r   Trade Me-7-将列表添加到您的监视列表 API 测试\r   Trade Me-8-检索您赢得的物品 API 测试\r   Trade Me-9-从您赢得的物品列表中删除购买 API 测试\r   Trade Me-10-通用搜索API测试\r   Trade Me-11-检索单个列表的详细信息API 测试\r   Trade Me-12-使用 Buy Now购买拍卖API 测试\r   场景和报告 场景和报告参考：Trade Me-13-场景和Newman报告\r 。 Jenkins 持续集成流程实践   Jenkins 持续集成流程的步骤   准备 -\u0026gt; 新建 CI 作业 -\u0026gt; 作业配置 -\u0026gt; 作业运行 -\u0026gt; 作业结果检查 -\u0026gt; 电子邮件给相关人   准备工作 - 相关工具安装   Jenkins安装参考：如何安装Jenkins？\r Git Bash安装参考：如何安装Git Bash？\r   准备工作 - 环境启动   在构建 CI 作业之前初始化 Postman 相关脚本、数据、报告、存储库的文件夹结构。 rem create folder for Postman collection, env parameter, temporary parameter, reports pushd d:\\Software \u0026amp;\u0026amp; md postman\\collections postman\\data postman\\reports\\hisreports postman\\postman_github 将 Postman 主目录设置为系统环境参数 setx \u0026#34;POSTMAN_HOME\u0026#34; \u0026#34;D:\\Software\\postman\u0026#34; /M   准备工作 - 将 Postman 集合和环境变量文件导出到本地   将 Postman 集合文件导出到本地是指：将 Postman 集合文件导出到本地\r\n将 Postman 环境变量文件导出到本地是指：将 Postman 环境变量文件导出到本地\r\n  准备工作 - GItHub 存储库克隆   将远程 Postman GitHub 存储库克隆到给定的本地文件夹 注意：设置系统环境变量后需要启动一个新的dos窗口\nrem postman github repository clone pushd %POSTMAN_HOME%\\postman_github \u0026amp;\u0026amp; git init \u0026amp;\u0026amp; git clone https://github.com/ifulltest/postman.git 设置用户名和个人token以授权本地和远程存储库之间的文件传输。 [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true [remote \u0026#34;origin\u0026#34;] url = https://Github username:personal token@github.com/ifulltest/postman.git fetch = +refs/heads/*:refs/remotes/origin/* 如何获得GitHub个人token并将其设置到本地Windows服务器?\r  新建持续集成作业   通过自定义端口号启动Jenkins：java -jar jenkins.war –httpPort=8088 ……\n创建一个Freestyle项目 示例项目命名为：\u0026lsquo;TradeMe-API-Automation-Practice\u0026rsquo;\n  作业配置 - 常规   丢弃旧版本   作业配置 - 构建 - 归档报告   Build Windows 批处理命令，将创建超过 7 天的Postman报告存档到历史文件夹。 rem Archive Newman reports that creating for more than seven days to the hisreports folder. pushd %POSTMAN_HOME% \u0026amp;\u0026amp; ping /n 3 127.0.0.1\u0026gt;nul copy /y /b reports\\hisreports\\newmanrpt-his.html \u0026#34;%POSTMAN_HOME%\\reports\u0026#34; \u0026amp;\u0026amp; forfiles /p \u0026#34;%POSTMAN_HOME%\\reports\u0026#34; /m *.html /d -7 /c \u0026#34;cmd /c move @path %POSTMAN_HOME%\\reports\\hisreports\u0026#34; \u0026amp;\u0026amp; copy /y /b reports\\hisreports\\newmanrpt-his.txt \u0026#34;%POSTMAN_HOME%\\reports\u0026#34; \u0026amp;\u0026amp; forfiles /p \u0026#34;%POSTMAN_HOME%\\reports\u0026#34; /m *.txt /d -7 /c \u0026#34;cmd /c move @path %POSTMAN_HOME%\\reports\\hisreports\u0026#34; 存档操作前，需要存档reports文件夹中创建时间超过7天的两个文件。 运行作业并查看 Jenkins 日志 Started by user GaryGao Running as SYSTEM Building on master in workspace D:\\Software\\Jenkins\\workspace\\TradeMe-API-Automation-Practice [TradeMe-API-Automation-Practice] $ cmd /c call C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\jenkins7423834600478251788.bat D:\\Software\\Jenkins\\workspace\\TradeMe-API-Automation-Practice\u0026gt;rem Archive Newman reports that creating for more than seven days to the hisreports folder. D:\\Software\\Jenkins\\workspace\\TradeMe-API-Automation-Practice\u0026gt;pushd D:\\Software\\postman \u0026amp;\u0026amp; ping /n 3 127.0.0.1 1\u0026gt;nul D:\\Software\\postman\u0026gt;copy /y /b reports\\hisreports\\newmanrpt-his.html \u0026#34;D:\\Software\\postman\\reports\u0026#34; \u0026amp;\u0026amp; forfiles /p \u0026#34;D:\\Software\\postman\\reports\u0026#34; /m *.html /d -7 /c \u0026#34;cmd /c move @path D:\\Software\\postman\\reports\\hisreports\u0026#34; \u0026amp;\u0026amp; copy /y /b reports\\hisreports\\newmanrpt-his.txt \u0026#34;D:\\Software\\postman\\reports\u0026#34; \u0026amp;\u0026amp; forfiles /p \u0026#34;D:\\Software\\postman\\reports\u0026#34; /m *.txt /d -7 /c \u0026#34;cmd /c move @path D:\\Software\\postman\\reports\\hisreports\u0026#34; 1 file(s) copied. 1 file(s) moved. 1 file(s) moved. 1 file(s) moved. 1 file(s) copied. 1 file(s) moved. D:\\Software\\postman\u0026gt;exit 0 Finished: SUCCESS 存档操作后，给定的两个文件存档在 hisreports 文件夹中。 注意：hisreports文件夹中的\u0026rsquo;newmanrpt-his.html\u0026rsquo;和\u0026rsquo;newmanrpt-his.txt\u0026rsquo;是7天多前创建的两个文件，确保归档循环操作不会失败。\n  作业配置 - 构建 - 生成 CLI 和 HTML 报告   构建用于生成正面和负面案例 CLI 和 HTML 报告的作业。 rem Using Newman to generate positive case CLI \u0026amp; HTML reports, dynamic report name stores in a temporary file. pushd %POSTMAN_HOME% if %time:~0,2% leq 9 (set h=0%time:~1,1%) else (set h=%time:~0,2%) set y=%date:~0,4%\u0026amp; set m=%date:~5,2%\u0026amp; set d=%date:~8,2%\u0026amp; set mi=%time:~3,2%\u0026amp; set s=%time:~6,2%\u0026amp; set ms=%time:~9,2% \u0026amp;\u0026amp; ping /n 3 127.0.0.1\u0026gt;nul newman run collections\\tradeMeSandBox.postman_collection.json -e data\\tradeMeSandBox.postman_environment.json -r cli,html --reporter-html-export reports\\newmanrpt-%y%%m%%d%%h%%mi%%s%.html\u0026gt;reports\\newmanrpt-%y%%m%%d%%h%%mi%%s%.txt \u0026amp; echo |set /p=\u0026#34;newmanrpt-%y%%m%%d%%h%%mi%%s%\u0026#34;\u0026gt;%POSTMAN_HOME%\\data\\fn.txt \u0026amp; exit 0 rem Using Newman to generate negative case CLI \u0026amp; HTML reports, dynamic report name stores in a temporary file. pushd %POSTMAN_HOME% if %time:~0,2% leq 9 (set h=0%time:~1,1%) else (set h=%time:~0,2%) set y=%date:~0,4%\u0026amp; set m=%date:~5,2%\u0026amp; set d=%date:~8,2%\u0026amp; set mi=%time:~3,2%\u0026amp; set s=%time:~6,2%\u0026amp; set ms=%time:~9,2% \u0026amp;\u0026amp; ping /n 3 127.0.0.1\u0026gt;nul newman run collections\\tradeMeSandBox-Negative.postman_collection.json -e data\\tradeMeSandBox.postman_environment.json -r cli,html --reporter-html-export reports\\newmanrpt-%y%%m%%d%%h%%mi%%s%-neg.html\u0026gt;reports\\newmanrpt-%y%%m%%d%%h%%mi%%s%-neg.txt \u0026amp; echo |set /p=\u0026#34;newmanrpt-%y%%m%%d%%h%%mi%%s%-neg\u0026#34;\u0026gt;%POSTMAN_HOME%\\data\\negfn.txt \u0026amp; exit 0 运行作业并查看 Jenkins 日志 作业完成后，会生成 CLI 和 HTML 报告以及临时数据文件。   作业配置 - 构建 - 将本地报告上传到远程 GitHub 存储库   将新生成的 Newman 报告复制到本地 GitHub 存储库 rem copy newly generated Newman report to local GitHub repository pushd %POSTMAN_HOME% set /P fn=\u0026lt;data\\fn.txt \u0026amp;\u0026amp; set /P negfn=\u0026lt;data\\negfn.txt copy /y reports\\%fn%.* postman_github\\postman\\reports \u0026amp;\u0026amp; copy /y reports\\%negfn%.* postman_github\\postman\\reports 运行作业并查看 Jenkins 日志 作业完成后，给定的报告已复制到本地 GitHub 存储库 将给定的本地 GitHub 报告提交到公共 GitHub 存储库 rem Commit given reports local GitHub to public GitHub repository pushd %POSTMAN_HOME% set /P fn=\u0026lt;data\\fn.txt \u0026amp;\u0026amp; set /P negfn=\u0026lt;data\\negfn.txt pushd %POSTMAN_HOME%\\postman_github\\postman\\reports \u0026amp;\u0026amp; git pull origin main \u0026amp;\u0026amp; git add %fn%.* %negfn%.* \u0026amp;\u0026amp; git commit -m \u0026#34;txt and html report\u0026#34; \u0026amp;\u0026amp; git push -u origin main 运行作业并查看 Jenkins 日志 工作结束后，给定的报告已提交到公共 GitHub 存储库   作业配置 - 构建 - 发送给相关人员的电子邮件   构建作业以通过电子邮件向相关人员发送报告相关信息。 rem Email to stakeholders the given testing report pushd %POSTMAN_HOME% \u0026amp;\u0026amp; node collections\\nodemailer.js \u0026amp;\u0026amp; del %POSTMAN_HOME%\\data\\*fn.txt 作业前，查看相关存储状态。 运行作业并查看 Jenkins 日志 作业后，查看相关存储和电子邮件状态。   如何使用Node.js实现email功能   上面的例子主要是使用node.js的\u0026rsquo;nodemailer\u0026rsquo;模块来实现email功能。\n将 Node.js 安装在 Postman 主目录或直接将‘ node_moudules ’移入。\n如何安装Node.js请参考：如何安装Node.js\r 将扩展模块“nodemailer”和“moment”安装到 Node.js。 Moule 安装命令：\nnpm install nodemailer 或 yarn add nodemailer –save\nnpm install moment 或 yarn add moment\n通过“nodemailer.js”实现电子邮件 - 获取当前时间以供以后使用的电子邮件标题。 // Get current time for later email title to use. const moment = require(\u0026#39;moment\u0026#39;) let currentTime = moment(Date.now()).format(\u0026#39;YYYY-MM-DD HH:mm:ss\u0026#39;) 电子邮件通过\u0026rsquo;nodemailer.js\u0026rsquo;实现——文件操作并连接电子邮件内容。 // file systme module which can operate the file const fs = require(\u0026#34;fs\u0026#34;); const path_fn = \u0026#34;D:/Software/postman/data/fn.txt\u0026#34;; // file path const isExist_fn = fs.existsSync(path_fn); // check whether file exist const filedata_fn = isExist_fn ? fs.readFileSync(path_fn, \u0026#34;utf-8\u0026#34;) : \u0026#34;\u0026#34;; const fs_neg = require(\u0026#34;fs\u0026#34;); const path_negfn = \u0026#34;D:/Software/postman/data/negfn.txt\u0026#34;; const isExist_negfn = fs_neg.existsSync(path_negfn); const filedata_negfn = isExist_negfn ? fs_neg.readFileSync(path_negfn, \u0026#34;utf-8\u0026#34;) : \u0026#34;\u0026#34;; console.log(\u0026#34;Positive cases report name: \u0026#34;+filedata_fn); console.log(\u0026#34;Negative cases report name: \u0026#34;+filedata_negfn); // Concatenate the email content var arr=new Array(); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;font size=\u0026#39;5\u0026#39;\u0026gt;Positive cases HTML report: \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;a href=https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_fn+\u0026#34;.html\u0026gt;\u0026lt;b\u0026gt;\u0026lt;font size=\u0026#39;4\u0026#39;\u0026gt;https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_fn+\u0026#34;.html\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;font size=\u0026#39;5\u0026#39;\u0026gt;Positive cases TXT report: \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;a href=https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_fn+\u0026#34;.txt\u0026gt;\u0026lt;b\u0026gt;\u0026lt;font size=\u0026#39;4\u0026#39;\u0026gt;https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_fn+\u0026#34;.txt\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;font size=\u0026#39;5\u0026#39;\u0026gt;Negative cases HTML report: \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;a href=https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_negfn+\u0026#34;.html\u0026gt;\u0026lt;b\u0026gt;\u0026lt;font size=\u0026#39;4\u0026#39;\u0026gt;https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_negfn+\u0026#34;.html\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;font size=\u0026#39;5\u0026#39;\u0026gt;Negative cases TXT report: \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); arr.push(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;a href=https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_negfn+\u0026#34;.txt\u0026gt;\u0026lt;b\u0026gt;\u0026lt;font size=\u0026#39;4\u0026#39;\u0026gt;https://ifulltest.github.io/postman/reports/\u0026#34;+filedata_negfn+\u0026#34;.txt\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;); var htmltxt = arr.join(\u0026#34;\u0026#34;); console.log(\u0026#34;htmltxt: \u0026#34;+htmltxt); 通过\u0026rsquo;nodemailer.js\u0026rsquo;实现电子邮件-发送电子邮件 // nodemailer module which can operate email var nodemailer = require(\u0026#34;nodemailer\u0026#34;) var transport = nodemailer.createTransport({ host: \u0026#34;smtp.gmail.com\u0026#34;, secureConnection: true, port: 465, auth:{ user: \u0026#34;sender email\u0026#34;, pass: \u0026#34;sender email password\u0026#34; } }) var mailOptions = { from: \u0026#34;sender email\u0026#34;, to: \u0026#34;receiver email\u0026#34;, subject: \u0026#34;Daily env check: \u0026#34;+currentTime, text: \u0026#34;Hello-text\u0026#34;, html: htmltxt, } transport.sendMail(mailOptions, function(err, response) { if(err) console.log(err) else console.log(response) })   其他等待扩展的 CI 实践   上面的 CI 示例使用 Windows 批处理命令来实现 CI 过程。\n使用\u0026rsquo;Execute shell\u0026rsquo;和\u0026rsquo;Pipe line\u0026rsquo;模式实现CI过程将在后面的文章中展示。\n","date":"2021-08-03","permalink":"https://ifulltest.github.io/zh-cn/posts/tm-api-jenkins-cicd-process/","series":["Postman API Automation Practice"],"tags":["Postman","Jenkins"],"title":"Trade Me-14-Jenkins-持续集成流程 | Postman接口自动化测试"},{"categories":["DevOps"],"content":"Git 是一组命令行实用程序，旨在在 Unix 风格的命令行环境中执行。\nGit Bash 是一个适用于 Microsoft Windows 环境的应用程序，它为 Git 命令行体验提供了一个模拟层。\n本文将简要介绍一个 Git 基础知识：如何安装 Git Bash\u0026hellip;\nGit Bash安装步骤 下载并安装 Git Bash -\u0026gt; 启动 Git Bash -\u0026gt; 基本配置\n下载并安装 Git Bash   下载 Git Bash   Git Bash 包下载页面：Git Bash 下载\r  安装 Git Bash   双击运行安装包，在弹出的安装窗口中点击“下一步”，最后点击“安装”完成安装。\n  启动 Git Bash   点击Windows开始图标，在开始搜索栏输入“Git Bash”，点击回车打开Git Bash客户端，建议固定到Windows任务栏。\n通过命令 git –version 查看版本\n基本配置 要配置 Git Bash 客户端用户名和电子邮件，请在 Git Bash 中输入以下命令行。\ngit config --global user.name \u0026#34;\u0026lt;Your username\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;Your email\u0026gt;\u0026#34; 更多关于 Git Bash 更多关于Git Bash请参考其官方文档：Git Documentation\r\n","date":"2021-08-03","permalink":"https://ifulltest.github.io/zh-cn/posts/git-bash-installation/","series":null,"tags":["Git","GitHub"],"title":"如何安装Git Bash?"},{"categories":["DevOps"],"content":"JDK - “Java™ 平台，标准版开发工具包”是使用 Java 编程语言构建应用程序和组件的开发环境。\n它包括用于开发和测试用 Java 编程语言编写并在 Java 平台上运行的程序的有用工具\u0026hellip;\u0026hellip;\nJDK安装步骤   下载 JDK   JDK下载页面\r 解压到指定文件夹   设置JDK的环境变量   设置 \u0026lsquo;JAVA_HOME\u0026rsquo; = D:\\Software\\Java\\jdk-16.0.2 设置 \u0026lsquo;CLASSPATH\u0026rsquo; - .;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar; 设置“Path” - %JAVA_HOME%\\bin   检查安装和配置是否有效。   通过 java -version 和 javac 命令检查 ","date":"2021-08-03","permalink":"https://ifulltest.github.io/zh-cn/posts/jdk-installation/","series":null,"tags":["Java","Jenkins"],"title":"如何安装JDK?"},{"categories":["DevOps"],"content":"作为领先的开源自动化服务器，Jenkins 提供了数百个插件来支持任何项目的构建、部署和自动化。\n本文将简要介绍Jenkins的一个基本知识：如何安装Jenkins\u0026hellip;\nJenkins安装步骤 准备工作 -\u0026gt; 下载并安装 Jenkins -\u0026gt; 启动 Jenkins\nJenkins安装前的准备工作   安装JDK   如何安装JDK参考：如何安装JDK\r\n下载并安装Jenkins   下载Jenkins   Jenkins 包下载页面：Jenkins 下载\r\nJenkins安装参考：安装Jenkins\r\n  Jenkins启动   通过自定义端口号启动Jenkins：java -jar jenkins.war –httpPort=8088\n……\n更多关于Jenkins 更多关于Jenkins请参考其官方文档：Jenkins User Documentation\r\n","date":"2021-08-03","permalink":"https://ifulltest.github.io/zh-cn/posts/jenkins-installation/","series":null,"tags":["Jenkins"],"title":"如何安装Jenkins?"},{"categories":["API Automation"],"content":"Newman安装步骤 下载并安装 Newman 应用程序 -\u0026gt; 按版本验证您的 Newman 安装 -\u0026gt; 运行 Newman 以获取报告\u0026hellip;\n下载并安装Newman应用程序 在安装 Newman 之前，您需要先安装 Node.js。如何安装Node.js请参考：Node.js安装步骤\r Newman官方教程入口\r 使用“npm install -g newman”安装应用程序。 通过版本验证您的 Newman 安装 使用Postman 特定集合运行 Newman 以获取报告 将集合和环境文件导出到本地，然后运行 Newman 命令以获取展示报告。 如何获取集合和环境文件，请参考：将集合文件导出到本地\r 和将环境参数文件导出到本地\r 如何运行Newman获取demo报告，请参考：生成CLI和HTML报告\r","date":"2021-08-02","permalink":"https://ifulltest.github.io/zh-cn/posts/newman-installation/","series":null,"tags":["Postman"],"title":"如何安装Newman?"},{"categories":["API Automation","UI Automation"],"content":"Node.js 安装步骤 下载并安装 Node.js 应用程序 -\u0026gt; 通过版本验证您的 Node.js 安装 -\u0026gt; 创建一个简单的脚本\u0026hellip;\n下载并安装 Node.js 应用程序 去官网下载安装app\r 设置环境变量的路径 通过版本验证您的 Node.js 安装 创建一个简单的脚本 创建演示脚本“test.js”以验证基本功能是否正常工作。\n","date":"2021-08-02","permalink":"https://ifulltest.github.io/zh-cn/posts/nodejs-installation/","series":null,"tags":["Postman","Cypress"],"title":"如何安装Node.js?"},{"categories":["API Automation"],"content":"Postman安装步骤 下载并安装Postman应用程序 -\u0026gt; 注册您的帐户并创建工作区 -\u0026gt; 创建集合 -\u0026gt; 添加请求并开始编写脚本…\n下载并安装Postman应用程序 前往官网下载安装应用\r 注册您的帐户并创建工作区 创建集合 添加请求并开始编写脚本 ","date":"2021-08-02","permalink":"https://ifulltest.github.io/zh-cn/posts/postman-installation/","series":null,"tags":["Postman"],"title":"如何安装Postman?"}]